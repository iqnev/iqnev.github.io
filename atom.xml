<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    
    <title>Codes are a puzzle</title>
    <description>A minimal hugo theme focus on content</description>
    <link>https://iqnev.github.io/</link>
    
    <language>en</language>
    <copyright>Copyright 2023, Calvin Tran</copyright>
    <lastBuildDate>Sun, 26 Nov 2023 14:04:18 +0300</lastBuildDate>
    <generator>Hugo - gohugo.io</generator>
    <docs>http://cyber.harvard.edu/rss/rss.html</docs>
    <atom:link href="https://iqnev.github.io//atom.xml" rel="self" type="application/atom+xml"/>
    
    
    <item>
      <title>Registering Reflection in Quarkus Extensions</title>
      <link>https://iqnev.github.io/posts/registering-reflection-in-quarkus-extensions/</link>
      <description>&lt;p&gt;Quarkus utilizes ahead-of-time &lt;strong&gt;(AOT)&lt;/strong&gt; compilation to build blazing fast native executables. However,
&lt;strong&gt;AOT&lt;/strong&gt; works through closed-world analysis which eliminates unused code paths. This can break
functionality relying on runtime reflection like dependency injection, bytecode manipulation, and
integration with certain libraries.&lt;/p&gt;
&lt;h2 id=&#34;registering-for-reflection&#34;&gt;Registering for Reflection&lt;/h2&gt;
&lt;p&gt;When building a native executable, GraalVM operates under a closed-world assumption, analyzing the
call tree and eliminating unused classes, methods, and fields. To include elements requiring
reflective access, explicit registration becomes crucial.&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;@RegisterForReflection&lt;/code&gt; Annotation
The simplest way to register a class for reflection is through the &lt;code&gt;@RegisterForReflection&lt;/code&gt;
annotation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@RegisterForReflection
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyClass&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For classes in third-party JARs, an empty class can host the &lt;code&gt;@RegisterForReflection&lt;/code&gt; annotation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@RegisterForReflection(targets&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;{DemoReflection1.&lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;, DemoReflection2.&lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyReflectionConfiguration&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that &lt;code&gt;DemoReflection1&lt;/code&gt; and &lt;code&gt;DemoReflection2&lt;/code&gt; will be registered for
reflection, but not &lt;code&gt;MyReflectionConfiguration&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Using a Configuration File
Configuration files can also be used to register classes for reflection. For instance, to register
all methods of &lt;code&gt;com.demo.MyClass&lt;/code&gt;, create &lt;code&gt;reflection-config.json&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;com.demo.MyClass&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;allDeclaredConstructors&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;allPublicConstructors&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;allDeclaredMethods&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;allPublicMethods&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;allDeclaredFields&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;allPublicFields&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Make the configuration file known to the native-image executable by adding the following to
&lt;code&gt;application.properties&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;quarkus.native.additional-build-args&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;-H:ReflectionConfigurationFiles=reflection-config.json&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;quarkus-extension-support-for-native-mode&#34;&gt;Quarkus Extension Support for Native Mode&lt;/h2&gt;
&lt;p&gt;To enable native mode support for a custom extension, Quarkus simplifies the registration of
reflection through &lt;code&gt;ReflectiveClassBuildItem&lt;/code&gt;.
This class is used in the build process to specify classes requiring reflective access.&lt;/p&gt;
&lt;h2 id=&#34;understanding-reflectiveclassbuilditem&#34;&gt;Understanding ReflectiveClassBuildItem:&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ReflectiveClassBuildItem&lt;/code&gt; is a Quarkus-specific class utilized in the extension development process.
It plays a crucial role in indicating which classes should be made available for reflective access
at runtime. This is especially relevant when certain operations, such as dependency injection or
bytecode manipulation, require runtime reflection.&lt;/p&gt;
&lt;h2 id=&#34;usage-in-quarkus-extensions&#34;&gt;Usage in Quarkus Extensions:&lt;/h2&gt;
&lt;p&gt;When creating a Quarkus extension, you can seamlessly integrate the registration of reflective
classes using &lt;code&gt;ReflectiveClassBuildItem&lt;/code&gt;.
The &lt;code&gt;@BuildStep&lt;/code&gt; annotation signifies a build step, a fundamental concept in Quarkus extension
development.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyClass&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @BuildStep
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ReflectiveClassBuildItem &lt;span style=&#34;color:#50fa7b&#34;&gt;reflection&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ReflectiveClassBuildItem(&lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;com.demo.DemoClass&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this snippet, &lt;code&gt;MyClass&lt;/code&gt; is a placeholder for the actual extension class you are
developing. The &lt;code&gt;reflection()&lt;/code&gt; method, annotated with &lt;code&gt;@BuildStep&lt;/code&gt;, creates an instance of
&lt;code&gt;ReflectiveClassBuildItem&lt;/code&gt;, indicating that the class &lt;code&gt;com.demo.DemoClass&lt;/code&gt; requires reflective access.
The false arguments for methods and fields indicate that reflective access is needed only for the
constructor.&lt;/p&gt;
&lt;p&gt;I showcase a Quarkus extension that leverages the &lt;code&gt;ReflectiveClassBuildItem to&lt;/code&gt; dynamically register
classes for reflection.
The extension focuses on identifying classes implementing a specific interface (Conversion in this
case) and also explicitly registers some standard Java classes for reflective access.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; io.quarkus.deployment.annotations.BuildStep;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; io.quarkus.deployment.builditem.CombinedIndexBuildItem;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.jboss.jandex.ClassInfo;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; java.text.DecimalFormat;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; java.text.DecimalFormatSymbols;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; java.text.SimpleDateFormat;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ReflectionExtension&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// Interface to identify classes for reflection&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; DotName CUSTOM_FEATURE_INTERFACE &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; DotName.&lt;span style=&#34;color:#50fa7b&#34;&gt;createSimple&lt;/span&gt;(CustomFeature.&lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;getName&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @BuildStep
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;registerForReflection&lt;/span&gt;(CombinedIndexBuildItem combinedIndex,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               BuildProducer&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;ReflectiveClassBuildItem&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; reflectiveClasses) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (ClassInfo implClassInfo : combinedIndex.&lt;span style=&#34;color:#50fa7b&#34;&gt;getIndex&lt;/span&gt;().&lt;span style=&#34;color:#50fa7b&#34;&gt;getAllKnownImplementors&lt;/span&gt;(CUSTOM_FEATURE_INTERFACE)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            String combinedIndexName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; implClassInfo.&lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;().&lt;span style=&#34;color:#50fa7b&#34;&gt;toString&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            log.&lt;span style=&#34;color:#50fa7b&#34;&gt;debugf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;CustomFeature class implementation &amp;#39;[%s]&amp;#39; registered for reflection&amp;#34;&lt;/span&gt;, combinedIndexName);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            reflectiveClasses.&lt;span style=&#34;color:#50fa7b&#34;&gt;produce&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ReflectiveClassBuildItem(&lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;, combinedIndexName));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CombinedIndexBuildItem:&lt;/strong&gt; This build item provides access to the combined index of all classes in
the application. In this example, it is used to retrieve all known implementors of the Conversion
interface.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Iterating Over Implementors:&lt;/strong&gt; The extension iterates over all classes implementing the Conversion
interface and registers them for reflection using &lt;code&gt;ReflectiveClassBuildItem&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DotName&lt;/strong&gt; is a class representing a dotted name, which is essentially a fully qualified class name
in a format where package names and class names are separated by dots. The DotName class is part
of the &lt;strong&gt;Jandex library&lt;/strong&gt;, which is a tool used by Quarkus for indexing and querying Java classes.
&lt;code&gt;DotName&lt;/code&gt; is used to represent and work with fully qualified class names in the &lt;strong&gt;Jandex indexing&lt;/strong&gt;
system. It&amp;rsquo;s a lightweight and efficient way to refer to classes within the &lt;strong&gt;Jandex index&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Considerations:&lt;/strong&gt;
While &lt;code&gt;ReflectiveClassBuildItem&lt;/code&gt; provides a mechanism to address reflective access requirements, it&amp;rsquo;s
crucial to use it judiciously. Excessive reliance on reflective access can undermine the performance
benefits of Quarkus&amp;rsquo; AOT compilation approach. Therefore, it&amp;rsquo;s recommended to leverage this tool
sparingly and explore alternative strategies whenever possible.&lt;/p&gt;
&lt;p&gt;In summary, understanding and effectively using ReflectiveClassBuildItem is key to optimizing
Quarkus extensions for native mode. By selectively indicating classes that necessitate reflective
access, developers can strike a balance between the advantages of AOT compilation and the
unavoidable realities of certain runtime operations.&lt;/p&gt;
</description>
      <author>Calvin Tran</author>
      <guid>https://iqnev.github.io/posts/registering-reflection-in-quarkus-extensions/</guid>
      <pubDate>Sun, 26 Nov 2023 14:04:18 +0300</pubDate>
    </item>
    
    <item>
      <title>Exploring Synthetic Beans in Quarkus: A Powerful Extension Mechanism</title>
      <link>https://iqnev.github.io/posts/exploring-synthetic-beans-in-quarkus-a-powerful-extension-mechanism/</link>
      <description>&lt;p&gt;In the world of Quarkus, the realm of dependency injection is rich and versatile, offering
developers a multitude of tools to manage and control beans. One such tool is the concept of
synthetic beans. Synthetic beans are a powerful extension mechanism that allows you to register
beans whose attributes are not derived from a Java class, method, or field. Instead, all the
attributes of a synthetic bean are defined by an extension.&lt;/p&gt;
&lt;p&gt;In this article, we&amp;rsquo;ll take a deep dive into the world of synthetic beans in Quarkus. We&amp;rsquo;ll explore
the need for synthetic beans, their practical applications, and how to create and use them in your
Quarkus applications.&lt;/p&gt;
&lt;h2 id=&#34;understanding-synthetic-beans&#34;&gt;Understanding Synthetic Beans&lt;/h2&gt;
&lt;p&gt;In Quarkus, beans are the building blocks of your application, managed by the Contexts and
Dependency Injection (CDI) framework. Typically, CDI beans are Java classes that are annotated with
various CDI annotations such as &lt;code&gt;@ApplicationScoped&lt;/code&gt;, &lt;code&gt;@RequestScoped&lt;/code&gt;, or &lt;code&gt;@Inject&lt;/code&gt;. These
annotations
allow CDI to automatically manage the lifecycle and injection of beans.&lt;/p&gt;
&lt;p&gt;However, there are situations where you may need to register a bean that doesn&amp;rsquo;t neatly fit into the
traditional CDI model. This is where synthetic beans come into play. Synthetic beans are created by
extensions and have their attributes entirely defined by these extensions. In the world of regular
CDI, you would achieve this using the &lt;code&gt;AfterBeanDiscovery.addBean()&lt;/code&gt;
and &lt;code&gt;SyntheticComponents.addBean()&lt;/code&gt;
methods. In Quarkus, this is accomplished using &lt;code&gt;SyntheticBeanBuildItem&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;when-do-you-need-synthetic-beans&#34;&gt;When Do You Need Synthetic Beans?&lt;/h2&gt;
&lt;p&gt;So, when might you need to use synthetic beans in Quarkus? Synthetic beans are a powerful tool when:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Integrating Third-Party Libraries:&lt;/strong&gt; You&amp;rsquo;re working with a third-party library that doesn&amp;rsquo;t
have CDI annotations but needs to be integrated into your CDI-based application. Synthetic beans
allow you to bridge this gap.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dynamic Bean Registration:&lt;/strong&gt; You need to register beans dynamically at runtime, depending on
configuration or other factors. Synthetic beans give you the flexibility to create and register
beans on-the-fly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Customized Bean Management:&lt;/strong&gt; You require fine-grained control over the scope and behavior of a
bean that can&amp;rsquo;t be achieved with standard CDI annotations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Implementing Specialized Beans:&lt;/strong&gt; You want to create specialized beans with unique attributes
that don&amp;rsquo;t correspond to traditional Java classes or methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mocking Dependencies for Testing:&lt;/strong&gt; Synthetic beans provide a useful way to mock out
dependencies and inject mock implementations for testing purposes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;synthesisfinishedbuilditem&#34;&gt;SynthesisFinishedBuildItem&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;SynthesisFinishedBuildItem&lt;/code&gt; is used to indicate that the CDI bean discovery and registration
process has completed.
This allows extensions to know when it is safe to interact with the beans that have been registered.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@BuildStep  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onSynthesisFinished&lt;/span&gt;(SynthesisFinishedBuildItem synthesisFinished){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// CDI bean registration is complete, can now safely interact with beans&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;syntheticbeansruntimeinitbuilditem&#34;&gt;SyntheticBeansRuntimeInitBuildItem&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;SyntheticBeansRuntimeInitBuildItem&lt;/code&gt; is used to register a callback that will be invoked at
runtime after all synthetic beans have been initialized.
This is useful if you need to perform additional initialization logic involving synthetic beans.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@BuildStep
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SyntheticBeansRuntimeInitBuildItem &lt;span style=&#34;color:#50fa7b&#34;&gt;initSyntheticBeans&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SyntheticBeansRuntimeInitBuildItem(ids&lt;span style=&#34;color:#ff79c6&#34;&gt;-&amp;gt;&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// Perform logic with initialized synthetic beans&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The callback passed to &lt;code&gt;SyntheticBeansRuntimeInitBuildItem&lt;/code&gt; will receive a &lt;code&gt;Set&amp;lt;Integer&amp;gt;&lt;/code&gt; containing
the IDs of all initialized synthetic beans.&lt;/p&gt;
&lt;p&gt;So in summary, &lt;code&gt;SynthesisFinishedBuildItem&lt;/code&gt; indicates bean discovery is done,
while &lt;code&gt;SyntheticBeansRuntimeInitBuildItem&lt;/code&gt; allows initializing logic depending on synthetic beans.&lt;/p&gt;
&lt;h2 id=&#34;creating-synthetic-beans-with-syntheticbeanbuilditem&#34;&gt;Creating Synthetic Beans with SyntheticBeanBuildItem&lt;/h2&gt;
&lt;p&gt;In Quarkus, creating synthetic beans is a straightforward process, thanks to
the &lt;code&gt;SyntheticBeanBuildItem&lt;/code&gt; class.
Let&amp;rsquo;s walk through the steps to create and use a synthetic bean:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Create the Synthetic Bean Class:&lt;/strong&gt; Start by defining the synthetic bean class. This class will
be the foundation for your synthetic bean.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; com.iqnev;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MySyntheticBean&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// Define the behavior and attributes of your synthetic bean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;printMessage&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#50fa7b&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello from synthetic bean!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;Create a Quarkus Extension:&lt;/strong&gt; You&amp;rsquo;ll need to create a Quarkus extension to register your
synthetic
bean.
This extension class will use &lt;code&gt;SyntheticBeanBuildItem&lt;/code&gt; to configure your bean.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;bytecode-generation-approach&#34;&gt;Bytecode Generation Approach&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; com.iqnev;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; io.quarkus.arc.deployment.SyntheticBeanBuildItem;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MySyntheticBeanExtension&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @BuildStep
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  SyntheticBeanBuildItem &lt;span style=&#34;color:#50fa7b&#34;&gt;syntheticBean&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; SyntheticBeanBuildItem
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#50fa7b&#34;&gt;configure&lt;/span&gt;(MySyntheticBean.&lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#50fa7b&#34;&gt;scope&lt;/span&gt;(ApplicationScoped.&lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#50fa7b&#34;&gt;creator&lt;/span&gt;(mc &lt;span style=&#34;color:#ff79c6&#34;&gt;-&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          mc.&lt;span style=&#34;color:#50fa7b&#34;&gt;returnValue&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; MySyntheticBean());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#50fa7b&#34;&gt;done&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;.creator()&lt;/code&gt; method on &lt;code&gt;SyntheticBeanBuildItem&lt;/code&gt; is used to generate the bytecode that will
create instances of the synthetic bean at runtime.&lt;/p&gt;
&lt;p&gt;The argument passed to &lt;code&gt;.creator()&lt;/code&gt; is a &lt;code&gt;Consumer&amp;lt;MethodCreator&amp;gt;&lt;/code&gt; which allows generating Java
bytecode inside a method.&lt;/p&gt;
&lt;p&gt;In this example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mc&lt;/code&gt; is the &lt;code&gt;MethodCreator&lt;/code&gt; instance&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mc.returnValue(new MySyntheticBean())&lt;/code&gt; generates the bytecode to create a new instance
of &lt;code&gt;MySyntheticBean&lt;/code&gt; and return it from the method.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So essentially, we are telling Quarkus to generate a method that looks something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MySyntheticBean &lt;span style=&#34;color:#50fa7b&#34;&gt;createSyntheticBean&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; MySyntheticBean();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This generated method will then be called to instantiate the &lt;code&gt;MySyntheticBean&lt;/code&gt; when it needs to be
injected or used.&lt;/p&gt;
&lt;p&gt;The reason bytecode generation is used is that synthetic beans do not correspond to real Java
classes/methods, so we have to explicitly generate a method to instantiate them&lt;/p&gt;
&lt;p&gt;The output of &lt;code&gt;SyntheticBeanBuildItem&lt;/code&gt; is bytecode recorded at build time. This limits how instances
are created at runtime. Common options are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Generate bytecode directly via &lt;code&gt;.creator()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use a &lt;code&gt;BeanCreator&lt;/code&gt; subclass&lt;/li&gt;
&lt;li&gt;Produce instance via &lt;code&gt;@Recorder&lt;/code&gt; method&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;recorder-approach&#34;&gt;Recorder Approach&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;@Record&lt;/code&gt; and &lt;code&gt;.runtimeValue()&lt;/code&gt; approaches are alternate ways of providing instances for
synthetic beans in Quarkus.&lt;/p&gt;
&lt;p&gt;This allows you to instantiate the synthetic bean via a recorder class method annotated
with &lt;code&gt;@Record(STATIC_INIT)&lt;/code&gt;.
For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Recorder
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyRecorder&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @Record(STATIC_INIT)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; MySyntheticBean &lt;span style=&#34;color:#50fa7b&#34;&gt;createBean&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; MySyntheticBean();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @BuildStep
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  SyntheticBeanBuildItem &lt;span style=&#34;color:#50fa7b&#34;&gt;syntheticBean&lt;/span&gt;(MyRecorder recorder) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; SyntheticBeanBuildItem
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#50fa7b&#34;&gt;configure&lt;/span&gt;(MySyntheticBean.&lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#50fa7b&#34;&gt;runtimeValue&lt;/span&gt;(recorder.&lt;span style=&#34;color:#50fa7b&#34;&gt;createBean&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here the &lt;code&gt;.runtimeValue()&lt;/code&gt; references the recorder method to instantiate the bean.&lt;/p&gt;
&lt;p&gt;This allows passing a &lt;code&gt;RuntimeValue&lt;/code&gt; directly to provide the synthetic bean instance.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@BuildStep 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SyntheticBeanBuildItem &lt;span style=&#34;color:#50fa7b&#34;&gt;syntheticBean&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RuntimeValue&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;MySyntheticBean&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; bean&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;//...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; SyntheticBeanBuildItem
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#50fa7b&#34;&gt;configure&lt;/span&gt;(MySyntheticBean.&lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#50fa7b&#34;&gt;runtimeValue&lt;/span&gt;(bean);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;RuntimeValue&lt;/code&gt; could come from a recorder, supplier, proxy etc.&lt;/p&gt;
&lt;p&gt;So in summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Record&lt;/code&gt; is one approach to generate the &lt;code&gt;RuntimeValue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.runtimeValue()&lt;/code&gt; sets the &lt;code&gt;RuntimeValue&lt;/code&gt; on the &lt;code&gt;SyntheticBeanBuildItem&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They both achieve the same goal of providing a runtime instance, just in slightly different ways.&lt;/p&gt;
&lt;p&gt;When it comes to providing runtime instances for synthetic beans in Quarkus, I would consider using
recorders (via &lt;code&gt;@Record&lt;/code&gt;) to be a more advanced approach compared to directly generating bytecode
with
&lt;code&gt;.creator()&lt;/code&gt; or supplying simple RuntimeValues.&lt;/p&gt;
&lt;p&gt;Here are some reasons why using recorders can be more advanced:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;More encapsulation -&lt;/strong&gt; The logic to instantiate beans is contained in a separate recorder class
rather than directly in build steps. This keeps build steps lean.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reuse -&lt;/strong&gt; Recorder methods can be reused across multiple synthetic beans rather than rewriting
creator logic.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Runtime data -&lt;/strong&gt; Recorder methods execute at runtime so they can leverage runtime resources,
configs, services etc. to construct beans.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dependency injection -&lt;/strong&gt; Recorder methods can inject other services.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Life cycle control -&lt;/strong&gt; Recorder methods annotated with &lt;code&gt;@Record(STATIC_INIT)&lt;/code&gt;
or &lt;code&gt;@Record(RUNTIME_INIT)&lt;/code&gt; give more control over bean instantiation life cycle.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Managed beans -&lt;/strong&gt; Beans instantiated inside recorders can themselves be CDI managed beans.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So in summary, recorder methods provide more encapsulation, flexibility and access to runtime data
and services for instantiating synthetic beans. They allow for more advanced bean production logic
compared to direct bytecode generation.&lt;/p&gt;
&lt;p&gt;However, direct bytecode generation with &lt;code&gt;.creator()&lt;/code&gt; can still be useful for simple cases where
recorders may be overkill. But as synthetic bean needs grow, recorders are a more powerful and
advanced approach.&lt;/p&gt;
&lt;style type=&#34;text/css&#34;&gt;.notice{--root-color:#444;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#c33;--warning-content:#fee;--info-title:#fb7;--info-content:#fec;--note-title:#6be;--note-content:#e7f2fa;--tip-title:#5a5;--tip-content:#efe}@media (prefers-color-scheme:dark){.notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}}body.dark .notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}.notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:var(--root-color);background:var(--root-background)}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:var(--title-color);background:var(--title-background)}.notice.warning .notice-title{background:var(--warning-title)}.notice.warning{background:var(--warning-content)}.notice.info .notice-title{background:var(--info-title)}.notice.info{background:var(--info-content)}.notice.note .notice-title{background:var(--note-title)}.notice.note{background:var(--note-content)}.notice.tip .notice-title{background:var(--tip-title)}.notice.tip{background:var(--tip-content)}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:.125em;position:relative}&lt;/style&gt;
&lt;div&gt;&lt;svg width=&#34;0&#34; height=&#34;0&#34; display=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;symbol id=&#34;tip-notice&#34; viewBox=&#34;0 0 512 512&#34; preserveAspectRatio=&#34;xMidYMid meet&#34;&gt;&lt;path d=&#34;M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z&#34;/&gt;&lt;/symbol&gt;&lt;symbol id=&#34;note-notice&#34; viewBox=&#34;0 0 512 512&#34; preserveAspectRatio=&#34;xMidYMid meet&#34;&gt;&lt;path d=&#34;M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z&#34;/&gt;&lt;/symbol&gt;&lt;symbol id=&#34;warning-notice&#34; viewBox=&#34;0 0 576 512&#34; preserveAspectRatio=&#34;xMidYMid meet&#34;&gt;&lt;path d=&#34;M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z&#34;/&gt;&lt;/symbol&gt;&lt;symbol id=&#34;info-notice&#34; viewBox=&#34;0 0 512 512&#34; preserveAspectRatio=&#34;xMidYMid meet&#34;&gt;&lt;path d=&#34;M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z&#34;/&gt;&lt;/symbol&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&#34;notice note&#34; &gt;
&lt;p class=&#34;first notice-title&#34;&gt;&lt;span class=&#34;icon-notice baseline&#34;&gt;&lt;svg&gt;&lt;use href=&#34;#note-notice&#34;&gt;&lt;/use&gt;&lt;/svg&gt;&lt;/span&gt;Note&lt;/p&gt;&lt;p&gt;It is possible to configure a synthetic bean in Quarkus to be initialized during
the &lt;code&gt;RUNTIME_INIT&lt;/code&gt;
phase instead of the default &lt;code&gt;STATIC_INIT&lt;/code&gt; phase.&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@BuildStep
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Record(RUNTIME_INIT)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SyntheticBeanBuildItem &lt;span style=&#34;color:#50fa7b&#34;&gt;lazyBean&lt;/span&gt;(BeanRecorder recorder){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; SyntheticBeanBuildItem
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#50fa7b&#34;&gt;configure&lt;/span&gt;(MyLazyBean.&lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#50fa7b&#34;&gt;setRuntimeInit&lt;/span&gt;() &lt;span style=&#34;color:#6272a4&#34;&gt;// initialize during RUNTIME_INIT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#50fa7b&#34;&gt;runtimeValue&lt;/span&gt;(recorder.&lt;span style=&#34;color:#50fa7b&#34;&gt;createLazyBean&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The key points are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;setRuntimeInit()&lt;/code&gt; on the &lt;code&gt;SyntheticBeanBuildItem&lt;/code&gt; to mark it for &lt;code&gt;RUNTIME_INIT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The recorder method must be annotated with &lt;code&gt;@Record(RUNTIME_INIT)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The runtime init synthetic beans cannot be accessed during &lt;code&gt;STATIC_INIT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So in summary, synthetic beans can be initialized lazily during &lt;code&gt;RUNTIME_INIT&lt;/code&gt; for cases where
eager &lt;code&gt;STATIC_INIT&lt;/code&gt; instantiation is not needed. This allows optimizing startup time.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;Use the Synthetic Bean:&lt;/strong&gt; Now that your synthetic bean is registered, you can inject and use it
in your application.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; com.iqnev;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; javax.inject.Inject;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyBeanUser&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @Inject
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MySyntheticBean mySyntheticBean;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;useSyntheticBean&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// Use the synthetic bean in your code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mySyntheticBean.&lt;span style=&#34;color:#50fa7b&#34;&gt;printMessage&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Running Your Application: Build and run your Quarkus application as usual, and the synthetic bean
will be available for injection and use.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Synthetic beans in Quarkus provide a powerful mechanism for integrating external libraries,
dynamically registering beans, and customizing bean behavior in your CDI-based applications. These
beans, whose attributes are defined by extensions rather than Java classes, offer flexibility and
versatility in managing dependencies.&lt;/p&gt;
&lt;p&gt;As we&amp;rsquo;ve explored in this article, creating and using synthetic beans in Quarkus is a
straightforward process. By leveraging &lt;code&gt;SyntheticBeanBuildItem&lt;/code&gt; and Quarkus extensions, you can
seamlessly bridge the gap between traditional CDI and more specialized or dynamic bean registration
requirements.&lt;/p&gt;
&lt;p&gt;In the ever-evolving landscape of Java frameworks, Quarkus continues to stand out by offering
innovative solutions like synthetic beans, making it a compelling choice for modern, efficient, and
flexible application development. Embrace the power of synthetic beans in Quarkus, and take your
dependency injection to the next level!&lt;/p&gt;
</description>
      <author>Calvin Tran</author>
      <guid>https://iqnev.github.io/posts/exploring-synthetic-beans-in-quarkus-a-powerful-extension-mechanism/</guid>
      <pubDate>Sat, 11 Nov 2023 11:04:18 +0300</pubDate>
    </item>
    
    <item>
      <title>Creating Custom Configuration in Quarkus Loaded from JSON File</title>
      <link>https://iqnev.github.io/posts/load-configuration-from-json-file/</link>
      <description>&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Quarkus, a framework for building lightweight, fast, and efficient Java applications, offers
developers the flexibility to create custom configurations loaded from JSON files. These custom
configurations can be seamlessly integrated into your Quarkus application, enhancing its
configurability and adaptability. To achieve this, Quarkus utilizes Eclipse MicroProfile Config (
MP-Config), with the SmallRye implementation providing the necessary tools. In this article, we&amp;rsquo;ll
delve into the process of crafting custom configurations and loading them from JSON files within
Quarkus, all while exploring the mechanics of SmallRye&amp;rsquo;s MP-Config implementation. Additionally,
we&amp;rsquo;ll showcase the creation and registration of a custom ConfigSource and ConfigSourceFactory, which
play a pivotal role in this configuration management approach.&lt;/p&gt;
&lt;h3 id=&#34;understanding-microprofile-config-in-quarkus&#34;&gt;Understanding MicroProfile Config in Quarkus&lt;/h3&gt;
&lt;p&gt;Quarkus internally relies on the SmallRye implementation of MP-Config. This implementation allows
developers to incorporate Configuration Sources, which provide configuration data from various
origins. These sources can be files with non-standard formats, or even data retrieved from a central
repository. MP-Config ensures a deterministic ordering of configuration sources based on their
ordinal values when multiple sources contain the same configuration key.&lt;/p&gt;
&lt;p&gt;SmallRye&amp;rsquo;s implementation of MP-Config facilitates the creation of new ConfigSources and
ConfigSourceFactories. The ConfigSourceFactory has knowledge of all previously defined sources,
enabling developers to read those values and pass them to a newly created ConfigSource. The
registration of these custom sources and factories is accomplished through the Java ServiceLoader
interface, with a specific file called &lt;code&gt;io.smallrye.config.ConfigSourceFactory&lt;/code&gt; being placed in the
&lt;code&gt;META-INF/services/&lt;/code&gt; directory. This file provides the fully qualified names of the custom sources
and
factories.&lt;/p&gt;
&lt;h3 id=&#34;implementing-a-custom-json-configuration&#34;&gt;Implementing a custom JSON Configuration&lt;/h3&gt;
&lt;p&gt;To demonstrate the creation and registration of a custom &lt;code&gt;ConfigSource&lt;/code&gt; and &lt;code&gt;ConfigSourceFactory&lt;/code&gt; in
Quarkus, we&amp;rsquo;ll focus on a practical example - an &lt;code&gt;JsonConfigSource&lt;/code&gt; and &lt;code&gt;JsonConfigSourceFactory&lt;/code&gt;
pair.
This custom configuration source allows you to read external JSON configuration files and integrate
them into your Quarkus application.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;JsonConfigSource&lt;/code&gt; class is responsible for reading and providing configuration properties from
a JSON file. It implements the &lt;code&gt;ConfigSource&lt;/code&gt; interface and overrides several methods to interact
with
the Quarkus configuration system.&lt;/p&gt;
&lt;p&gt;Here is an overview of its key functionalities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reading a JSON file and parsing it into a JsonObject.&lt;/li&gt;
&lt;li&gt;Providing configuration properties, including handling default values.&lt;/li&gt;
&lt;li&gt;Specifying the source&amp;rsquo;s ordinal value.&lt;/li&gt;
&lt;li&gt;Assigning a unique name to the source, which will be used for registration.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Slf4j
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;JsonConfigSource&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;implements&lt;/span&gt; ConfigSource {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; Map&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;String, ConfigValue&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; existingValues;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; JsonObject root;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;JsonConfigSource&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; Map&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;String, ConfigValue&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; exProp) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    existingValues &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; exProp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;addJsonConfigurations&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; ConfigValue config) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; File file &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; File(config.&lt;span style=&#34;color:#50fa7b&#34;&gt;getValue&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;file.&lt;span style=&#34;color:#50fa7b&#34;&gt;canRead&lt;/span&gt;()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      log.&lt;span style=&#34;color:#50fa7b&#34;&gt;warn&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Can&amp;#39;t read config from &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; file.&lt;span style=&#34;color:#50fa7b&#34;&gt;getAbsolutePath&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;try&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; InputStream fis &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; FileInputStream(file);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; JsonReader reader &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Json.&lt;span style=&#34;color:#50fa7b&#34;&gt;createReader&lt;/span&gt;(fis)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        root &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; reader.&lt;span style=&#34;color:#50fa7b&#34;&gt;readObject&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; IOException ioe) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        log.&lt;span style=&#34;color:#50fa7b&#34;&gt;warn&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Reading the config failed: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; ioe.&lt;span style=&#34;color:#50fa7b&#34;&gt;getMessage&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @Override
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; Map&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;String, String&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;getProperties&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; Map&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;String, String&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; props &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; Set&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;Map.&lt;span style=&#34;color:#50fa7b&#34;&gt;Entry&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;String, ConfigValue&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; entries &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; existingValues.&lt;span style=&#34;color:#50fa7b&#34;&gt;entrySet&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; Map.&lt;span style=&#34;color:#50fa7b&#34;&gt;Entry&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;String, ConfigValue&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; entry : entries) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      String newVal &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; getValue(entry.&lt;span style=&#34;color:#50fa7b&#34;&gt;getKey&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (newVal &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        newVal &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; entry.&lt;span style=&#34;color:#50fa7b&#34;&gt;getValue&lt;/span&gt;().&lt;span style=&#34;color:#50fa7b&#34;&gt;getValue&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      props.&lt;span style=&#34;color:#50fa7b&#34;&gt;put&lt;/span&gt;(entry.&lt;span style=&#34;color:#50fa7b&#34;&gt;getKey&lt;/span&gt;(), newVal);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; props;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @Override
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; Set&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;getPropertyNames&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; existingValues.&lt;span style=&#34;color:#50fa7b&#34;&gt;keySet&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @Override
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;getOrdinal&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; 270;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @Override
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#50fa7b&#34;&gt;getValue&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; String configKey) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; JsonValue jsonValue &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; root.&lt;span style=&#34;color:#50fa7b&#34;&gt;get&lt;/span&gt;(configKey);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (jsonValue &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; getStringValue(jsonValue);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (existingValues.&lt;span style=&#34;color:#50fa7b&#34;&gt;containsKey&lt;/span&gt;(configKey)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; existingValues.&lt;span style=&#34;color:#50fa7b&#34;&gt;get&lt;/span&gt;(configKey).&lt;span style=&#34;color:#50fa7b&#34;&gt;getValue&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @Override
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#50fa7b&#34;&gt;getName&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;EXTERNAL_JSON&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; String &lt;span style=&#34;color:#50fa7b&#34;&gt;getStringValue&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; JsonValue jsonValue) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (jsonValue &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; JsonValue.&lt;span style=&#34;color:#50fa7b&#34;&gt;ValueType&lt;/span&gt; valueType &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; jsonValue.&lt;span style=&#34;color:#50fa7b&#34;&gt;getValueType&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (valueType &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; JsonValue.&lt;span style=&#34;color:#50fa7b&#34;&gt;ValueType&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;STRING&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; ((JsonString) jsonValue).&lt;span style=&#34;color:#50fa7b&#34;&gt;getString&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (valueType &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; JsonValue.&lt;span style=&#34;color:#50fa7b&#34;&gt;ValueType&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;NUMBER&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// Handle integer and floating-point numbers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; jsonValue.&lt;span style=&#34;color:#50fa7b&#34;&gt;toString&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (valueType &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; JsonValue.&lt;span style=&#34;color:#50fa7b&#34;&gt;ValueType&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;TRUE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; valueType &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; JsonValue.&lt;span style=&#34;color:#50fa7b&#34;&gt;ValueType&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;FALSE&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// Handle boolean values&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; Boolean.&lt;span style=&#34;color:#50fa7b&#34;&gt;toString&lt;/span&gt;(jsonValue.&lt;span style=&#34;color:#50fa7b&#34;&gt;getValueType&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; JsonValue.&lt;span style=&#34;color:#50fa7b&#34;&gt;ValueType&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;TRUE&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (valueType &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; JsonValue.&lt;span style=&#34;color:#50fa7b&#34;&gt;ValueType&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;NULL&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// Handle null values&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;JsonConfigSourceFactory&lt;/code&gt; class is a custom &lt;code&gt;ConfigSourceFactory&lt;/code&gt; responsible for creating and
configuring instances of the &lt;code&gt;JsonConfigSource&lt;/code&gt;. It also defines a unique priority for this factory.&lt;/p&gt;
&lt;p&gt;Here is an overview of its key functionalities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Retrieving the path of the JSON configuration file from the Quarkus configuration.&lt;/li&gt;
&lt;li&gt;Building an instance of JsonConfigSource.&lt;/li&gt;
&lt;li&gt;Assigning a priority value to the factory.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Slf4j
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;JsonConfigSourceFactory&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;implements&lt;/span&gt; ConfigSourceFactory {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; String CONFIG_JSON_FILE &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;config.json.file&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @Override
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; Iterable&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;ConfigSource&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;getConfigSources&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; ConfigSourceContext configSourceContext) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; ConfigValue value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; configSourceContext.&lt;span style=&#34;color:#50fa7b&#34;&gt;getValue&lt;/span&gt;(CONFIG_JSON_FILE);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (value &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; value.&lt;span style=&#34;color:#50fa7b&#34;&gt;getValue&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; Collections.&lt;span style=&#34;color:#50fa7b&#34;&gt;emptyList&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; Map&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;String, ConfigValue&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; exProp &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; Iterator&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; stringIterator &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; configSourceContext.&lt;span style=&#34;color:#50fa7b&#34;&gt;iterateNames&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; (stringIterator.&lt;span style=&#34;color:#50fa7b&#34;&gt;hasNext&lt;/span&gt;()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; String key &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; stringIterator.&lt;span style=&#34;color:#50fa7b&#34;&gt;next&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; ConfigValue cValue &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; configSourceContext.&lt;span style=&#34;color:#50fa7b&#34;&gt;getValue&lt;/span&gt;(key);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      exProp.&lt;span style=&#34;color:#50fa7b&#34;&gt;put&lt;/span&gt;(key, cValue);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; JsonConfigSource configSource &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; JsonConfigSource(exProp);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; List&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;ConfigValue&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; configValueList &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; List.&lt;span style=&#34;color:#50fa7b&#34;&gt;of&lt;/span&gt;(value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; ConfigValue config : configValueList) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (ConfigExists(config)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        configSource.&lt;span style=&#34;color:#50fa7b&#34;&gt;addJsonConfigurations&lt;/span&gt;(config);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; Collections.&lt;span style=&#34;color:#50fa7b&#34;&gt;singletonList&lt;/span&gt;(configSource);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @Override
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; OptionalInt &lt;span style=&#34;color:#50fa7b&#34;&gt;getPriority&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; OptionalInt.&lt;span style=&#34;color:#50fa7b&#34;&gt;of&lt;/span&gt;(270);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ConfigExists&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; ConfigValue config) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (config &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; config.&lt;span style=&#34;color:#50fa7b&#34;&gt;getValue&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      log.&lt;span style=&#34;color:#50fa7b&#34;&gt;warn&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;The given ConfigValue object is null&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;(Files.&lt;span style=&#34;color:#50fa7b&#34;&gt;exists&lt;/span&gt;(Path.&lt;span style=&#34;color:#50fa7b&#34;&gt;of&lt;/span&gt;(config.&lt;span style=&#34;color:#50fa7b&#34;&gt;getValue&lt;/span&gt;())))) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;registration-via-serviceloader&#34;&gt;Registration via ServiceLoader&lt;/h3&gt;
&lt;p&gt;Both the &lt;code&gt;JsonConfigSource&lt;/code&gt; and &lt;code&gt;JsonConfigSourceFactory&lt;/code&gt; are registered with the Quarkus
application through the Java ServiceLoader mechanism. A file
named &lt;code&gt;io.smallrye.config.ConfigSourceFactory&lt;/code&gt; is placed in the &lt;code&gt;META-INF/services/&lt;/code&gt; directory. This
file contains the fully qualified name of the &lt;code&gt;JsonConfigSourceFactory&lt;/code&gt;, enabling Quarkus to
discover
and use it.&lt;/p&gt;
&lt;h3 id=&#34;the-json-file&#34;&gt;The JSON file&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;simple.service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pusher&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;simple.source&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;source&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;simple.destination&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;destination&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;define-your-configuration-interface&#34;&gt;Define Your Configuration Interface&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@ConfigMapping(prefix &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;simple&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;SimpleConfig&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @WithName(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;source&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  String &lt;span style=&#34;color:#50fa7b&#34;&gt;source&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @WithName(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;service&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  String &lt;span style=&#34;color:#50fa7b&#34;&gt;service&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @WithName(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;destination&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  String &lt;span style=&#34;color:#50fa7b&#34;&gt;destination&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Eclipse MicroProfile Config, in conjunction with the SmallRye implementation, empowers Quarkus
developers to manage their application&amp;rsquo;s configuration efficiently. The ability to create and
register custom &lt;code&gt;ConfigSources&lt;/code&gt; and &lt;code&gt;ConfigSourceFactories&lt;/code&gt;, as demonstrated with
the &lt;code&gt;JsonConfigSource&lt;/code&gt;
and &lt;code&gt;JsonConfigSourceFactory&lt;/code&gt;, extends the flexibility and utility of the framework. By following
these guidelines, you can seamlessly integrate external configuration data, such as JSON files, into
your Quarkus application, enhancing its configurability and adaptability.&lt;/p&gt;
&lt;p&gt;By understanding these concepts and leveraging the power of MicroProfile Config, you can further
optimize your Quarkus application&amp;rsquo;s configuration management and streamline the development process.&lt;/p&gt;
&lt;p&gt;The full source code is available
at &lt;a href=&#34;https://github.com/iqnev/quarkus-load-configuration-from-externa-json-file&#34; title=&#34;Title&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
      <author>Calvin Tran</author>
      <guid>https://iqnev.github.io/posts/load-configuration-from-json-file/</guid>
      <pubDate>Sat, 14 Oct 2023 21:00:18 +0300</pubDate>
    </item>
    
    <item>
      <title>Extending Quarkus: When and How to Write Your Own Extensions</title>
      <link>https://iqnev.github.io/posts/when-and-how-to-write-your-own-extensions/</link>
      <description>&lt;p&gt;Quarkus, with its innovative extension framework, offers developers a powerful way to integrate
various technologies seamlessly into their applications.
These extensions simplify configuration, enable dependency injection, and optimize performance,
making it an attractive option for Java developers.
However, before diving into creating your own Quarkus extension, it&amp;rsquo;s crucial to understand when it&#39;
s necessary and how to do it effectively.&lt;/p&gt;
&lt;h2 id=&#34;when-to-create-a-quarkus-extension&#34;&gt;When to Create a Quarkus Extension&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Complex Integrations: If you&amp;rsquo;re working with complex frameworks like ORM mappers, reactive
clients, or data access libraries, creating an extension can help manage the intricacies of
configuration and dependency management.
Extensions simplify the use of these frameworks in Quarkus applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Performance Optimization: Quarkus extensions are designed to align with Quarkus&amp;rsquo; native
compilation, resulting in applications that start swiftly and have minimal memory footprints.
By creating an extension, you can leverage Quarkus&amp;rsquo; build-time optimization abilities to scan
dependencies and generate configuration early, thus avoiding startup delays.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Developer Experience Enhancement: Extensions can significantly enhance the developer experience.
They enable live reloading, CLI extensions, templating, and more, streamlining the development
process.
If you want to provide a seamless and efficient development environment for your team, extensions
can help achieve this goal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;API Hardening: If you&amp;rsquo;re building APIs or libraries intended to be used by other Quarkus
developers, extensions provide an excellent way to harden your
APIs and ensure they work seamlessly within the Quarkus ecosystem.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;However, extensions may not always be the best approach. For simpler needs, such as sharing utility
code and glue logic between components, a basic JAR file might
suffice without the overhead of creating an extension. If your integration is app-specific and
unlikely to be reused elsewhere, a basic JAR could be a more straightforward solution. Moreover, if
you need full control over dependency versions and don&amp;rsquo;t want to adhere to Quarkus&amp;rsquo; BOM (Bill of
Materials) for dependency management, a JAR may be a better choice. Finally, if your code needs to
work across multiple JVM frameworks, such as Spring and Micronaut,
avoiding tight coupling to Quarkus may be preferable.&lt;/p&gt;
&lt;p&gt;Creating Quarkus extensions can be complex, often requiring in-depth knowledge of Quarkus internal
workings. However, for many scenarios, creating a standard JAR can be sufficient. This JAR, when
indexed by Jandex, can be seamlessly discovered by Quarkus during build time. While Quarkus
extensions provide a range of advantages, including superior performance and developer productivity,
they may not always be necessary.&lt;/p&gt;
&lt;p&gt;Quarkus unique approach to moving work to build time, rather than runtime, is at the core of its
fast startup times and low memory footprint. This philosophy extends to Quarkus extensions, which
can leverage these build-time optimizations. Even if you&amp;rsquo;re not primarily concerned with fast boot
times, the benefits of creating your extensions extend to simplifying configurations, extending the
Quarkus CLI, and integrating with Quarkus&amp;rsquo;s Dev Mode.&lt;/p&gt;
&lt;p&gt;Creating your Quarkus extensions doesn&amp;rsquo;t have to be overly complicated. With the right approach and
a clear understanding of your project&amp;rsquo;s needs, you can solve complex problems efficiently.
Extensions offer a flexible and powerful way to enhance your Quarkus applications and make them more
efficient and developer-friendly.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-quarkus-extension&#34;&gt;Creating a Quarkus Extension&lt;/h2&gt;
&lt;p&gt;When you decide that creating a Quarkus extension is the right approach, it&amp;rsquo;s essential to
understand the structural components of an extension:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Runtime Section:&lt;/strong&gt; This section contains the core business logic implemented as beans, services,
or other components that integrate with Quarkus;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deployment Section:&lt;/strong&gt; The deployment section handles build-time augmentation and configuration.
It ensures that your extension integrates seamlessly with Quarkus&amp;rsquo; optimization processes;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Descriptor:&lt;/strong&gt; A descriptor declares metadata about your extension, including its name,
parameters, compatibility information, and more;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation:&lt;/strong&gt; Comprehensive documentation should accompany your extension. It guides users on
how to use and configure your extension effectively.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;anatomy-of-the-quarkus-extension&#34;&gt;Anatomy of the Quarkus Extension&lt;/h2&gt;
&lt;p&gt;Consider a scenario where you want to create a custom caching extension for Quarkus. This extension
will allow developers to easily integrate caching functionality into their Quarkus applications.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Runtime Section:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In this section, you would implement the core caching functionality using Java code. This
might include methods for caching data, retrieving cached data, and managing cache expiration.&lt;/li&gt;
&lt;li&gt;For example, you might have a &lt;code&gt;CustomCacheService&lt;/code&gt; class with methods
like &lt;code&gt;put(key, value)&lt;/code&gt;, &lt;code&gt;get(key)&lt;/code&gt;, and &lt;code&gt;evict(key)&lt;/code&gt; to handle caching operations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Deployment Section:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The deployment section is responsible for build-time optimization. Here, you can specify how
the caching configuration should be generated during the build process.&lt;/li&gt;
&lt;li&gt;For our caching extension, this section might include instructions on how to scan for cached
objects in the application code and generate cache configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Descriptor:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The descriptor file (&lt;code&gt;custom-cache-extension.yaml&lt;/code&gt;) provides metadata about your extension. It
includes information like the extension&amp;rsquo;s name, version, compatibility with Quarkus, and
configuration parameters.&lt;/li&gt;
&lt;li&gt;For instance, your descriptor might specify that the extension is named &amp;quot;
custom-cache-extension,&amp;quot; is compatible with Quarkus 2.0+, and requires a cache timeout
configuration parameter.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Documentation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comprehensive documentation should accompany your extension. It guides users on how to use the
custom caching extension effectively within their Quarkus applications.&lt;/li&gt;
&lt;li&gt;Documentation should include examples of how to configure the cache, integrate it into Quarkus
services, and manage cached data. Additionally, it should provide best practices for cache
utilization.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By following this structure, your custom caching extension becomes a valuable tool for Quarkus
developers. They can easily incorporate caching into their applications, improving performance and
optimizing resource usage.&lt;/p&gt;
&lt;p&gt;Runtime module:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;CustomCacheService&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// Core caching functionality using Java code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;put&lt;/span&gt;(String key, Object value) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// Cache data implementation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; Object &lt;span style=&#34;color:#50fa7b&#34;&gt;get&lt;/span&gt;(String key) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// Retrieve cached data implementation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;evict&lt;/span&gt;(String key) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// Evict cached data implementation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Deployment module:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;CustomCacheProcessor&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @BuildStep
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    FeatureBuildItem &lt;span style=&#34;color:#50fa7b&#34;&gt;feature&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// This declares the custom cache extension as a feature&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; FeatureBuildItem(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;custom-cache&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Descriptor file: &lt;code&gt;custom-cache-extension.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;extension&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;name&lt;/span&gt;: custom-cache-extension
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;short-name&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;resteasy-reactive&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;keywords&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;jaxrs&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;web&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;rest&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;categories&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;web&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;reactive&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;status&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;stable&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;guide&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://quarkus.io/guides/resteasy-reactive&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In conclusion, whether to create a Quarkus extension depends on your project&amp;rsquo;s specific needs and
objectives.
Quarkus extensions are powerful tools for deep integration, performance optimization, and enhancing
the developer experience.
However, it&amp;rsquo;s essential to weigh the trade-offs and consider whether a simpler solution, like a
standard JAR library, might better suit your use case.
By understanding when and how to create Quarkus extensions effectively, you can make informed
decisions and leverage the full potential of this innovative framework.&lt;/p&gt;
</description>
      <author>Calvin Tran</author>
      <guid>https://iqnev.github.io/posts/when-and-how-to-write-your-own-extensions/</guid>
      <pubDate>Sun, 08 Oct 2023 21:29:18 +0300</pubDate>
    </item>
    
    <item>
      <title>Demystifying Quarkus Extension Development: Jandex vs. AdditionalBeanBuildItem</title>
      <link>https://iqnev.github.io/posts/jandex-vs-additional-bean-builditem/</link>
      <description>&lt;p&gt;Welcome to a comprehensive exploration of two key aspects in Quarkus extension development: Jandex
and AdditionalBeanBuildItem.
This article aims to elucidate the differences between these approaches, offering insights into
their roles, applications, and the
intricate interplay between them. By the end, you&amp;rsquo;ll have a clear understanding of how to wield
these tools effectively in your Quarkus
extensions.&lt;/p&gt;
&lt;h2 id=&#34;1-jandex-automatic-bean-discovery-and-indexing&#34;&gt;1. Jandex: Automatic Bean Discovery and Indexing&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Understanding Jandex and Its Role:&lt;/strong&gt;
In the realm of Quarkus extensions, beans are the building blocks of functionality, and Contexts and
Dependency Injection (CDI) is
the mechanism that governs their management. Jandex, a potent tool in the Quarkus arsenal,
facilitates automatic bean discovery and indexing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How Jandex Indexing Works:&lt;/strong&gt;
When the Jandex plugin is integrated into your Quarkus extension, it sweeps through all application
classes, creating a comprehensive
index file laden with metadata. This file offers an organized snapshot of class metadata,
annotations, inheritance hierarchies, and
interfaces. It acts as a centralized repository of class information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Role of Jandex in CDI:&lt;/strong&gt;
However, Jandex&amp;rsquo;s role doesn&amp;rsquo;t extend to direct CDI bean discovery. Instead, it supplies information
to the CDI container. During the container&amp;rsquo;s initiation, it delves into the Jandex index to identify
potential beans and the annotations associated with them. This enables the CDI container to curate
the beans available for injection and other CDI functionalities.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example: Automatic Bean Discovery with Jandex:&lt;/strong&gt;
Imagine creating a custom Quarkus extension. By annotating a class with CDI-specific annotations
like &lt;code&gt;@ApplicationScoped&lt;/code&gt;,
Jandex, via its indexing prowess, effortlessly identifies and makes these classes available for CDI.
This harmonious integration
streamlines the extension process and ensures precise bean identification.&lt;/p&gt;
&lt;h2 id=&#34;2-additionalindexedclassesbuilditem-explicit-jandex-indexing&#34;&gt;2. AdditionalIndexedClassesBuildItem: Explicit Jandex Indexing&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Understanding AdditionalIndexedClassesBuildItem:&lt;/strong&gt;
In cases where you seek more control over class indexing, the &lt;code&gt;AdditionalIndexedClassesBuildItem&lt;/code&gt;
emerges as a valuable tool.
It empowers you to explicitly augment the Jandex index with classes that might otherwise remain
unindexed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When to Use AdditionalIndexedClassesBuildItem:&lt;/strong&gt;
This tool is particularly useful when classes outside of typical bean discovery need to be indexed
for other purposes.
These classes might belong to third-party libraries or external tools requiring metadata access.
By leveraging &lt;code&gt;AdditionalIndexedClassesBuildItem&lt;/code&gt;, you guarantee proper indexing and metadata
availability.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage of AdditionalIndexedClassesBuildItem:&lt;/strong&gt;
By providing specific class names to AdditionalIndexedClassesBuildItem&amp;rsquo;s constructor, you precisely
dictate which classes receive metadata
indexing. Regardless of annotations or interfaces, you exercise control over the indexing process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example: Explicitly Indexing Custom Configuration Classes:&lt;/strong&gt;
Imagine crafting an extension that requires metadata access to configuration classes from diverse
sources.
These classes may not boast CDI annotations, but their metadata remains vital.
Through &lt;code&gt;AdditionalIndexedClassesBuildItem&lt;/code&gt;, you secure their inclusion in the Jandex index,
ensuring accessible metadata for your extension.&lt;/p&gt;
&lt;h2 id=&#34;3-additionalbeanbuilditem-explicit-bean-registration&#34;&gt;3. AdditionalBeanBuildItem: Explicit Bean Registration&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Understanding AdditionalBeanBuildItem:&lt;/strong&gt;
While Jandex handles automatic bean discovery, you might require a more involved approach. This is
where AdditionalBeanBuildItem steps in,
empowering you to explicitly register classes as CDI beans.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When to Use AdditionalBeanBuildItem:&lt;/strong&gt;
Custom utility classes, third-party libraries, or unconventional beans might necessitate inclusion
in the CDI context.
By embracing &lt;code&gt;AdditionalBeanBuildItem&lt;/code&gt;, you enforce bean treatment irrespective of annotations or
auto-discovery.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage of AdditionalBeanBuildItem:&lt;/strong&gt;
Through &lt;code&gt;AdditionalBeanBuildItem&lt;/code&gt;, you specify class names to be registered as beans. This
flexibility allows you to
seamlessly incorporate custom beans essential to your extension&amp;rsquo;s functionality.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example: Registering Custom Utility Classes as CDI Beans:&lt;/strong&gt;
Imagine building an extension that furnishes additional error handling utilities. These utilities
might lack CDI annotations
but require injection capabilities. &lt;code&gt;AdditionalBeanBuildItem&lt;/code&gt; facilitates explicit registration of
these utilities as CDI beans,
amplifying their accessibility.&lt;/p&gt;
&lt;h2 id=&#34;4-combining-approaches-using-both-jandex-and-additionalbeanbuilditem&#34;&gt;4. Combining Approaches: Using Both Jandex and AdditionalBeanBuildItem&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Advantages of Combining Approaches:&lt;/strong&gt;
Harnessing the strengths of both Jandex and &lt;code&gt;AdditionalBeanBuildItem&lt;/code&gt; offers strategic leverage.
This hybrid approach strikes a
balance between automated discovery and explicit control, granting you the power to cherry-pick
beans while enjoying default discovery
benefits.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Potential Issues and Solutions:&lt;/strong&gt;
The synergy between these approaches is powerful, but vigilance is essential to avert duplicate bean
registrations.
Overlapping registrations between automatic Jandex indexing and explicit &lt;code&gt;AdditionalBeanBuildItem&lt;/code&gt;
inclusion can lead to conflicts.
Careful coordination ensures seamless coexistence.&lt;/p&gt;
&lt;h2 id=&#34;5-native-build-considerations-impact-of-jandex-and-additionalbeanbuilditem&#34;&gt;5. Native Build Considerations: Impact of Jandex and AdditionalBeanBuildItem&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Jandex and Native Build:&lt;/strong&gt;
Understand that GraalVM&amp;rsquo;s native build process doesn&amp;rsquo;t engage directly with the Jandex index. Native
build concentrates on compiling
the Java application into a native binary, leveraging compiled Java classes and dependencies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AdditionalBeanBuildItem and Native Build:&lt;/strong&gt;
Similarly, native build isn&amp;rsquo;t heavily impacted by AdditionalBeanBuildItem&amp;rsquo;s presence or absence.
Bean registration doesn&amp;rsquo;t significantly
alter native build outcomes, which center on compiling and optimizing the application into a native
binary.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion: Navigating Jandex and AdditionalBeanBuildItem&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Through this journey, the nuances of Jandex and &lt;code&gt;AdditionalBeanBuildItem&lt;/code&gt; have been unraveled.
Jandex&amp;rsquo;s role in metadata provision
and CDI&amp;rsquo;s execution has been clarified, alongside AdditionalBeanBuildItem&amp;rsquo;s explicit bean
registration. Remember, Jandex doesn&amp;rsquo;t
automatically transform classes into CDI beans; the CDI container is pivotal. Leverage these tools
strategically, aligning
choices with your extension&amp;rsquo;s demands for seamless integration in Quarkus&amp;rsquo; CDI framework.&lt;/p&gt;
</description>
      <author>Calvin Tran</author>
      <guid>https://iqnev.github.io/posts/jandex-vs-additional-bean-builditem/</guid>
      <pubDate>Tue, 26 Sep 2023 23:04:18 +0300</pubDate>
    </item>
    
  </channel>
</rss>
