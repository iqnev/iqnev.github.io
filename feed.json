{
  "version": "https://jsonfeed.org/version/1",
  "title": "Codes are a puzzle",
  "home_page_url": "https://iqnev.github.io/",
  "feed_url": "https://iqnev.github.io/feed.json",
  "description": "A minimal hugo theme focus on content",
  "favicon": "https://iqnev.github.io//assets/favicon.ico",
  "expired": false,
  "author": {
    "name": "Calvin Tran",
    "url": "https://iqnev.github.io/"
  },
  "items": [
    
    

    
    {
      "id": "63a7e0e4fde135d424af77dcba5f183c34e651c2",
      "title": "Unveiling Challenges with @Named",
      "summary": "",
      "content_text": "In the ever-evolving landscape of Contexts and Dependency Injection (CDI), developers frequently encounter hurdles related to bean naming, default implementations, and potential conflicts. This article provides a detailed exploration of the potential pitfalls associated with the @Named annotation in CDI. We will delve into its intricacies, shed light on problematic scenarios, and discuss alternative approaches, including the use of @Identifier from SmallRye. Furthermore, we\u0026rsquo;ll offer insights into best practices for building robust and maintainable Jakarta EE applications.\nUnderstanding @Default The @Default annotation is a valuable tool in CDI for explicitly marking a specific implementation as the default one for a given interface or bean type. It comes into play when dealing with multiple implementations of the same interface, allowing developers to specify which implementation should be injected by default when no other qualifiers are used.\nConsider a scenario where multiple implementations of the GreetingService interface exist:\n1 2@Default 3public class DefaultGreetingService implements GreetingService { 4 5 @Override 6 public String greet(String name) { 7 return \u0026#34;Hello, \u0026#34; + name; 8 } 9} 1public class SpecialGreetingService implements GreetingService { 2 3 @Override 4 public String greet(String name) { 5 return \u0026#34;Greetings, \u0026#34; + name + \u0026#34;!\u0026#34;; 6 } 7} When injecting a bean without specifying any qualifiers, CDI uses the @Default -marked bean as the default. This is beneficial in scenarios with multiple implementations, providing a clear default choice.\n1 2@Inject 3private GreetingService greetingService; // Injects the @Default implementation While the use of @Default is optional, it\u0026rsquo;s highly recommended, particularly when dealing with interfaces that have multiple implementations. It provides a clear and consistent default option, preventing ambiguity and unexpected behavior during bean injection.\nExploring @Named - a double-edged sword The @Named qualifier plays a fundamental role in CDI, assigning a human-readable name or identifier to a bean. Developers often employ it to refer to beans by name when injecting them into other components.\nHowever, @Named comes with its own set of challenges, particularly when used without additional qualifiers. By default, CDI associates the unqualified class name as the bean name. This can lead to conflicts with the @Default qualifier, resulting in unexpected behavior during bean injection.\n1 2@Named 3public class MyBean { 4 // Implementation 5} When injecting MyBean without explicit qualifiers, CDI will only add the @Named qualifier, not the @Default qualifier. The @Default qualifier is only applied if it is explicitly specified on the bean or its qualifiers.\n1 2@Inject 3private MyBean myBean; In this case, ambiguity may arise if there are other beans with the same type name. For instance, if there is another bean named MyBean, the injection will result in ambiguity.\nTo address this issue, developers should explicitly qualify the bean they intend to inject.\n1 2@Inject 3@Named(\u0026#34;myBean\u0026#34;) 4private MyBean myBean; Alternatively, developers can utilize a custom qualifier for each bean to eliminate ambiguity.\nProblematic Cases: Ambiguity and Unintended Defaults Ambiguity arises when @Named is used without additional qualifiers, and multiple implementations of the same type exist. Consider the following scenario:\n1 2@Named 3public class ServiceA implements Service { 4 // Implementation 5} 1 2@Named 3public class ServiceB implements Service { 4 // Implementation 5} Injecting Service without explicit qualifiers can lead to ambiguity since both beans match by type, and no name or qualifier distinguishes them.\n1 2@Inject 3private Service service; In this case, CDI does not implicitly add @Default or attempt to resolve the ambiguity, resulting in a failed injection due to an ambiguous dependency.\nAlternatives: Introducing @Identifier from SmallRye Common Acknowledging the challenges posed by @Named, developers often seek alternatives for more explicit control over bean identification. One such alternative is the @Identifier annotation from SmallRye Common . This annotation offers a clearer and more controlled approach to naming beans, reducing the risk of conflicts and unexpected defaults. In contrast to @Named, which requires unique values for each application, @Identifier allows for multiple beans with the same identifier value as long as their types differ. This flexibility is particularly useful when handling different implementations of the same interface or related types.\nTo use @Identifier, simply annotate the bean class with the annotation and specify the identifier value:\n1 2@Identifier(\u0026#34;payment\u0026#34;) 3public class DefaultPaymentProcessor implements PaymentProcessor { 4 // Implementation 5} 1 2@Identifier(\u0026#34;payment\u0026#34;) 3public class LegacyPaymentGateway implements PaymentGateway { 4 // Implementation 5} Injecting beans using @Identifier is straightforward:\n1public class Client { 2 3 @Inject 4 @Identifier(\u0026#34;payment\u0026#34;) 5 PaymentProcessor processor; 6 7 @Inject 8 @Identifier(\u0026#34;payment\u0026#34;) 9 PaymentGateway gateway; 10 11} Here, the \u0026ldquo;payment\u0026rdquo; @Identifier value is reused for multiple beans because the types PaymentProcessor and PaymentGateway differ. This flexibility is not allowed by @Named, where values must be unique application-wide.\nAnother alternative to @Named is to create custom qualifiers. Custom qualifiers are user-defined annotations that can be used to identify and qualify beans. They offer the most granular control over bean selection and can be tailored to specific needs of the application.\nTo create a custom qualifier, follow these steps:\nDefine a new annotation class. Annotate the annotation class with @Qualifier. Optionally, provide a default value for the qualifier. For example, the following custom qualifier named DefaultPaymentGateway indicates the default payment gateway implementation:\n1 2@Qualifier 3public @interface DefaultPaymentGateway { 4 5} To use the custom qualifier, annotate the bean class with it:\n1 2@DefaultPaymentGateway 3public class StandardPaymentGateway implements PaymentGateway { 4 // Implementation 5} 1public class ExpressPaymentGateway implements PaymentGateway { 2 // Implementation 3} Then, inject the bean using the qualifier:\n1 2@Inject 3@DefaultPaymentGateway 4private PaymentGateway paymentGateway; Choosing the Right Approach The best approach for bean identification depends on the specific needs of the application. For simple applications, @Named may be sufficient. For more complex applications, @Identifier or custom qualifiers offer more control and flexibility.\nThe following table summarizes the pros and cons of each approach:\nApproach Pros Cons @Named Simple, widely supported Can be ambiguous, conflicts with @Default @Identifier Clearer identification, no conflicts with @Default Requires additional annotations Custom qualifiers Maximum flexibility, fine-grained control Requires upfront effort to define and maintain For further confirmation, you can refer to the official CDI specification\nConclusion: Strategic Choices for Bean Naming and Defaults In conclusion, the potential pitfalls associated with @Named underscore the need for careful consideration when using this annotation in CDI. Ambiguity and unintended defaults can arise when relying on implicit naming, especially in the presence of multiple implementations. Developers are encouraged to explore alternatives such as @Identifier from SmallRye Common for a more controlled and explicit approach to bean identification. Embracing explicit qualification, custom qualifiers, and alternative approaches ensures a smoother and more controlled CDI experience, leading to robust and maintainable Java.\n",
      "content_html": "\u003cp\u003eIn the ever-evolving landscape of Contexts and Dependency Injection (\u003cstrong\u003eCDI\u003c/strong\u003e), developers frequently\nencounter hurdles related to bean naming, default implementations, and potential conflicts. This\narticle provides a detailed exploration of the potential pitfalls associated with the \u003ccode\u003e@Named\u003c/code\u003e\nannotation in \u003cstrong\u003eCDI\u003c/strong\u003e. We will delve into its intricacies, shed light on problematic scenarios, and\ndiscuss alternative approaches, including the use of \u003ccode\u003e@Identifier\u003c/code\u003e from \u003cstrong\u003eSmallRye\u003c/strong\u003e. Furthermore,\nwe\u0026rsquo;ll offer insights into best practices for building robust and maintainable \u003cstrong\u003eJakarta EE\u003c/strong\u003e\napplications.\u003c/p\u003e\n\u003ch2 id=\"understanding-default\"\u003eUnderstanding \u003ccode\u003e@Default\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003e@Default\u003c/code\u003e annotation is a valuable tool in \u003cstrong\u003eCDI\u003c/strong\u003e for explicitly marking a specific\nimplementation\nas the default one for a given interface or bean type. It comes into play when dealing with multiple\nimplementations of the same interface, allowing developers to specify which implementation should be\ninjected by default when no other qualifiers are used.\u003c/p\u003e\n\u003cp\u003eConsider a scenario where multiple implementations of the \u003ccode\u003eGreetingService\u003c/code\u003e interface exist:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Default\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eDefaultGreetingService\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eimplements\u003c/span\u003e GreetingService {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e  @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e String \u003cspan style=\"color:#41a1c0\"\u003egreet\u003c/span\u003e(String name) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;Hello, \u0026#34;\u003c/span\u003e + name;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eSpecialGreetingService\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eimplements\u003c/span\u003e GreetingService {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e  @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e String \u003cspan style=\"color:#41a1c0\"\u003egreet\u003c/span\u003e(String name) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;Greetings, \u0026#34;\u003c/span\u003e + name + \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;!\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhen injecting a bean without specifying any qualifiers, \u003cstrong\u003eCDI\u003c/strong\u003e uses the \u003ccode\u003e@Default\u003c/code\u003e -marked bean as\nthe\ndefault. This is beneficial in scenarios with multiple implementations, providing a clear default\nchoice.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Inject\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e GreetingService greetingService; \u003cspan style=\"color:#6c7986\"\u003e// Injects the @Default implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhile the use of \u003ccode\u003e@Default\u003c/code\u003e is optional, it\u0026rsquo;s highly recommended, particularly when dealing with\ninterfaces that have multiple implementations. It provides a clear and consistent default option,\npreventing ambiguity and unexpected behavior during bean injection.\u003c/p\u003e\n\u003ch2 id=\"exploring-named---a-double-edged-sword\"\u003eExploring \u003ccode\u003e@Named\u003c/code\u003e - a double-edged sword\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003e@Named\u003c/code\u003e qualifier plays a fundamental role in \u003cstrong\u003eCDI\u003c/strong\u003e, assigning a human-readable name or\nidentifier to a bean. Developers often employ it to refer to beans by name when injecting them into\nother components.\u003c/p\u003e\n\u003cp\u003eHowever, \u003ccode\u003e@Named\u003c/code\u003e comes with its own set of challenges, particularly when used without additional\nqualifiers. By default, \u003cstrong\u003eCDI\u003c/strong\u003e associates the unqualified class name as the bean name. This can\nlead to conflicts with the @Default qualifier, resulting in unexpected behavior during bean\ninjection.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Named\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eMyBean\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#6c7986\"\u003e// Implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhen injecting \u003ccode\u003eMyBean\u003c/code\u003e without explicit qualifiers, CDI will only add the \u003ccode\u003e@Named\u003c/code\u003e qualifier, not\nthe \u003ccode\u003e@Default\u003c/code\u003e qualifier. The \u003ccode\u003e@Default\u003c/code\u003e qualifier is only applied if it is explicitly specified on\nthe bean or its qualifiers.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Inject\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e MyBean myBean;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn this case, ambiguity may arise if there are other beans with the same type name. For instance, if\nthere is another bean named \u003ccode\u003eMyBean\u003c/code\u003e, the injection will result in ambiguity.\u003c/p\u003e\n\u003cp\u003eTo address this issue, developers should explicitly qualify the bean they intend to inject.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Inject\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e@Named(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;myBean\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e MyBean myBean;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAlternatively, developers can utilize a custom qualifier for each bean to eliminate ambiguity.\u003c/p\u003e\n\u003ch2 id=\"problematic-cases-ambiguity-and-unintended-defaults\"\u003eProblematic Cases: Ambiguity and Unintended Defaults\u003c/h2\u003e\n\u003cp\u003eAmbiguity arises when \u003ccode\u003e@Named\u003c/code\u003e is used without additional qualifiers, and multiple implementations\nof\nthe same type exist. Consider the following scenario:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Named\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eServiceA\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eimplements\u003c/span\u003e Service {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#6c7986\"\u003e// Implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Named\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eServiceB\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eimplements\u003c/span\u003e Service {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#6c7986\"\u003e// Implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eInjecting \u003ccode\u003eService\u003c/code\u003e without explicit qualifiers can lead to ambiguity since both beans match by\ntype,\nand no name or qualifier distinguishes them.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Inject\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e Service service;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn this case, \u003cstrong\u003eCDI\u003c/strong\u003e does not implicitly add \u003ccode\u003e@Default\u003c/code\u003e or attempt to resolve the ambiguity,\nresulting in\na failed injection due to an ambiguous dependency.\u003c/p\u003e\n\u003ch2 id=\"alternatives-introducing-identifier-from-smallrye-common\"\u003eAlternatives: Introducing \u003ccode\u003e@Identifier\u003c/code\u003e from SmallRye Common\u003c/h2\u003e\n\u003cp\u003eAcknowledging the challenges posed by \u003ccode\u003e@Named\u003c/code\u003e, developers often seek alternatives for more explicit\ncontrol over bean identification. One such alternative is the \u003ccode\u003e@Identifier\u003c/code\u003e annotation\nfrom \u003ca href=\"https://javadoc.io/doc/io.smallrye.common/smallrye-common-annotation/latest/io/smallrye/common/annotation/Identifier.html\"\u003e\nSmallRye\nCommon\u003c/a\u003e . This annotation offers a clearer and more controlled approach to naming beans, reducing\nthe\nrisk of conflicts and unexpected defaults.\nIn contrast to \u003ccode\u003e@Named\u003c/code\u003e, which requires unique values for each application, \u003ccode\u003e@Identifier\u003c/code\u003e allows for\nmultiple beans with the same identifier value as long as their types differ. This flexibility is\nparticularly useful when handling different implementations of the same interface or related types.\u003c/p\u003e\n\u003cp\u003eTo use \u003ccode\u003e@Identifier\u003c/code\u003e, simply annotate the bean class with the annotation and specify the identifier\nvalue:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Identifier(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;payment\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eDefaultPaymentProcessor\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eimplements\u003c/span\u003e PaymentProcessor {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#6c7986\"\u003e// Implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Identifier(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;payment\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eLegacyPaymentGateway\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eimplements\u003c/span\u003e PaymentGateway {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#6c7986\"\u003e// Implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eInjecting beans using \u003ccode\u003e@Identifier\u003c/code\u003e is straightforward:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eClient\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e  @Inject\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e  @Identifier(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;payment\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e  PaymentProcessor processor;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e  @Inject\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e  @Identifier(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;payment\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e  PaymentGateway gateway;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHere, the \u0026ldquo;payment\u0026rdquo; \u003ccode\u003e@Identifier\u003c/code\u003e value is reused for multiple beans because the types\n\u003ccode\u003ePaymentProcessor\u003c/code\u003e and \u003ccode\u003ePaymentGateway\u003c/code\u003e differ. This flexibility is not allowed by \u003ccode\u003e@Named\u003c/code\u003e, where\nvalues\nmust be unique application-wide.\u003c/p\u003e\n\u003cp\u003eAnother alternative to \u003ccode\u003e@Named\u003c/code\u003e is to create custom qualifiers. Custom qualifiers are user-defined\nannotations that can be used to identify and qualify beans. They offer the most granular control\nover bean selection and can be tailored to specific needs of the application.\u003c/p\u003e\n\u003cp\u003eTo create a custom qualifier, follow these steps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eDefine a new annotation class.\u003c/li\u003e\n\u003cli\u003eAnnotate the annotation class with \u003ccode\u003e@Qualifier\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eOptionally, provide a default value for the qualifier.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor example, the following custom qualifier named \u003ccode\u003eDefaultPaymentGateway\u003c/code\u003e indicates the default\npayment gateway implementation:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Qualifier\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e @interface DefaultPaymentGateway {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTo use the custom qualifier, annotate the bean class with it:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@DefaultPaymentGateway\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eStandardPaymentGateway\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eimplements\u003c/span\u003e PaymentGateway {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#6c7986\"\u003e// Implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eExpressPaymentGateway\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eimplements\u003c/span\u003e PaymentGateway {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#6c7986\"\u003e// Implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen, inject the bean using the qualifier:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Inject\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e@DefaultPaymentGateway\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e PaymentGateway paymentGateway;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"choosing-the-right-approach\"\u003eChoosing the Right Approach\u003c/h2\u003e\n\u003cp\u003eThe best approach for bean identification depends on the specific needs of the application. For\nsimple applications, \u003ccode\u003e@Named\u003c/code\u003e may be sufficient. For more complex applications, \u003ccode\u003e@Identifier\u003c/code\u003e or\ncustom\nqualifiers offer more control and flexibility.\u003c/p\u003e\n\u003cp\u003eThe following table summarizes the pros and cons of each approach:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eApproach\u003c/th\u003e\n\u003cth\u003ePros\u003c/th\u003e\n\u003cth\u003eCons\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e@Named\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eSimple, widely supported\u003c/td\u003e\n\u003ctd\u003eCan be ambiguous, conflicts with \u003ccode\u003e@Default\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e@Identifier\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eClearer identification, no conflicts with \u003ccode\u003e@Default\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eRequires additional annotations\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCustom qualifiers\u003c/td\u003e\n\u003ctd\u003eMaximum flexibility, fine-grained control\u003c/td\u003e\n\u003ctd\u003eRequires upfront effort to define and maintain\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eFor further confirmation, you can refer to the official \u003cstrong\u003eCDI\u003c/strong\u003e specification\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2.2.9.png\" alt=\"2.2.9. The qualifier @Named at injection points\n\" title=\"2.2.9. The qualifier @Named at injection points\"\u003e\u003c/p\u003e\n\u003ch3 id=\"conclusion-strategic-choices-for-bean-naming-and-defaults\"\u003eConclusion: Strategic Choices for Bean Naming and Defaults\u003c/h3\u003e\n\u003cp\u003eIn conclusion, the potential pitfalls associated with \u003ccode\u003e@Named\u003c/code\u003e underscore the need for careful\nconsideration when using this annotation in \u003cstrong\u003eCDI\u003c/strong\u003e. Ambiguity and unintended defaults can arise\nwhen\nrelying on implicit naming, especially in the presence of multiple implementations. Developers are\nencouraged to explore alternatives such as \u003ccode\u003e@Identifier\u003c/code\u003e from \u003cstrong\u003eSmallRye Common\u003c/strong\u003e for a more\ncontrolled\nand explicit approach to bean identification. Embracing explicit qualification, custom qualifiers,\nand alternative approaches ensures a smoother and more controlled CDI experience, leading to robust\nand maintainable Java.\u003c/p\u003e\n",
      "url": "https://iqnev.github.io/posts/unveiling-challenges-with-named/",
      "date_published": "9126-09-09T124:99:00+03:00",
      "date_modified": "9126-09-09T124:99:00+03:00",
      "author": {
        "name": "Calvin Tran",
        "url": "https://iqnev.github.io/"
      }
    },
    
    {
      "id": "ab4d7c383ed06830a6d102ddc42bfe1b67f97105",
      "title": "Registering Reflection in Quarkus Extensions",
      "summary": "",
      "content_text": "Quarkus utilizes ahead-of-time (AOT) compilation to build blazing fast native executables. However, AOT works through closed-world analysis which eliminates unused code paths. This can break functionality relying on runtime reflection like dependency injection, bytecode manipulation, and integration with certain libraries.\nRegistering for Reflection When building a native executable, GraalVM operates under a closed-world assumption, analyzing the call tree and eliminating unused classes, methods, and fields. To include elements requiring reflective access, explicit registration becomes crucial.\nUsing the @RegisterForReflection Annotation The simplest way to register a class for reflection is through the @RegisterForReflection annotation:\n1@RegisterForReflection 2public class MyClass { 3} For classes in third-party JARs, an empty class can host the @RegisterForReflection annotation:\n1@RegisterForReflection(targets={DemoReflection1.class, DemoReflection2.class}) 2public class MyReflectionConfiguration { 3} Note that DemoReflection1 and DemoReflection2 will be registered for reflection, but not MyReflectionConfiguration.\nUsing a Configuration File Configuration files can also be used to register classes for reflection. For instance, to register all methods of com.demo.MyClass, create reflection-config.json:\n1[ 2{ 3\u0026#34;name\u0026#34; : \u0026#34;com.demo.MyClass\u0026#34;, 4\u0026#34;allDeclaredConstructors\u0026#34; : true, 5\u0026#34;allPublicConstructors\u0026#34; : true, 6\u0026#34;allDeclaredMethods\u0026#34; : true, 7\u0026#34;allPublicMethods\u0026#34; : true, 8\u0026#34;allDeclaredFields\u0026#34; : true, 9\u0026#34;allPublicFields\u0026#34; : true 10} 11] Make the configuration file known to the native-image executable by adding the following to application.properties:\n1quarkus.native.additional-build-args=-H:ReflectionConfigurationFiles=reflection-config.json Quarkus Extension Support for Native Mode To enable native mode support for a custom extension, Quarkus simplifies the registration of reflection through ReflectiveClassBuildItem. This class is used in the build process to specify classes requiring reflective access.\nUnderstanding ReflectiveClassBuildItem: ReflectiveClassBuildItem is a Quarkus-specific class utilized in the extension development process. It plays a crucial role in indicating which classes should be made available for reflective access at runtime. This is especially relevant when certain operations, such as dependency injection or bytecode manipulation, require runtime reflection.\nUsage in Quarkus Extensions: When creating a Quarkus extension, you can seamlessly integrate the registration of reflective classes using ReflectiveClassBuildItem. The @BuildStep annotation signifies a build step, a fundamental concept in Quarkus extension development. asdadfdf\n1public class MyClass { 2 3 @BuildStep 4 ReflectiveClassBuildItem reflection() { 5 return new ReflectiveClassBuildItem(false, false, \u0026#34;com.demo.DemoClass\u0026#34;); 6 } 7 8} In this snippet, MyClass is a placeholder for the actual extension class you are developing. The reflection() method, annotated with @BuildStep, creates an instance of ReflectiveClassBuildItem, indicating that the class com.demo.DemoClass requires reflective access. The false arguments for methods and fields indicate that reflective access is needed only for the constructor.\nI showcase a Quarkus extension that leverages the ReflectiveClassBuildItem to dynamically register classes for reflection. The extension focuses on identifying classes implementing a specific interface (CustomFeature in this case) and also explicitly registers some standard Java classes for reflective access.\n1import io.quarkus.deployment.annotations.BuildStep; 2import io.quarkus.deployment.builditem.CombinedIndexBuildItem; 3import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem; 4import org.jboss.jandex.ClassInfo; 5 6import java.text.DecimalFormat; 7import java.text.DecimalFormatSymbols; 8import java.text.SimpleDateFormat; 9 10public class ReflectionExtension { 11 12 // Interface to identify classes for reflection 13 private static final DotName CUSTOM_FEATURE_INTERFACE = DotName.createSimple(CustomFeature.class.getName()); 14 15 @BuildStep 16 void registerForReflection(CombinedIndexBuildItem combinedIndex, 17 BuildProducer\u0026lt;ReflectiveClassBuildItem\u0026gt; reflectiveClasses) { 18 19 for (ClassInfo implClassInfo : combinedIndex.getIndex().getAllKnownImplementors(CUSTOM_FEATURE_INTERFACE)) { 20 String combinedIndexName = implClassInfo.name().toString(); 21 log.debugf(\u0026#34;CustomFeature class implementation \u0026#39;[%s]\u0026#39; registered for reflection\u0026#34;, combinedIndexName); 22 23 reflectiveClasses.produce(new ReflectiveClassBuildItem(true, true, combinedIndexName)); 24 } 25 26 } 27 28} Explanation:\nCombinedIndexBuildItem: This build item provides access to the combined index of all classes in the application. In this example, it is used to retrieve all known implementors of the Conversion interface.\nIterating Over Implementors: The extension iterates over all classes implementing the Conversion interface and registers them for reflection using ReflectiveClassBuildItem.\nDotName is a class representing a dotted name, which is essentially a fully qualified class name in a format where package names and class names are separated by dots. The DotName class is part of the Jandex library, which is a tool used by Quarkus for indexing and querying Java classes. DotName is used to represent and work with fully qualified class names in the Jandex indexing system. It\u0026rsquo;s a lightweight and efficient way to refer to classes within the Jandex index.\nConsiderations: While ReflectiveClassBuildItem provides a mechanism to address reflective access requirements, it\u0026rsquo;s crucial to use it judiciously. Excessive reliance on reflective access can undermine the performance benefits of Quarkus\u0026rsquo; AOT compilation approach. Therefore, it\u0026rsquo;s recommended to leverage this tool sparingly and explore alternative strategies whenever possible.\nIn summary, understanding and effectively using ReflectiveClassBuildItem is key to optimizing Quarkus extensions for native mode. By selectively indicating classes that necessitate reflective access, developers can strike a balance between the advantages of AOT compilation and the unavoidable realities of certain runtime operations.\n",
      "content_html": "\u003cp\u003eQuarkus utilizes ahead-of-time \u003cstrong\u003e(AOT)\u003c/strong\u003e compilation to build blazing fast native executables. However,\n\u003cstrong\u003eAOT\u003c/strong\u003e works through closed-world analysis which eliminates unused code paths. This can break\nfunctionality relying on runtime reflection like dependency injection, bytecode manipulation, and\nintegration with certain libraries.\u003c/p\u003e\n\u003ch2 id=\"registering-for-reflection\"\u003eRegistering for Reflection\u003c/h2\u003e\n\u003cp\u003eWhen building a native executable, GraalVM operates under a closed-world assumption, analyzing the\ncall tree and eliminating unused classes, methods, and fields. To include elements requiring\nreflective access, explicit registration becomes crucial.\u003c/p\u003e\n\u003cp\u003eUsing the \u003ccode\u003e@RegisterForReflection\u003c/code\u003e Annotation\nThe simplest way to register a class for reflection is through the \u003ccode\u003e@RegisterForReflection\u003c/code\u003e\nannotation:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e@RegisterForReflection\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eMyClass\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFor classes in third-party JARs, an empty class can host the \u003ccode\u003e@RegisterForReflection\u003c/code\u003e annotation:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e@RegisterForReflection(targets={DemoReflection1.class, DemoReflection2.class})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eMyReflectionConfiguration\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNote that \u003ccode\u003eDemoReflection1\u003c/code\u003e and \u003ccode\u003eDemoReflection2\u003c/code\u003e will be registered for\nreflection, but not \u003ccode\u003eMyReflectionConfiguration\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eUsing a Configuration File\nConfiguration files can also be used to register classes for reflection. For instance, to register\nall methods of \u003ccode\u003ecom.demo.MyClass\u003c/code\u003e, create \u003ccode\u003ereflection-config.json\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e[\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u0026#34;name\u0026#34; : \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;com.demo.MyClass\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\u0026#34;allDeclaredConstructors\u0026#34; : \u003cspan style=\"color:#fc5fa3\"\u003etrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e\u0026#34;allPublicConstructors\u0026#34; : \u003cspan style=\"color:#fc5fa3\"\u003etrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e\u0026#34;allDeclaredMethods\u0026#34; : \u003cspan style=\"color:#fc5fa3\"\u003etrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e\u0026#34;allPublicMethods\u0026#34; : \u003cspan style=\"color:#fc5fa3\"\u003etrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e\u0026#34;allDeclaredFields\u0026#34; : \u003cspan style=\"color:#fc5fa3\"\u003etrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e\u0026#34;allPublicFields\u0026#34; : \u003cspan style=\"color:#fc5fa3\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eMake the configuration file known to the native-image executable by adding the following to\n\u003ccode\u003eapplication.properties\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-properties\" data-lang=\"properties\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003equarkus.native.additional-build-args=\u003cspan style=\"color:#fc6a5d\"\u003e-H:ReflectionConfigurationFiles=reflection-config.json\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"quarkus-extension-support-for-native-mode\"\u003eQuarkus Extension Support for Native Mode\u003c/h2\u003e\n\u003cp\u003eTo enable native mode support for a custom extension, Quarkus simplifies the registration of\nreflection through \u003ccode\u003eReflectiveClassBuildItem\u003c/code\u003e.\nThis class is used in the build process to specify classes requiring reflective access.\u003c/p\u003e\n\u003ch2 id=\"understanding-reflectiveclassbuilditem\"\u003eUnderstanding ReflectiveClassBuildItem:\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eReflectiveClassBuildItem\u003c/code\u003e is a Quarkus-specific class utilized in the extension development process.\nIt plays a crucial role in indicating which classes should be made available for reflective access\nat runtime. This is especially relevant when certain operations, such as dependency injection or\nbytecode manipulation, require runtime reflection.\u003c/p\u003e\n\u003ch2 id=\"usage-in-quarkus-extensions\"\u003eUsage in Quarkus Extensions:\u003c/h2\u003e\n\u003cp\u003eWhen creating a Quarkus extension, you can seamlessly integrate the registration of reflective\nclasses using \u003ccode\u003eReflectiveClassBuildItem\u003c/code\u003e.\nThe \u003ccode\u003e@BuildStep\u003c/code\u003e annotation signifies a build step, a fundamental concept in Quarkus extension\ndevelopment. asdadfdf\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eMyClass\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e    @BuildStep\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e    ReflectiveClassBuildItem \u003cspan style=\"color:#41a1c0\"\u003ereflection\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e ReflectiveClassBuildItem(\u003cspan style=\"color:#fc5fa3\"\u003efalse\u003c/span\u003e, \u003cspan style=\"color:#fc5fa3\"\u003efalse\u003c/span\u003e, \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;com.demo.DemoClass\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn this snippet, \u003ccode\u003eMyClass\u003c/code\u003e is a placeholder for the actual extension class you are\ndeveloping. The \u003ccode\u003ereflection()\u003c/code\u003e method, annotated with \u003ccode\u003e@BuildStep\u003c/code\u003e, creates an instance of\n\u003ccode\u003eReflectiveClassBuildItem\u003c/code\u003e, indicating that the class \u003ccode\u003ecom.demo.DemoClass\u003c/code\u003e requires reflective access.\nThe false arguments for methods and fields indicate that reflective access is needed only for the\nconstructor.\u003c/p\u003e\n\u003cp\u003eI showcase a Quarkus extension that leverages the \u003ccode\u003eReflectiveClassBuildItem to\u003c/code\u003e dynamically register\nclasses for reflection.\nThe extension focuses on identifying classes implementing a specific interface (\u003ccode\u003eCustomFeature\u003c/code\u003e in this\ncase) and also explicitly registers some standard Java classes for reflective access.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e io.quarkus.deployment.annotations.BuildStep;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e org.jboss.jandex.ClassInfo;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e java.text.DecimalFormat;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e java.text.DecimalFormatSymbols;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e java.text.SimpleDateFormat;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eReflectionExtension\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#6c7986\"\u003e// Interface to identify classes for reflection\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e DotName CUSTOM_FEATURE_INTERFACE = DotName.createSimple(CustomFeature.class.getName());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e    @BuildStep\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eregisterForReflection\u003c/span\u003e(CombinedIndexBuildItem combinedIndex,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e                               BuildProducer\u0026lt;ReflectiveClassBuildItem\u0026gt; reflectiveClasses) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#fc5fa3\"\u003efor\u003c/span\u003e (ClassInfo implClassInfo : combinedIndex.getIndex().getAllKnownImplementors(CUSTOM_FEATURE_INTERFACE)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\u003c/span\u003e\u003cspan\u003e            String combinedIndexName = implClassInfo.name().toString();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\u003c/span\u003e\u003cspan\u003e            log.debugf(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;CustomFeature class implementation \u0026#39;[%s]\u0026#39; registered for reflection\u0026#34;\u003c/span\u003e, combinedIndexName);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\u003c/span\u003e\u003cspan\u003e            reflectiveClasses.produce(\u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e ReflectiveClassBuildItem(\u003cspan style=\"color:#fc5fa3\"\u003etrue\u003c/span\u003e, \u003cspan style=\"color:#fc5fa3\"\u003etrue\u003c/span\u003e, combinedIndexName));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\u003c/span\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCombinedIndexBuildItem:\u003c/strong\u003e This build item provides access to the combined index of all classes in\nthe application. In this example, it is used to retrieve all known implementors of the Conversion\ninterface.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eIterating Over Implementors:\u003c/strong\u003e The extension iterates over all classes implementing the Conversion\ninterface and registers them for reflection using \u003ccode\u003eReflectiveClassBuildItem\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDotName\u003c/strong\u003e is a class representing a dotted name, which is essentially a fully qualified class name\nin a format where package names and class names are separated by dots. The \u003ccode\u003eDotName\u003c/code\u003e class is part\nof the \u003cstrong\u003eJandex library\u003c/strong\u003e, which is a tool used by Quarkus for indexing and querying Java classes.\n\u003ccode\u003eDotName\u003c/code\u003e is used to represent and work with fully qualified class names in the \u003cstrong\u003eJandex indexing\u003c/strong\u003e\nsystem. It\u0026rsquo;s a lightweight and efficient way to refer to classes within the \u003cstrong\u003eJandex index\u003c/strong\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003eConsiderations:\u003c/strong\u003e\nWhile \u003ccode\u003eReflectiveClassBuildItem\u003c/code\u003e provides a mechanism to address reflective access requirements, it\u0026rsquo;s\ncrucial to use it judiciously. Excessive reliance on reflective access can undermine the performance\nbenefits of Quarkus\u0026rsquo; \u003cstrong\u003eAOT\u003c/strong\u003e compilation approach. Therefore, it\u0026rsquo;s recommended to leverage this tool\nsparingly and explore alternative strategies whenever possible.\u003c/p\u003e\n\u003cp\u003eIn summary, understanding and effectively using \u003ccode\u003eReflectiveClassBuildItem\u003c/code\u003e is key to optimizing\nQuarkus extensions for native mode. By selectively indicating classes that necessitate reflective\naccess, developers can strike a balance between the advantages of \u003cstrong\u003eAOT\u003c/strong\u003e compilation and the\nunavoidable realities of certain runtime operations.\u003c/p\u003e\n",
      "url": "https://iqnev.github.io/posts/registering-reflection-in-quarkus-extensions/",
      "date_published": "26116-26-09T114:2626:00+03:00",
      "date_modified": "26116-26-09T114:2626:00+03:00",
      "author": {
        "name": "Calvin Tran",
        "url": "https://iqnev.github.io/"
      }
    },
    
    {
      "id": "5fc90753aea95e9d39a73ec00ab3319f8e73d1d1",
      "title": "Exploring Synthetic Beans in Quarkus: A Powerful Extension Mechanism",
      "summary": "",
      "content_text": "In the world of Quarkus, the realm of dependency injection is rich and versatile, offering developers a multitude of tools to manage and control beans. One such tool is the concept of synthetic beans. Synthetic beans are a powerful extension mechanism that allows you to register beans whose attributes are not derived from a Java class, method, or field. Instead, all the attributes of a synthetic bean are defined by an extension.\nIn this article, we\u0026rsquo;ll take a deep dive into the world of synthetic beans in Quarkus. We\u0026rsquo;ll explore the need for synthetic beans, their practical applications, and how to create and use them in your Quarkus applications.\nUnderstanding Synthetic Beans In Quarkus, beans are the building blocks of your application, managed by the Contexts and Dependency Injection (CDI) framework. Typically, CDI beans are Java classes that are annotated with various CDI annotations such as @ApplicationScoped, @RequestScoped, or @Inject. These annotations allow CDI to automatically manage the lifecycle and injection of beans.\nHowever, there are situations where you may need to register a bean that doesn\u0026rsquo;t neatly fit into the traditional CDI model. This is where synthetic beans come into play. Synthetic beans are created by extensions and have their attributes entirely defined by these extensions. In the world of regular CDI, you would achieve this using the AfterBeanDiscovery.addBean() and SyntheticComponents.addBean() methods. In Quarkus, this is accomplished using SyntheticBeanBuildItem.\nWhen Do You Need Synthetic Beans? So, when might you need to use synthetic beans in Quarkus? Synthetic beans are a powerful tool when:\nIntegrating Third-Party Libraries: You\u0026rsquo;re working with a third-party library that doesn\u0026rsquo;t have CDI annotations but needs to be integrated into your CDI-based application. Synthetic beans allow you to bridge this gap.\nDynamic Bean Registration: You need to register beans dynamically at runtime, depending on configuration or other factors. Synthetic beans give you the flexibility to create and register beans on-the-fly.\nCustomized Bean Management: You require fine-grained control over the scope and behavior of a bean that can\u0026rsquo;t be achieved with standard CDI annotations.\nImplementing Specialized Beans: You want to create specialized beans with unique attributes that don\u0026rsquo;t correspond to traditional Java classes or methods.\nMocking Dependencies for Testing: Synthetic beans provide a useful way to mock out dependencies and inject mock implementations for testing purposes.\nSynthesisFinishedBuildItem The SynthesisFinishedBuildItem is used to indicate that the CDI bean discovery and registration process has completed. This allows extensions to know when it is safe to interact with the beans that have been registered.\nFor example:\n1@BuildStep 2void onSynthesisFinished(SynthesisFinishedBuildItem synthesisFinished){ 3 // CDI bean registration is complete, can now safely interact with beans 4 } SyntheticBeansRuntimeInitBuildItem The SyntheticBeansRuntimeInitBuildItem is used to register a callback that will be invoked at runtime after all synthetic beans have been initialized. This is useful if you need to perform additional initialization logic involving synthetic beans.\nFor example:\n1@BuildStep 2SyntheticBeansRuntimeInitBuildItem initSyntheticBeans(){ 3 4 return new SyntheticBeansRuntimeInitBuildItem(ids-\u0026gt;{ 5 // Perform logic with initialized synthetic beans 6 }); 7 8 } The callback passed to SyntheticBeansRuntimeInitBuildItem will receive a Set\u0026lt;Integer\u0026gt; containing the IDs of all initialized synthetic beans.\nSo in summary, SynthesisFinishedBuildItem indicates bean discovery is done, while SyntheticBeansRuntimeInitBuildItem allows initializing logic depending on synthetic beans.\nCreating Synthetic Beans with SyntheticBeanBuildItem In Quarkus, creating synthetic beans is a straightforward process, thanks to the SyntheticBeanBuildItem class. Let\u0026rsquo;s walk through the steps to create and use a synthetic bean:\nCreate the Synthetic Bean Class: Start by defining the synthetic bean class. This class will be the foundation for your synthetic bean. 1package com.iqnev; 2 3public class MySyntheticBean { 4 5 // Define the behavior and attributes of your synthetic bean 6 public void printMessage() { 7 System.out.println(\u0026#34;Hello from synthetic bean!\u0026#34;); 8 } 9} Create a Quarkus Extension: You\u0026rsquo;ll need to create a Quarkus extension to register your synthetic bean. This extension class will use SyntheticBeanBuildItem to configure your bean. Bytecode Generation Approach 1package com.iqnev; 2 3import io.quarkus.arc.deployment.SyntheticBeanBuildItem; 4 5public class MySyntheticBeanExtension { 6 7 @BuildStep 8 SyntheticBeanBuildItem syntheticBean() { 9 return SyntheticBeanBuildItem 10 .configure(MySyntheticBean.class) 11 .scope(ApplicationScoped.class) 12 .creator(mc -\u0026gt; { 13 mc.returnValue(new MySyntheticBean()); 14 }) 15 .done(); 16 } 17} The .creator() method on SyntheticBeanBuildItem is used to generate the bytecode that will create instances of the synthetic bean at runtime.\nThe argument passed to .creator() is a Consumer\u0026lt;MethodCreator\u0026gt; which allows generating Java bytecode inside a method.\nIn this example:\nmc is the MethodCreator instance mc.returnValue(new MySyntheticBean()) generates the bytecode to create a new instance of MySyntheticBean and return it from the method. So essentially, we are telling Quarkus to generate a method that looks something like:\n1MySyntheticBean createSyntheticBean(){ 2 return new MySyntheticBean(); 3 } This generated method will then be called to instantiate the MySyntheticBean when it needs to be injected or used.\nThe reason bytecode generation is used is that synthetic beans do not correspond to real Java classes/methods, so we have to explicitly generate a method to instantiate them\nThe output of SyntheticBeanBuildItem is bytecode recorded at build time. This limits how instances are created at runtime. Common options are:\nGenerate bytecode directly via .creator() Use a BeanCreator subclass Produce instance via @Recorder method Recorder Approach The @Record and .runtimeValue() approaches are alternate ways of providing instances for synthetic beans in Quarkus.\nThis allows you to instantiate the synthetic bean via a recorder class method annotated with @Record(STATIC_INIT). For example:\n1 2@Recorder 3public class MyRecorder { 4 5 @Record(STATIC_INIT) 6 public MySyntheticBean createBean() { 7 return new MySyntheticBean(); 8 } 9 10} 11 12 @BuildStep 13 SyntheticBeanBuildItem syntheticBean(MyRecorder recorder) { 14 return SyntheticBeanBuildItem 15 .configure(MySyntheticBean.class) 16 .runtimeValue(recorder.createBean()); 17 } Here the .runtimeValue() references the recorder method to instantiate the bean.\nThis allows passing a RuntimeValue directly to provide the synthetic bean instance.\nFor example:\n1@BuildStep 2SyntheticBeanBuildItem syntheticBean(){ 3 4 RuntimeValue\u0026lt;MySyntheticBean\u0026gt; bean= //... 5 6 return SyntheticBeanBuildItem 7 .configure(MySyntheticBean.class) 8 .runtimeValue(bean); 9 10 } The RuntimeValue could come from a recorder, supplier, proxy etc.\nSo in summary:\n@Record is one approach to generate the RuntimeValue .runtimeValue() sets the RuntimeValue on the SyntheticBeanBuildItem They both achieve the same goal of providing a runtime instance, just in slightly different ways.\nWhen it comes to providing runtime instances for synthetic beans in Quarkus, I would consider using recorders (via @Record) to be a more advanced approach compared to directly generating bytecode with .creator() or supplying simple RuntimeValues.\nHere are some reasons why using recorders can be more advanced:\nMore encapsulation - The logic to instantiate beans is contained in a separate recorder class rather than directly in build steps. This keeps build steps lean. Reuse - Recorder methods can be reused across multiple synthetic beans rather than rewriting creator logic. Runtime data - Recorder methods execute at runtime so they can leverage runtime resources, configs, services etc. to construct beans. Dependency injection - Recorder methods can inject other services. Life cycle control - Recorder methods annotated with @Record(STATIC_INIT) or @Record(RUNTIME_INIT) give more control over bean instantiation life cycle. Managed beans - Beans instantiated inside recorders can themselves be CDI managed beans. So in summary, recorder methods provide more encapsulation, flexibility and access to runtime data and services for instantiating synthetic beans. They allow for more advanced bean production logic compared to direct bytecode generation.\nHowever, direct bytecode generation with .creator() can still be useful for simple cases where recorders may be overkill. But as synthetic bean needs grow, recorders are a more powerful and advanced approach.\nNote\nIt is possible to configure a synthetic bean in Quarkus to be initialized during the RUNTIME_INIT phase instead of the default STATIC_INIT phase.\nHere is an example:\n1@BuildStep 2@Record(RUNTIME_INIT) 3SyntheticBeanBuildItem lazyBean(BeanRecorder recorder){ 4 5 return SyntheticBeanBuildItem 6 .configure(MyLazyBean.class) 7 .setRuntimeInit() // initialize during RUNTIME_INIT 8 .runtimeValue(recorder.createLazyBean()); 9 10 } The key points are:\nUse setRuntimeInit() on the SyntheticBeanBuildItem to mark it for RUNTIME_INIT The recorder method must be annotated with @Record(RUNTIME_INIT) The runtime init synthetic beans cannot be accessed during STATIC_INIT So in summary, synthetic beans can be initialized lazily during RUNTIME_INIT for cases where eager STATIC_INIT instantiation is not needed. This allows optimizing startup time.\nUse the Synthetic Bean: Now that your synthetic bean is registered, you can inject and use it in your application. 1package com.iqnev; 2 3import javax.inject.Inject; 4 5public class MyBeanUser { 6 7 @Inject 8 MySyntheticBean mySyntheticBean; 9 10 public void useSyntheticBean() { 11 // Use the synthetic bean in your code 12 mySyntheticBean.printMessage(); 13 } 14} Running Your Application: Build and run your Quarkus application as usual, and the synthetic bean will be available for injection and use. Conclusion Synthetic beans in Quarkus provide a powerful mechanism for integrating external libraries, dynamically registering beans, and customizing bean behavior in your CDI-based applications. These beans, whose attributes are defined by extensions rather than Java classes, offer flexibility and versatility in managing dependencies.\nAs we\u0026rsquo;ve explored in this article, creating and using synthetic beans in Quarkus is a straightforward process. By leveraging SyntheticBeanBuildItem and Quarkus extensions, you can seamlessly bridge the gap between traditional CDI and more specialized or dynamic bean registration requirements.\nIn the ever-evolving landscape of Java frameworks, Quarkus continues to stand out by offering innovative solutions like synthetic beans, making it a compelling choice for modern, efficient, and flexible application development. Embrace the power of synthetic beans in Quarkus, and take your dependency injection to the next level!\n",
      "content_html": "\u003cp\u003eIn the world of Quarkus, the realm of dependency injection is rich and versatile, offering\ndevelopers a multitude of tools to manage and control beans. One such tool is the concept of\nsynthetic beans. Synthetic beans are a powerful extension mechanism that allows you to register\nbeans whose attributes are not derived from a Java class, method, or field. Instead, all the\nattributes of a synthetic bean are defined by an extension.\u003c/p\u003e\n\u003cp\u003eIn this article, we\u0026rsquo;ll take a deep dive into the world of synthetic beans in Quarkus. We\u0026rsquo;ll explore\nthe need for synthetic beans, their practical applications, and how to create and use them in your\nQuarkus applications.\u003c/p\u003e\n\u003ch2 id=\"understanding-synthetic-beans\"\u003eUnderstanding Synthetic Beans\u003c/h2\u003e\n\u003cp\u003eIn Quarkus, beans are the building blocks of your application, managed by the Contexts and\nDependency Injection (CDI) framework. Typically, CDI beans are Java classes that are annotated with\nvarious CDI annotations such as \u003ccode\u003e@ApplicationScoped\u003c/code\u003e, \u003ccode\u003e@RequestScoped\u003c/code\u003e, or \u003ccode\u003e@Inject\u003c/code\u003e. These\nannotations\nallow CDI to automatically manage the lifecycle and injection of beans.\u003c/p\u003e\n\u003cp\u003eHowever, there are situations where you may need to register a bean that doesn\u0026rsquo;t neatly fit into the\ntraditional CDI model. This is where synthetic beans come into play. Synthetic beans are created by\nextensions and have their attributes entirely defined by these extensions. In the world of regular\nCDI, you would achieve this using the \u003ccode\u003eAfterBeanDiscovery.addBean()\u003c/code\u003e\nand \u003ccode\u003eSyntheticComponents.addBean()\u003c/code\u003e\nmethods. In Quarkus, this is accomplished using \u003ccode\u003eSyntheticBeanBuildItem\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"when-do-you-need-synthetic-beans\"\u003eWhen Do You Need Synthetic Beans?\u003c/h2\u003e\n\u003cp\u003eSo, when might you need to use synthetic beans in Quarkus? Synthetic beans are a powerful tool when:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eIntegrating Third-Party Libraries:\u003c/strong\u003e You\u0026rsquo;re working with a third-party library that doesn\u0026rsquo;t\nhave CDI annotations but needs to be integrated into your CDI-based application. Synthetic beans\nallow you to bridge this gap.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDynamic Bean Registration:\u003c/strong\u003e You need to register beans dynamically at runtime, depending on\nconfiguration or other factors. Synthetic beans give you the flexibility to create and register\nbeans on-the-fly.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCustomized Bean Management:\u003c/strong\u003e You require fine-grained control over the scope and behavior of a\nbean that can\u0026rsquo;t be achieved with standard CDI annotations.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eImplementing Specialized Beans:\u003c/strong\u003e You want to create specialized beans with unique attributes\nthat don\u0026rsquo;t correspond to traditional Java classes or methods.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eMocking Dependencies for Testing:\u003c/strong\u003e Synthetic beans provide a useful way to mock out\ndependencies and inject mock implementations for testing purposes.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"synthesisfinishedbuilditem\"\u003eSynthesisFinishedBuildItem\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eSynthesisFinishedBuildItem\u003c/code\u003e is used to indicate that the CDI bean discovery and registration\nprocess has completed.\nThis allows extensions to know when it is safe to interact with the beans that have been registered.\u003c/p\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e@BuildStep  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eonSynthesisFinished\u003c/span\u003e(SynthesisFinishedBuildItem synthesisFinished){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#6c7986\"\u003e// CDI bean registration is complete, can now safely interact with beans\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"syntheticbeansruntimeinitbuilditem\"\u003eSyntheticBeansRuntimeInitBuildItem\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eSyntheticBeansRuntimeInitBuildItem\u003c/code\u003e is used to register a callback that will be invoked at\nruntime after all synthetic beans have been initialized.\nThis is useful if you need to perform additional initialization logic involving synthetic beans.\u003c/p\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e@BuildStep\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003eSyntheticBeansRuntimeInitBuildItem \u003cspan style=\"color:#41a1c0\"\u003einitSyntheticBeans\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e SyntheticBeansRuntimeInitBuildItem(ids-\u0026gt;{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#6c7986\"\u003e// Perform logic with initialized synthetic beans\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\u003c/span\u003e\u003cspan\u003e    });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe callback passed to \u003ccode\u003eSyntheticBeansRuntimeInitBuildItem\u003c/code\u003e will receive a \u003ccode\u003eSet\u0026lt;Integer\u0026gt;\u003c/code\u003e containing\nthe IDs of all initialized synthetic beans.\u003c/p\u003e\n\u003cp\u003eSo in summary, \u003ccode\u003eSynthesisFinishedBuildItem\u003c/code\u003e indicates bean discovery is done,\nwhile \u003ccode\u003eSyntheticBeansRuntimeInitBuildItem\u003c/code\u003e allows initializing logic depending on synthetic beans.\u003c/p\u003e\n\u003ch2 id=\"creating-synthetic-beans-with-syntheticbeanbuilditem\"\u003eCreating Synthetic Beans with SyntheticBeanBuildItem\u003c/h2\u003e\n\u003cp\u003eIn Quarkus, creating synthetic beans is a straightforward process, thanks to\nthe \u003ccode\u003eSyntheticBeanBuildItem\u003c/code\u003e class.\nLet\u0026rsquo;s walk through the steps to create and use a synthetic bean:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eCreate the Synthetic Bean Class:\u003c/strong\u003e Start by defining the synthetic bean class. This class will\nbe the foundation for your synthetic bean.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epackage\u003c/span\u003e com.iqnev;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eMySyntheticBean\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#6c7986\"\u003e// Define the behavior and attributes of your synthetic bean\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eprintMessage\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\u003c/span\u003e\u003cspan\u003e    System.out.println(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;Hello from synthetic bean!\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eCreate a Quarkus Extension:\u003c/strong\u003e You\u0026rsquo;ll need to create a Quarkus extension to register your\nsynthetic\nbean.\nThis extension class will use \u003ccode\u003eSyntheticBeanBuildItem\u003c/code\u003e to configure your bean.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"bytecode-generation-approach\"\u003eBytecode Generation Approach\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epackage\u003c/span\u003e com.iqnev;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e io.quarkus.arc.deployment.SyntheticBeanBuildItem;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eMySyntheticBeanExtension\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e  @BuildStep\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e  SyntheticBeanBuildItem \u003cspan style=\"color:#41a1c0\"\u003esyntheticBean\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e SyntheticBeanBuildItem\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e        .configure(MySyntheticBean.class)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e        .scope(ApplicationScoped.class)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e        .creator(mc -\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e          mc.returnValue(\u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e MySyntheticBean());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e        })\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e        .done();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003e.creator()\u003c/code\u003e method on \u003ccode\u003eSyntheticBeanBuildItem\u003c/code\u003e is used to generate the bytecode that will\ncreate instances of the synthetic bean at runtime.\u003c/p\u003e\n\u003cp\u003eThe argument passed to \u003ccode\u003e.creator()\u003c/code\u003e is a \u003ccode\u003eConsumer\u0026lt;MethodCreator\u0026gt;\u003c/code\u003e which allows generating Java\nbytecode inside a method.\u003c/p\u003e\n\u003cp\u003eIn this example:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003emc\u003c/code\u003e is the \u003ccode\u003eMethodCreator\u003c/code\u003e instance\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emc.returnValue(new MySyntheticBean())\u003c/code\u003e generates the bytecode to create a new instance\nof \u003ccode\u003eMySyntheticBean\u003c/code\u003e and return it from the method.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSo essentially, we are telling Quarkus to generate a method that looks something like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003eMySyntheticBean \u003cspan style=\"color:#41a1c0\"\u003ecreateSyntheticBean\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e MySyntheticBean();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis generated method will then be called to instantiate the \u003ccode\u003eMySyntheticBean\u003c/code\u003e when it needs to be\ninjected or used.\u003c/p\u003e\n\u003cp\u003eThe reason bytecode generation is used is that synthetic beans do not correspond to real Java\nclasses/methods, so we have to explicitly generate a method to instantiate them\u003c/p\u003e\n\u003cp\u003eThe output of \u003ccode\u003eSyntheticBeanBuildItem\u003c/code\u003e is bytecode recorded at build time. This limits how instances\nare created at runtime. Common options are:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eGenerate bytecode directly via \u003ccode\u003e.creator()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eUse a \u003ccode\u003eBeanCreator\u003c/code\u003e subclass\u003c/li\u003e\n\u003cli\u003eProduce instance via \u003ccode\u003e@Recorder\u003c/code\u003e method\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"recorder-approach\"\u003eRecorder Approach\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003e@Record\u003c/code\u003e and \u003ccode\u003e.runtimeValue()\u003c/code\u003e approaches are alternate ways of providing instances for\nsynthetic beans in Quarkus.\u003c/p\u003e\n\u003cp\u003eThis allows you to instantiate the synthetic bean via a recorder class method annotated\nwith \u003ccode\u003e@Record(STATIC_INIT)\u003c/code\u003e.\nFor example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e@Recorder\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eMyRecorder\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e  @Record(STATIC_INIT)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e MySyntheticBean \u003cspan style=\"color:#41a1c0\"\u003ecreateBean\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e MySyntheticBean();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e  @BuildStep\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e  SyntheticBeanBuildItem \u003cspan style=\"color:#41a1c0\"\u003esyntheticBean\u003c/span\u003e(MyRecorder recorder) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e SyntheticBeanBuildItem\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e        .configure(MySyntheticBean.class)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e        .runtimeValue(recorder.createBean());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHere the \u003ccode\u003e.runtimeValue()\u003c/code\u003e references the recorder method to instantiate the bean.\u003c/p\u003e\n\u003cp\u003eThis allows passing a \u003ccode\u003eRuntimeValue\u003c/code\u003e directly to provide the synthetic bean instance.\u003c/p\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e@BuildStep \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003eSyntheticBeanBuildItem \u003cspan style=\"color:#41a1c0\"\u003esyntheticBean\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e    RuntimeValue\u0026lt;MySyntheticBean\u0026gt; bean= \u003cspan style=\"color:#6c7986\"\u003e//...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e SyntheticBeanBuildItem\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e    .configure(MySyntheticBean.class)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e    .runtimeValue(bean);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003eRuntimeValue\u003c/code\u003e could come from a recorder, supplier, proxy etc.\u003c/p\u003e\n\u003cp\u003eSo in summary:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@Record\u003c/code\u003e is one approach to generate the \u003ccode\u003eRuntimeValue\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.runtimeValue()\u003c/code\u003e sets the \u003ccode\u003eRuntimeValue\u003c/code\u003e on the \u003ccode\u003eSyntheticBeanBuildItem\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThey both achieve the same goal of providing a runtime instance, just in slightly different ways.\u003c/p\u003e\n\u003cp\u003eWhen it comes to providing runtime instances for synthetic beans in Quarkus, I would consider using\nrecorders (via \u003ccode\u003e@Record\u003c/code\u003e) to be a more advanced approach compared to directly generating bytecode\nwith\n\u003ccode\u003e.creator()\u003c/code\u003e or supplying simple RuntimeValues.\u003c/p\u003e\n\u003cp\u003eHere are some reasons why using recorders can be more advanced:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eMore encapsulation -\u003c/strong\u003e The logic to instantiate beans is contained in a separate recorder class\nrather than directly in build steps. This keeps build steps lean.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eReuse -\u003c/strong\u003e Recorder methods can be reused across multiple synthetic beans rather than rewriting\ncreator logic.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRuntime data -\u003c/strong\u003e Recorder methods execute at runtime so they can leverage runtime resources,\nconfigs, services etc. to construct beans.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDependency injection -\u003c/strong\u003e Recorder methods can inject other services.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLife cycle control -\u003c/strong\u003e Recorder methods annotated with \u003ccode\u003e@Record(STATIC_INIT)\u003c/code\u003e\nor \u003ccode\u003e@Record(RUNTIME_INIT)\u003c/code\u003e give more control over bean instantiation life cycle.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eManaged beans -\u003c/strong\u003e Beans instantiated inside recorders can themselves be CDI managed beans.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo in summary, recorder methods provide more encapsulation, flexibility and access to runtime data\nand services for instantiating synthetic beans. They allow for more advanced bean production logic\ncompared to direct bytecode generation.\u003c/p\u003e\n\u003cp\u003eHowever, direct bytecode generation with \u003ccode\u003e.creator()\u003c/code\u003e can still be useful for simple cases where\nrecorders may be overkill. But as synthetic bean needs grow, recorders are a more powerful and\nadvanced approach.\u003c/p\u003e\n\u003cstyle type=\"text/css\"\u003e.notice{--root-color:#444;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#c33;--warning-content:#fee;--info-title:#fb7;--info-content:#fec;--note-title:#6be;--note-content:#e7f2fa;--tip-title:#5a5;--tip-content:#efe}@media (prefers-color-scheme:dark){.notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}}body.dark .notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}.notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:var(--root-color);background:var(--root-background)}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:var(--title-color);background:var(--title-background)}.notice.warning .notice-title{background:var(--warning-title)}.notice.warning{background:var(--warning-content)}.notice.info .notice-title{background:var(--info-title)}.notice.info{background:var(--info-content)}.notice.note .notice-title{background:var(--note-title)}.notice.note{background:var(--note-content)}.notice.tip .notice-title{background:var(--tip-title)}.notice.tip{background:var(--tip-content)}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:.125em;position:relative}\u003c/style\u003e\n\u003cdiv\u003e\u003csvg width=\"0\" height=\"0\" display=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003csymbol id=\"tip-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"note-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"warning-notice\" viewBox=\"0 0 576 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"info-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z\"/\u003e\u003c/symbol\u003e\u003c/svg\u003e\u003c/div\u003e\u003cdiv class=\"notice note\" \u003e\n\u003cp class=\"first notice-title\"\u003e\u003cspan class=\"icon-notice baseline\"\u003e\u003csvg\u003e\u003cuse href=\"#note-notice\"\u003e\u003c/use\u003e\u003c/svg\u003e\u003c/span\u003eNote\u003c/p\u003e\u003cp\u003eIt is possible to configure a synthetic bean in Quarkus to be initialized during\nthe \u003ccode\u003eRUNTIME_INIT\u003c/code\u003e\nphase instead of the default \u003ccode\u003eSTATIC_INIT\u003c/code\u003e phase.\u003c/p\u003e\u003c/div\u003e\n\n\u003cp\u003eHere is an example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e@BuildStep\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e@Record(RUNTIME_INIT)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003eSyntheticBeanBuildItem \u003cspan style=\"color:#41a1c0\"\u003elazyBean\u003c/span\u003e(BeanRecorder recorder){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e SyntheticBeanBuildItem\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e    .configure(MyLazyBean.class)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e    .setRuntimeInit() \u003cspan style=\"color:#6c7986\"\u003e// initialize during RUNTIME_INIT\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e    .runtimeValue(recorder.createLazyBean());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe key points are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUse \u003ccode\u003esetRuntimeInit()\u003c/code\u003e on the \u003ccode\u003eSyntheticBeanBuildItem\u003c/code\u003e to mark it for \u003ccode\u003eRUNTIME_INIT\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eThe recorder method must be annotated with \u003ccode\u003e@Record(RUNTIME_INIT)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eThe runtime init synthetic beans cannot be accessed during \u003ccode\u003eSTATIC_INIT\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo in summary, synthetic beans can be initialized lazily during \u003ccode\u003eRUNTIME_INIT\u003c/code\u003e for cases where\neager \u003ccode\u003eSTATIC_INIT\u003c/code\u003e instantiation is not needed. This allows optimizing startup time.\u003c/p\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eUse the Synthetic Bean:\u003c/strong\u003e Now that your synthetic bean is registered, you can inject and use it\nin your application.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epackage\u003c/span\u003e com.iqnev;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e javax.inject.Inject;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eMyBeanUser\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e  @Inject\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e  MySyntheticBean mySyntheticBean;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003euseSyntheticBean\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#6c7986\"\u003e// Use the synthetic bean in your code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e    mySyntheticBean.printMessage();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003eRunning Your Application: Build and run your Quarkus application as usual, and the synthetic bean\nwill be available for injection and use.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eSynthetic beans in Quarkus provide a powerful mechanism for integrating external libraries,\ndynamically registering beans, and customizing bean behavior in your CDI-based applications. These\nbeans, whose attributes are defined by extensions rather than Java classes, offer flexibility and\nversatility in managing dependencies.\u003c/p\u003e\n\u003cp\u003eAs we\u0026rsquo;ve explored in this article, creating and using synthetic beans in Quarkus is a\nstraightforward process. By leveraging \u003ccode\u003eSyntheticBeanBuildItem\u003c/code\u003e and Quarkus extensions, you can\nseamlessly bridge the gap between traditional CDI and more specialized or dynamic bean registration\nrequirements.\u003c/p\u003e\n\u003cp\u003eIn the ever-evolving landscape of Java frameworks, Quarkus continues to stand out by offering\ninnovative solutions like synthetic beans, making it a compelling choice for modern, efficient, and\nflexible application development. Embrace the power of synthetic beans in Quarkus, and take your\ndependency injection to the next level!\u003c/p\u003e\n",
      "url": "https://iqnev.github.io/posts/exploring-synthetic-beans-in-quarkus-a-powerful-extension-mechanism/",
      "date_published": "11116-11-09T114:1111:00+03:00",
      "date_modified": "11116-11-09T114:1111:00+03:00",
      "author": {
        "name": "Calvin Tran",
        "url": "https://iqnev.github.io/"
      }
    },
    
    {
      "id": "4c0c620a7d2e99873f3b1e8dbf886066d9d07e07",
      "title": "Creating Custom Configuration in Quarkus Loaded from JSON File",
      "summary": "",
      "content_text": "Introduction Quarkus, a framework for building lightweight, fast, and efficient Java applications, offers developers the flexibility to create custom configurations loaded from JSON files. These custom configurations can be seamlessly integrated into your Quarkus application, enhancing its configurability and adaptability. To achieve this, Quarkus utilizes Eclipse MicroProfile Config ( MP-Config), with the SmallRye implementation providing the necessary tools. In this article, we\u0026rsquo;ll delve into the process of crafting custom configurations and loading them from JSON files within Quarkus, all while exploring the mechanics of SmallRye\u0026rsquo;s MP-Config implementation. Additionally, we\u0026rsquo;ll showcase the creation and registration of a custom ConfigSource and ConfigSourceFactory, which play a pivotal role in this configuration management approach.\nUnderstanding MicroProfile Config in Quarkus Quarkus internally relies on the SmallRye implementation of MP-Config. This implementation allows developers to incorporate Configuration Sources, which provide configuration data from various origins. These sources can be files with non-standard formats, or even data retrieved from a central repository. MP-Config ensures a deterministic ordering of configuration sources based on their ordinal values when multiple sources contain the same configuration key.\nSmallRye\u0026rsquo;s implementation of MP-Config facilitates the creation of new ConfigSources and ConfigSourceFactories. The ConfigSourceFactory has knowledge of all previously defined sources, enabling developers to read those values and pass them to a newly created ConfigSource. The registration of these custom sources and factories is accomplished through the Java ServiceLoader interface, with a specific file called io.smallrye.config.ConfigSourceFactory being placed in the META-INF/services/ directory. This file provides the fully qualified names of the custom sources and factories.\nImplementing a custom JSON Configuration To demonstrate the creation and registration of a custom ConfigSource and ConfigSourceFactory in Quarkus, we\u0026rsquo;ll focus on a practical example - an JsonConfigSource and JsonConfigSourceFactory pair. This custom configuration source allows you to read external JSON configuration files and integrate them into your Quarkus application.\nThe JsonConfigSource class is responsible for reading and providing configuration properties from a JSON file. It implements the ConfigSource interface and overrides several methods to interact with the Quarkus configuration system.\nHere is an overview of its key functionalities:\nReading a JSON file and parsing it into a JsonObject. Providing configuration properties, including handling default values. Specifying the source\u0026rsquo;s ordinal value. Assigning a unique name to the source, which will be used for registration. 1 2@Slf4j 3public class JsonConfigSource implements ConfigSource { 4 5 private final Map\u0026lt;String, ConfigValue\u0026gt; existingValues; 6 7 private JsonObject root; 8 9 public JsonConfigSource(final Map\u0026lt;String, ConfigValue\u0026gt; exProp) { 10 existingValues = exProp; 11 } 12 13 public void addJsonConfigurations(final ConfigValue config) { 14 final File file = new File(config.getValue()); 15 16 if (!file.canRead()) { 17 log.warn(\u0026#34;Can\u0026#39;t read config from \u0026#34; + file.getAbsolutePath() + \u0026#34;\u0026#34;); 18 } else { 19 try (final InputStream fis = new FileInputStream(file); 20 final JsonReader reader = Json.createReader(fis)) { 21 22 root = reader.readObject(); 23 } catch (final IOException ioe) { 24 log.warn(\u0026#34;Reading the config failed: \u0026#34; + ioe.getMessage()); 25 } 26 } 27 } 28 29 @Override 30 public Map\u0026lt;String, String\u0026gt; getProperties() { 31 32 final Map\u0026lt;String, String\u0026gt; props = new HashMap\u0026lt;\u0026gt;(); 33 final Set\u0026lt;Map.Entry\u0026lt;String, ConfigValue\u0026gt;\u0026gt; entries = existingValues.entrySet(); 34 for (final Map.Entry\u0026lt;String, ConfigValue\u0026gt; entry : entries) { 35 String newVal = getValue(entry.getKey()); 36 if (newVal == null) { 37 newVal = entry.getValue().getValue(); 38 } 39 props.put(entry.getKey(), newVal); 40 } 41 42 return props; 43 } 44 45 @Override 46 public Set\u0026lt;String\u0026gt; getPropertyNames() { 47 return existingValues.keySet(); 48 } 49 50 @Override 51 public int getOrdinal() { 52 return 270; 53 } 54 55 @Override 56 public String getValue(final String configKey) { 57 58 final JsonValue jsonValue = root.get(configKey); 59 60 if (jsonValue != null) { 61 return getStringValue(jsonValue); 62 } 63 64 if (existingValues.containsKey(configKey)) { 65 return existingValues.get(configKey).getValue(); 66 } else { 67 return null; 68 } 69 } 70 71 @Override 72 public String getName() { 73 return \u0026#34;EXTERNAL_JSON\u0026#34;; 74 } 75 76 private String getStringValue(final JsonValue jsonValue) { 77 if (jsonValue != null) { 78 final JsonValue.ValueType valueType = jsonValue.getValueType(); 79 80 if (valueType == JsonValue.ValueType.STRING) { 81 return ((JsonString) jsonValue).getString(); 82 } else if (valueType == JsonValue.ValueType.NUMBER) { 83 // Handle integer and floating-point numbers 84 return jsonValue.toString(); 85 } else if (valueType == JsonValue.ValueType.TRUE || valueType == JsonValue.ValueType.FALSE) { 86 // Handle boolean values 87 return Boolean.toString(jsonValue.getValueType() == JsonValue.ValueType.TRUE); 88 } else if (valueType == JsonValue.ValueType.NULL) { 89 // Handle null values 90 return null; 91 } 92 } 93 return null; 94 } 95} The JsonConfigSourceFactory class is a custom ConfigSourceFactory responsible for creating and configuring instances of the JsonConfigSource. It also defines a unique priority for this factory.\nHere is an overview of its key functionalities:\nRetrieving the path of the JSON configuration file from the Quarkus configuration. Building an instance of JsonConfigSource. Assigning a priority value to the factory. 1 2@Slf4j 3public class JsonConfigSourceFactory implements ConfigSourceFactory { 4 5 public static final String CONFIG_JSON_FILE = \u0026#34;config.json.file\u0026#34;; 6 7 @Override 8 public Iterable\u0026lt;ConfigSource\u0026gt; getConfigSources(final ConfigSourceContext configSourceContext) { 9 final ConfigValue value = configSourceContext.getValue(CONFIG_JSON_FILE); 10 11 if (value == null || value.getValue() == null) { 12 return Collections.emptyList(); 13 } 14 15 final Map\u0026lt;String, ConfigValue\u0026gt; exProp = new HashMap\u0026lt;\u0026gt;(); 16 final Iterator\u0026lt;String\u0026gt; stringIterator = configSourceContext.iterateNames(); 17 18 while (stringIterator.hasNext()) { 19 final String key = stringIterator.next(); 20 final ConfigValue cValue = configSourceContext.getValue(key); 21 exProp.put(key, cValue); 22 } 23 24 final JsonConfigSource configSource = new JsonConfigSource(exProp); 25 final List\u0026lt;ConfigValue\u0026gt; configValueList = List.of(value); 26 27 for (final ConfigValue config : configValueList) { 28 if (ConfigExists(config)) { 29 configSource.addJsonConfigurations(config); 30 } 31 } 32 33 return Collections.singletonList(configSource); 34 } 35 36 @Override 37 public OptionalInt getPriority() { 38 return OptionalInt.of(270); 39 } 40 41 private boolean ConfigExists(final ConfigValue config) { 42 43 if (config == null || config.getValue() == null) { 44 log.warn(\u0026#34;The given ConfigValue object is null\u0026#34;); 45 return false; 46 } else if (!(Files.exists(Path.of(config.getValue())))) { 47 return false; 48 } 49 50 return true; 51 } 52} Registration via ServiceLoader Both the JsonConfigSource and JsonConfigSourceFactory are registered with the Quarkus application through the Java ServiceLoader mechanism. A file named io.smallrye.config.ConfigSourceFactory is placed in the META-INF/services/ directory. This file contains the fully qualified name of the JsonConfigSourceFactory, enabling Quarkus to discover and use it.\nThe JSON file 1{ 2 \u0026#34;simple.service\u0026#34;: \u0026#34;pusher\u0026#34;, 3 \u0026#34;simple.source\u0026#34;: \u0026#34;source\u0026#34;, 4 \u0026#34;simple.destination\u0026#34;: \u0026#34;destination\u0026#34; 5} Define Your Configuration Interface 1 2@ConfigMapping(prefix = \u0026#34;simple\u0026#34;) 3public interface SimpleConfig { 4 5 @WithName(\u0026#34;source\u0026#34;) 6 String source(); 7 8 @WithName(\u0026#34;service\u0026#34;) 9 String service(); 10 11 @WithName(\u0026#34;destination\u0026#34;) 12 String destination(); 13} Conclusion Eclipse MicroProfile Config, in conjunction with the SmallRye implementation, empowers Quarkus developers to manage their application\u0026rsquo;s configuration efficiently. The ability to create and register custom ConfigSources and ConfigSourceFactories, as demonstrated with the JsonConfigSource and JsonConfigSourceFactory, extends the flexibility and utility of the framework. By following these guidelines, you can seamlessly integrate external configuration data, such as JSON files, into your Quarkus application, enhancing its configurability and adaptability.\nBy understanding these concepts and leveraging the power of MicroProfile Config, you can further optimize your Quarkus application\u0026rsquo;s configuration management and streamline the development process.\nThe full source code is available at Github\n",
      "content_html": "\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eQuarkus, a framework for building lightweight, fast, and efficient Java applications, offers\ndevelopers the flexibility to create custom configurations loaded from JSON files. These custom\nconfigurations can be seamlessly integrated into your Quarkus application, enhancing its\nconfigurability and adaptability. To achieve this, Quarkus utilizes Eclipse MicroProfile Config (\nMP-Config), with the SmallRye implementation providing the necessary tools. In this article, we\u0026rsquo;ll\ndelve into the process of crafting custom configurations and loading them from JSON files within\nQuarkus, all while exploring the mechanics of SmallRye\u0026rsquo;s MP-Config implementation. Additionally,\nwe\u0026rsquo;ll showcase the creation and registration of a custom ConfigSource and ConfigSourceFactory, which\nplay a pivotal role in this configuration management approach.\u003c/p\u003e\n\u003ch3 id=\"understanding-microprofile-config-in-quarkus\"\u003eUnderstanding MicroProfile Config in Quarkus\u003c/h3\u003e\n\u003cp\u003eQuarkus internally relies on the SmallRye implementation of MP-Config. This implementation allows\ndevelopers to incorporate Configuration Sources, which provide configuration data from various\norigins. These sources can be files with non-standard formats, or even data retrieved from a central\nrepository. MP-Config ensures a deterministic ordering of configuration sources based on their\nordinal values when multiple sources contain the same configuration key.\u003c/p\u003e\n\u003cp\u003eSmallRye\u0026rsquo;s implementation of MP-Config facilitates the creation of new ConfigSources and\nConfigSourceFactories. The ConfigSourceFactory has knowledge of all previously defined sources,\nenabling developers to read those values and pass them to a newly created ConfigSource. The\nregistration of these custom sources and factories is accomplished through the Java ServiceLoader\ninterface, with a specific file called \u003ccode\u003eio.smallrye.config.ConfigSourceFactory\u003c/code\u003e being placed in the\n\u003ccode\u003eMETA-INF/services/\u003c/code\u003e directory. This file provides the fully qualified names of the custom sources\nand\nfactories.\u003c/p\u003e\n\u003ch3 id=\"implementing-a-custom-json-configuration\"\u003eImplementing a custom JSON Configuration\u003c/h3\u003e\n\u003cp\u003eTo demonstrate the creation and registration of a custom \u003ccode\u003eConfigSource\u003c/code\u003e and \u003ccode\u003eConfigSourceFactory\u003c/code\u003e in\nQuarkus, we\u0026rsquo;ll focus on a practical example - an \u003ccode\u003eJsonConfigSource\u003c/code\u003e and \u003ccode\u003eJsonConfigSourceFactory\u003c/code\u003e\npair.\nThis custom configuration source allows you to read external JSON configuration files and integrate\nthem into your Quarkus application.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eJsonConfigSource\u003c/code\u003e class is responsible for reading and providing configuration properties from\na JSON file. It implements the \u003ccode\u003eConfigSource\u003c/code\u003e interface and overrides several methods to interact\nwith\nthe Quarkus configuration system.\u003c/p\u003e\n\u003cp\u003eHere is an overview of its key functionalities:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReading a JSON file and parsing it into a JsonObject.\u003c/li\u003e\n\u003cli\u003eProviding configuration properties, including handling default values.\u003c/li\u003e\n\u003cli\u003eSpecifying the source\u0026rsquo;s ordinal value.\u003c/li\u003e\n\u003cli\u003eAssigning a unique name to the source, which will be used for registration.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e@Slf4j\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eJsonConfigSource\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eimplements\u003c/span\u003e ConfigSource {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e Map\u0026lt;String, ConfigValue\u0026gt; existingValues;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e JsonObject root;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eJsonConfigSource\u003c/span\u003e(\u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e Map\u0026lt;String, ConfigValue\u0026gt; exProp) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e    existingValues = exProp;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eaddJsonConfigurations\u003c/span\u003e(\u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e ConfigValue config) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e File file = \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e File(config.getValue());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (!file.canRead()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e      log.warn(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;Can\u0026#39;t read config from \u0026#34;\u003c/span\u003e + file.getAbsolutePath() + \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\u003c/span\u003e\u003cspan\u003e    } \u003cspan style=\"color:#fc5fa3\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003etry\u003c/span\u003e (\u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e InputStream fis = \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e FileInputStream(file);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\u003c/span\u003e\u003cspan\u003e          \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e JsonReader reader = Json.createReader(fis)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\u003c/span\u003e\u003cspan\u003e        root = reader.readObject();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\u003c/span\u003e\u003cspan\u003e      } \u003cspan style=\"color:#fc5fa3\"\u003ecatch\u003c/span\u003e (\u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e IOException ioe) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\u003c/span\u003e\u003cspan\u003e        log.warn(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;Reading the config failed: \u0026#34;\u003c/span\u003e + ioe.getMessage());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\u003c/span\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\u003c/span\u003e\u003cspan\u003e  @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e Map\u0026lt;String, String\u0026gt; \u003cspan style=\"color:#41a1c0\"\u003egetProperties\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e Map\u0026lt;String, String\u0026gt; props = \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e HashMap\u0026lt;\u0026gt;();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e Set\u0026lt;Map.Entry\u0026lt;String, ConfigValue\u0026gt;\u0026gt; entries = existingValues.entrySet();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e Map.Entry\u0026lt;String, ConfigValue\u0026gt; entry : entries) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\u003c/span\u003e\u003cspan\u003e      String newVal = getValue(entry.getKey());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (newVal == \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\u003c/span\u003e\u003cspan\u003e        newVal = entry.getValue().getValue();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\u003c/span\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\u003c/span\u003e\u003cspan\u003e      props.put(entry.getKey(), newVal);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e41\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e42\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e props;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e43\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e44\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e45\u003c/span\u003e\u003cspan\u003e  @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e46\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e Set\u0026lt;String\u0026gt; \u003cspan style=\"color:#41a1c0\"\u003egetPropertyNames\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e47\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e existingValues.keySet();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e48\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e49\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e50\u003c/span\u003e\u003cspan\u003e  @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e51\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003egetOrdinal\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e52\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e 270;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e53\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e54\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e55\u003c/span\u003e\u003cspan\u003e  @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e56\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e String \u003cspan style=\"color:#41a1c0\"\u003egetValue\u003c/span\u003e(\u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e String configKey) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e57\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e58\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e JsonValue jsonValue = root.get(configKey);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e59\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e60\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (jsonValue != \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e61\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e getStringValue(jsonValue);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e62\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e63\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e64\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (existingValues.containsKey(configKey)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e65\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e existingValues.get(configKey).getValue();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e66\u003c/span\u003e\u003cspan\u003e    } \u003cspan style=\"color:#fc5fa3\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e67\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e68\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e69\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e70\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e71\u003c/span\u003e\u003cspan\u003e  @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e72\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e String \u003cspan style=\"color:#41a1c0\"\u003egetName\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e73\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;EXTERNAL_JSON\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e74\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e75\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e76\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e String \u003cspan style=\"color:#41a1c0\"\u003egetStringValue\u003c/span\u003e(\u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e JsonValue jsonValue) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e77\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (jsonValue != \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e78\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e JsonValue.ValueType valueType = jsonValue.getValueType();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e79\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e80\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (valueType == JsonValue.ValueType.STRING) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e81\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e ((JsonString) jsonValue).getString();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e82\u003c/span\u003e\u003cspan\u003e      } \u003cspan style=\"color:#fc5fa3\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (valueType == JsonValue.ValueType.NUMBER) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e83\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#6c7986\"\u003e// Handle integer and floating-point numbers\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e84\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e jsonValue.toString();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e85\u003c/span\u003e\u003cspan\u003e      } \u003cspan style=\"color:#fc5fa3\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (valueType == JsonValue.ValueType.TRUE || valueType == JsonValue.ValueType.FALSE) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e86\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#6c7986\"\u003e// Handle boolean values\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e87\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e Boolean.toString(jsonValue.getValueType() == JsonValue.ValueType.TRUE);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e88\u003c/span\u003e\u003cspan\u003e      } \u003cspan style=\"color:#fc5fa3\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (valueType == JsonValue.ValueType.NULL) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e89\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#6c7986\"\u003e// Handle null values\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e90\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e91\u003c/span\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e92\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e93\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e94\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e95\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003eJsonConfigSourceFactory\u003c/code\u003e class is a custom \u003ccode\u003eConfigSourceFactory\u003c/code\u003e responsible for creating and\nconfiguring instances of the \u003ccode\u003eJsonConfigSource\u003c/code\u003e. It also defines a unique priority for this factory.\u003c/p\u003e\n\u003cp\u003eHere is an overview of its key functionalities:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRetrieving the path of the JSON configuration file from the Quarkus configuration.\u003c/li\u003e\n\u003cli\u003eBuilding an instance of JsonConfigSource.\u003c/li\u003e\n\u003cli\u003eAssigning a priority value to the factory.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e@Slf4j\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eJsonConfigSourceFactory\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eimplements\u003c/span\u003e ConfigSourceFactory {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e String CONFIG_JSON_FILE = \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;config.json.file\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e  @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e Iterable\u0026lt;ConfigSource\u0026gt; \u003cspan style=\"color:#41a1c0\"\u003egetConfigSources\u003c/span\u003e(\u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e ConfigSourceContext configSourceContext) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e ConfigValue value = configSourceContext.getValue(CONFIG_JSON_FILE);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (value == \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e || value.getValue() == \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e Collections.emptyList();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e Map\u0026lt;String, ConfigValue\u0026gt; exProp = \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e HashMap\u0026lt;\u0026gt;();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e Iterator\u0026lt;String\u0026gt; stringIterator = configSourceContext.iterateNames();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ewhile\u003c/span\u003e (stringIterator.hasNext()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e String key = stringIterator.next();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e ConfigValue cValue = configSourceContext.getValue(key);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\u003c/span\u003e\u003cspan\u003e      exProp.put(key, cValue);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e JsonConfigSource configSource = \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e JsonConfigSource(exProp);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e List\u0026lt;ConfigValue\u0026gt; configValueList = List.of(value);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e ConfigValue config : configValueList) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (ConfigExists(config)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\u003c/span\u003e\u003cspan\u003e        configSource.addJsonConfigurations(config);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\u003c/span\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e Collections.singletonList(configSource);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\u003c/span\u003e\u003cspan\u003e  @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e OptionalInt \u003cspan style=\"color:#41a1c0\"\u003egetPriority\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e OptionalInt.of(270);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e41\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eboolean\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eConfigExists\u003c/span\u003e(\u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e ConfigValue config) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e42\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e43\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (config == \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e || config.getValue() == \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e44\u003c/span\u003e\u003cspan\u003e      log.warn(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;The given ConfigValue object is null\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e45\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003efalse\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e46\u003c/span\u003e\u003cspan\u003e    } \u003cspan style=\"color:#fc5fa3\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (!(Files.exists(Path.of(config.getValue())))) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e47\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003efalse\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e48\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e49\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e50\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003etrue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e51\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e52\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"registration-via-serviceloader\"\u003eRegistration via ServiceLoader\u003c/h3\u003e\n\u003cp\u003eBoth the \u003ccode\u003eJsonConfigSource\u003c/code\u003e and \u003ccode\u003eJsonConfigSourceFactory\u003c/code\u003e are registered with the Quarkus\napplication through the Java ServiceLoader mechanism. A file\nnamed \u003ccode\u003eio.smallrye.config.ConfigSourceFactory\u003c/code\u003e is placed in the \u003ccode\u003eMETA-INF/services/\u003c/code\u003e directory. This\nfile contains the fully qualified name of the \u003ccode\u003eJsonConfigSourceFactory\u003c/code\u003e, enabling Quarkus to\ndiscover\nand use it.\u003c/p\u003e\n\u003ch3 id=\"the-json-file\"\u003eThe JSON file\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e  \u0026#34;simple.service\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;pusher\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e  \u0026#34;simple.source\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;source\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e  \u0026#34;simple.destination\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;destination\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"define-your-configuration-interface\"\u003eDefine Your Configuration Interface\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e@ConfigMapping(prefix = \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;simple\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eSimpleConfig\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e  @WithName(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;source\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e  String \u003cspan style=\"color:#41a1c0\"\u003esource\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e  @WithName(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;service\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e  String \u003cspan style=\"color:#41a1c0\"\u003eservice\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e  @WithName(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;destination\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e  String \u003cspan style=\"color:#41a1c0\"\u003edestination\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eEclipse MicroProfile Config, in conjunction with the SmallRye implementation, empowers Quarkus\ndevelopers to manage their application\u0026rsquo;s configuration efficiently. The ability to create and\nregister custom \u003ccode\u003eConfigSources\u003c/code\u003e and \u003ccode\u003eConfigSourceFactories\u003c/code\u003e, as demonstrated with\nthe \u003ccode\u003eJsonConfigSource\u003c/code\u003e\nand \u003ccode\u003eJsonConfigSourceFactory\u003c/code\u003e, extends the flexibility and utility of the framework. By following\nthese guidelines, you can seamlessly integrate external configuration data, such as JSON files, into\nyour Quarkus application, enhancing its configurability and adaptability.\u003c/p\u003e\n\u003cp\u003eBy understanding these concepts and leveraging the power of MicroProfile Config, you can further\noptimize your Quarkus application\u0026rsquo;s configuration management and streamline the development process.\u003c/p\u003e\n\u003cp\u003eThe full source code is available\nat \u003ca href=\"https://github.com/iqnev/quarkus-load-configuration-from-externa-json-file\" title=\"Title\"\u003eGithub\u003c/a\u003e\u003c/p\u003e\n",
      "url": "https://iqnev.github.io/posts/load-configuration-from-json-file/",
      "date_published": "14106-14-09T100:1414:00+03:00",
      "date_modified": "14106-14-09T100:1414:00+03:00",
      "author": {
        "name": "Calvin Tran",
        "url": "https://iqnev.github.io/"
      }
    },
    
    {
      "id": "d8121afede58861489c854fcdd26839c8a105ec6",
      "title": "Extending Quarkus: When and How to Write Your Own Extensions",
      "summary": "",
      "content_text": "Quarkus, with its innovative extension framework, offers developers a powerful way to integrate various technologies seamlessly into their applications. These extensions simplify configuration, enable dependency injection, and optimize performance, making it an attractive option for Java developers. However, before diving into creating your own Quarkus extension, it\u0026rsquo;s crucial to understand when it' s necessary and how to do it effectively.\nWhen to Create a Quarkus Extension Complex Integrations: If you\u0026rsquo;re working with complex frameworks like ORM mappers, reactive clients, or data access libraries, creating an extension can help manage the intricacies of configuration and dependency management. Extensions simplify the use of these frameworks in Quarkus applications.\nPerformance Optimization: Quarkus extensions are designed to align with Quarkus\u0026rsquo; native compilation, resulting in applications that start swiftly and have minimal memory footprints. By creating an extension, you can leverage Quarkus\u0026rsquo; build-time optimization abilities to scan dependencies and generate configuration early, thus avoiding startup delays.\nDeveloper Experience Enhancement: Extensions can significantly enhance the developer experience. They enable live reloading, CLI extensions, templating, and more, streamlining the development process. If you want to provide a seamless and efficient development environment for your team, extensions can help achieve this goal.\nAPI Hardening: If you\u0026rsquo;re building APIs or libraries intended to be used by other Quarkus developers, extensions provide an excellent way to harden your APIs and ensure they work seamlessly within the Quarkus ecosystem.\nHowever, extensions may not always be the best approach. For simpler needs, such as sharing utility code and glue logic between components, a basic JAR file might suffice without the overhead of creating an extension. If your integration is app-specific and unlikely to be reused elsewhere, a basic JAR could be a more straightforward solution. Moreover, if you need full control over dependency versions and don\u0026rsquo;t want to adhere to Quarkus\u0026rsquo; BOM (Bill of Materials) for dependency management, a JAR may be a better choice. Finally, if your code needs to work across multiple JVM frameworks, such as Spring and Micronaut, avoiding tight coupling to Quarkus may be preferable.\nCreating Quarkus extensions can be complex, often requiring in-depth knowledge of Quarkus internal workings. However, for many scenarios, creating a standard JAR can be sufficient. This JAR, when indexed by Jandex, can be seamlessly discovered by Quarkus during build time. While Quarkus extensions provide a range of advantages, including superior performance and developer productivity, they may not always be necessary.\nQuarkus unique approach to moving work to build time, rather than runtime, is at the core of its fast startup times and low memory footprint. This philosophy extends to Quarkus extensions, which can leverage these build-time optimizations. Even if you\u0026rsquo;re not primarily concerned with fast boot times, the benefits of creating your extensions extend to simplifying configurations, extending the Quarkus CLI, and integrating with Quarkus\u0026rsquo;s Dev Mode.\nCreating your Quarkus extensions doesn\u0026rsquo;t have to be overly complicated. With the right approach and a clear understanding of your project\u0026rsquo;s needs, you can solve complex problems efficiently. Extensions offer a flexible and powerful way to enhance your Quarkus applications and make them more efficient and developer-friendly.\nCreating a Quarkus Extension When you decide that creating a Quarkus extension is the right approach, it\u0026rsquo;s essential to understand the structural components of an extension:\nRuntime Section: This section contains the core business logic implemented as beans, services, or other components that integrate with Quarkus; Deployment Section: The deployment section handles build-time augmentation and configuration. It ensures that your extension integrates seamlessly with Quarkus\u0026rsquo; optimization processes; Descriptor: A descriptor declares metadata about your extension, including its name, parameters, compatibility information, and more; Documentation: Comprehensive documentation should accompany your extension. It guides users on how to use and configure your extension effectively. Anatomy of the Quarkus Extension Consider a scenario where you want to create a custom caching extension for Quarkus. This extension will allow developers to easily integrate caching functionality into their Quarkus applications.\nRuntime Section:\nIn this section, you would implement the core caching functionality using Java code. This might include methods for caching data, retrieving cached data, and managing cache expiration. For example, you might have a CustomCacheService class with methods like put(key, value), get(key), and evict(key) to handle caching operations. Deployment Section:\nThe deployment section is responsible for build-time optimization. Here, you can specify how the caching configuration should be generated during the build process. For our caching extension, this section might include instructions on how to scan for cached objects in the application code and generate cache configuration. Descriptor:\nThe descriptor file (custom-cache-extension.yaml) provides metadata about your extension. It includes information like the extension\u0026rsquo;s name, version, compatibility with Quarkus, and configuration parameters. For instance, your descriptor might specify that the extension is named \u0026quot; custom-cache-extension,\u0026quot; is compatible with Quarkus 2.0+, and requires a cache timeout configuration parameter. Documentation:\nComprehensive documentation should accompany your extension. It guides users on how to use the custom caching extension effectively within their Quarkus applications. Documentation should include examples of how to configure the cache, integrate it into Quarkus services, and manage cached data. Additionally, it should provide best practices for cache utilization. By following this structure, your custom caching extension becomes a valuable tool for Quarkus developers. They can easily incorporate caching into their applications, improving performance and optimizing resource usage.\nRuntime module:\n1class CustomCacheService { 2 3 // Core caching functionality using Java code 4 public void put(String key, Object value) { 5 // Cache data implementation 6 } 7 8 public Object get(String key) { 9 // Retrieve cached data implementation 10 } 11 12 public void evict(String key) { 13 // Evict cached data implementation 14 } 15} Deployment module:\n1class CustomCacheProcessor { 2 @BuildStep 3 FeatureBuildItem feature() { 4 // This declares the custom cache extension as a feature 5 return new FeatureBuildItem(\u0026#34;custom-cache\u0026#34;); 6 } 7} Descriptor file: custom-cache-extension.yaml\n1extension: 2name: custom-cache-extension 3metadata: 4 short-name: \u0026#34;resteasy-reactive\u0026#34; 5 keywords: 6 - \u0026#34;jaxrs\u0026#34; 7 - \u0026#34;web\u0026#34; 8 - \u0026#34;rest\u0026#34; 9 categories: 10 - \u0026#34;web\u0026#34; 11 - \u0026#34;reactive\u0026#34; 12 status: \u0026#34;stable\u0026#34; 13 guide: \u0026#34;https://quarkus.io/guides/resteasy-reactive\u0026#34; In conclusion, whether to create a Quarkus extension depends on your project\u0026rsquo;s specific needs and objectives. Quarkus extensions are powerful tools for deep integration, performance optimization, and enhancing the developer experience. However, it\u0026rsquo;s essential to weigh the trade-offs and consider whether a simpler solution, like a standard JAR library, might better suit your use case. By understanding when and how to create Quarkus extensions effectively, you can make informed decisions and leverage the full potential of this innovative framework.\n",
      "content_html": "\u003cp\u003eQuarkus, with its innovative extension framework, offers developers a powerful way to integrate\nvarious technologies seamlessly into their applications.\nThese extensions simplify configuration, enable dependency injection, and optimize performance,\nmaking it an attractive option for Java developers.\nHowever, before diving into creating your own Quarkus extension, it\u0026rsquo;s crucial to understand when it'\ns necessary and how to do it effectively.\u003c/p\u003e\n\u003ch2 id=\"when-to-create-a-quarkus-extension\"\u003eWhen to Create a Quarkus Extension\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eComplex Integrations: If you\u0026rsquo;re working with complex frameworks like ORM mappers, reactive\nclients, or data access libraries, creating an extension can help manage the intricacies of\nconfiguration and dependency management.\nExtensions simplify the use of these frameworks in Quarkus applications.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePerformance Optimization: Quarkus extensions are designed to align with Quarkus\u0026rsquo; native\ncompilation, resulting in applications that start swiftly and have minimal memory footprints.\nBy creating an extension, you can leverage Quarkus\u0026rsquo; build-time optimization abilities to scan\ndependencies and generate configuration early, thus avoiding startup delays.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDeveloper Experience Enhancement: Extensions can significantly enhance the developer experience.\nThey enable live reloading, CLI extensions, templating, and more, streamlining the development\nprocess.\nIf you want to provide a seamless and efficient development environment for your team, extensions\ncan help achieve this goal.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAPI Hardening: If you\u0026rsquo;re building APIs or libraries intended to be used by other Quarkus\ndevelopers, extensions provide an excellent way to harden your\nAPIs and ensure they work seamlessly within the Quarkus ecosystem.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eHowever, extensions may not always be the best approach. For simpler needs, such as sharing utility\ncode and glue logic between components, a basic JAR file might\nsuffice without the overhead of creating an extension. If your integration is app-specific and\nunlikely to be reused elsewhere, a basic JAR could be a more straightforward solution. Moreover, if\nyou need full control over dependency versions and don\u0026rsquo;t want to adhere to Quarkus\u0026rsquo; BOM (Bill of\nMaterials) for dependency management, a JAR may be a better choice. Finally, if your code needs to\nwork across multiple JVM frameworks, such as Spring and Micronaut,\navoiding tight coupling to Quarkus may be preferable.\u003c/p\u003e\n\u003cp\u003eCreating Quarkus extensions can be complex, often requiring in-depth knowledge of Quarkus internal\nworkings. However, for many scenarios, creating a standard JAR can be sufficient. This JAR, when\nindexed by Jandex, can be seamlessly discovered by Quarkus during build time. While Quarkus\nextensions provide a range of advantages, including superior performance and developer productivity,\nthey may not always be necessary.\u003c/p\u003e\n\u003cp\u003eQuarkus unique approach to moving work to build time, rather than runtime, is at the core of its\nfast startup times and low memory footprint. This philosophy extends to Quarkus extensions, which\ncan leverage these build-time optimizations. Even if you\u0026rsquo;re not primarily concerned with fast boot\ntimes, the benefits of creating your extensions extend to simplifying configurations, extending the\nQuarkus CLI, and integrating with Quarkus\u0026rsquo;s Dev Mode.\u003c/p\u003e\n\u003cp\u003eCreating your Quarkus extensions doesn\u0026rsquo;t have to be overly complicated. With the right approach and\na clear understanding of your project\u0026rsquo;s needs, you can solve complex problems efficiently.\nExtensions offer a flexible and powerful way to enhance your Quarkus applications and make them more\nefficient and developer-friendly.\u003c/p\u003e\n\u003ch2 id=\"creating-a-quarkus-extension\"\u003eCreating a Quarkus Extension\u003c/h2\u003e\n\u003cp\u003eWhen you decide that creating a Quarkus extension is the right approach, it\u0026rsquo;s essential to\nunderstand the structural components of an extension:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRuntime Section:\u003c/strong\u003e This section contains the core business logic implemented as beans, services,\nor other components that integrate with Quarkus;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDeployment Section:\u003c/strong\u003e The deployment section handles build-time augmentation and configuration.\nIt ensures that your extension integrates seamlessly with Quarkus\u0026rsquo; optimization processes;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDescriptor:\u003c/strong\u003e A descriptor declares metadata about your extension, including its name,\nparameters, compatibility information, and more;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDocumentation:\u003c/strong\u003e Comprehensive documentation should accompany your extension. It guides users on\nhow to use and configure your extension effectively.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"anatomy-of-the-quarkus-extension\"\u003eAnatomy of the Quarkus Extension\u003c/h2\u003e\n\u003cp\u003eConsider a scenario where you want to create a custom caching extension for Quarkus. This extension\nwill allow developers to easily integrate caching functionality into their Quarkus applications.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eRuntime Section:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIn this section, you would implement the core caching functionality using Java code. This\nmight include methods for caching data, retrieving cached data, and managing cache expiration.\u003c/li\u003e\n\u003cli\u003eFor example, you might have a \u003ccode\u003eCustomCacheService\u003c/code\u003e class with methods\nlike \u003ccode\u003eput(key, value)\u003c/code\u003e, \u003ccode\u003eget(key)\u003c/code\u003e, and \u003ccode\u003eevict(key)\u003c/code\u003e to handle caching operations.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDeployment Section:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe deployment section is responsible for build-time optimization. Here, you can specify how\nthe caching configuration should be generated during the build process.\u003c/li\u003e\n\u003cli\u003eFor our caching extension, this section might include instructions on how to scan for cached\nobjects in the application code and generate cache configuration.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDescriptor:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe descriptor file (\u003ccode\u003ecustom-cache-extension.yaml\u003c/code\u003e) provides metadata about your extension. It\nincludes information like the extension\u0026rsquo;s name, version, compatibility with Quarkus, and\nconfiguration parameters.\u003c/li\u003e\n\u003cli\u003eFor instance, your descriptor might specify that the extension is named \u0026quot;\ncustom-cache-extension,\u0026quot; is compatible with Quarkus 2.0+, and requires a cache timeout\nconfiguration parameter.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDocumentation:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eComprehensive documentation should accompany your extension. It guides users on how to use the\ncustom caching extension effectively within their Quarkus applications.\u003c/li\u003e\n\u003cli\u003eDocumentation should include examples of how to configure the cache, integrate it into Quarkus\nservices, and manage cached data. Additionally, it should provide best practices for cache\nutilization.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eBy following this structure, your custom caching extension becomes a valuable tool for Quarkus\ndevelopers. They can easily incorporate caching into their applications, improving performance and\noptimizing resource usage.\u003c/p\u003e\n\u003cp\u003eRuntime module:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eCustomCacheService\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#6c7986\"\u003e// Core caching functionality using Java code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eput\u003c/span\u003e(String key, Object value) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#6c7986\"\u003e// Cache data implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e Object \u003cspan style=\"color:#41a1c0\"\u003eget\u003c/span\u003e(String key) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#6c7986\"\u003e// Retrieve cached data implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eevict\u003c/span\u003e(String key) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#6c7986\"\u003e// Evict cached data implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eDeployment module:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eCustomCacheProcessor\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e    @BuildStep\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e    FeatureBuildItem \u003cspan style=\"color:#41a1c0\"\u003efeature\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#6c7986\"\u003e// This declares the custom cache extension as a feature\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e FeatureBuildItem(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;custom-cache\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eDescriptor file: \u003ccode\u003ecustom-cache-extension.yaml\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003eextension:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003ename: custom-cache-extension\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003emetadata:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e    short-name: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;resteasy-reactive\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e    keywords:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e    - \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;jaxrs\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e    - \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;web\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e    - \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;rest\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e    categories:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e    - \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;web\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e    - \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;reactive\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e    status: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;stable\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e    guide: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;https://quarkus.io/guides/resteasy-reactive\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn conclusion, whether to create a Quarkus extension depends on your project\u0026rsquo;s specific needs and\nobjectives.\nQuarkus extensions are powerful tools for deep integration, performance optimization, and enhancing\nthe developer experience.\nHowever, it\u0026rsquo;s essential to weigh the trade-offs and consider whether a simpler solution, like a\nstandard JAR library, might better suit your use case.\nBy understanding when and how to create Quarkus extensions effectively, you can make informed\ndecisions and leverage the full potential of this innovative framework.\u003c/p\u003e\n",
      "url": "https://iqnev.github.io/posts/when-and-how-to-write-your-own-extensions/",
      "date_published": "8106-08-09T1029:88:00+03:00",
      "date_modified": "8106-08-09T1029:88:00+03:00",
      "author": {
        "name": "Calvin Tran",
        "url": "https://iqnev.github.io/"
      }
    },
    
    {
      "id": "497df46942fdef9737dcec4d8e5c01833016c78e",
      "title": "Demystifying Quarkus Extension Development: Jandex vs. AdditionalBeanBuildItem",
      "summary": "",
      "content_text": "Welcome to a comprehensive exploration of two key aspects in Quarkus extension development: Jandex and AdditionalBeanBuildItem. This article aims to elucidate the differences between these approaches, offering insights into their roles, applications, and the intricate interplay between them. By the end, you\u0026rsquo;ll have a clear understanding of how to wield these tools effectively in your Quarkus extensions.\n1. Jandex: Automatic Bean Discovery and Indexing Understanding Jandex and Its Role: In the realm of Quarkus extensions, beans are the building blocks of functionality, and Contexts and Dependency Injection (CDI) is the mechanism that governs their management. Jandex, a potent tool in the Quarkus arsenal, facilitates automatic bean discovery and indexing.\nHow Jandex Indexing Works: When the Jandex plugin is integrated into your Quarkus extension, it sweeps through all application classes, creating a comprehensive index file laden with metadata. This file offers an organized snapshot of class metadata, annotations, inheritance hierarchies, and interfaces. It acts as a centralized repository of class information.\nThe Role of Jandex in CDI: However, Jandex\u0026rsquo;s role doesn\u0026rsquo;t extend to direct CDI bean discovery. Instead, it supplies information to the CDI container. During the container\u0026rsquo;s initiation, it delves into the Jandex index to identify potential beans and the annotations associated with them. This enables the CDI container to curate the beans available for injection and other CDI functionalities.\nExample: Automatic Bean Discovery with Jandex: Imagine creating a custom Quarkus extension. By annotating a class with CDI-specific annotations like @ApplicationScoped, Jandex, via its indexing prowess, effortlessly identifies and makes these classes available for CDI. This harmonious integration streamlines the extension process and ensures precise bean identification.\n2. AdditionalIndexedClassesBuildItem: Explicit Jandex Indexing Understanding AdditionalIndexedClassesBuildItem: In cases where you seek more control over class indexing, the AdditionalIndexedClassesBuildItem emerges as a valuable tool. It empowers you to explicitly augment the Jandex index with classes that might otherwise remain unindexed.\nWhen to Use AdditionalIndexedClassesBuildItem: This tool is particularly useful when classes outside of typical bean discovery need to be indexed for other purposes. These classes might belong to third-party libraries or external tools requiring metadata access. By leveraging AdditionalIndexedClassesBuildItem, you guarantee proper indexing and metadata availability.\nUsage of AdditionalIndexedClassesBuildItem: By providing specific class names to AdditionalIndexedClassesBuildItem\u0026rsquo;s constructor, you precisely dictate which classes receive metadata indexing. Regardless of annotations or interfaces, you exercise control over the indexing process.\nExample: Explicitly Indexing Custom Configuration Classes: Imagine crafting an extension that requires metadata access to configuration classes from diverse sources. These classes may not boast CDI annotations, but their metadata remains vital. Through AdditionalIndexedClassesBuildItem, you secure their inclusion in the Jandex index, ensuring accessible metadata for your extension.\n3. AdditionalBeanBuildItem: Explicit Bean Registration Understanding AdditionalBeanBuildItem: While Jandex handles automatic bean discovery, you might require a more involved approach. This is where AdditionalBeanBuildItem steps in, empowering you to explicitly register classes as CDI beans.\nWhen to Use AdditionalBeanBuildItem: Custom utility classes, third-party libraries, or unconventional beans might necessitate inclusion in the CDI context. By embracing AdditionalBeanBuildItem, you enforce bean treatment irrespective of annotations or auto-discovery.\nUsage of AdditionalBeanBuildItem: Through AdditionalBeanBuildItem, you specify class names to be registered as beans. This flexibility allows you to seamlessly incorporate custom beans essential to your extension\u0026rsquo;s functionality.\nExample: Registering Custom Utility Classes as CDI Beans: Imagine building an extension that furnishes additional error handling utilities. These utilities might lack CDI annotations but require injection capabilities. AdditionalBeanBuildItem facilitates explicit registration of these utilities as CDI beans, amplifying their accessibility.\n4. Combining Approaches: Using Both Jandex and AdditionalBeanBuildItem Advantages of Combining Approaches: Harnessing the strengths of both Jandex and AdditionalBeanBuildItem offers strategic leverage. This hybrid approach strikes a balance between automated discovery and explicit control, granting you the power to cherry-pick beans while enjoying default discovery benefits.\nPotential Issues and Solutions: The synergy between these approaches is powerful, but vigilance is essential to avert duplicate bean registrations. Overlapping registrations between automatic Jandex indexing and explicit AdditionalBeanBuildItem inclusion can lead to conflicts. Careful coordination ensures seamless coexistence.\n5. Native Build Considerations: Impact of Jandex and AdditionalBeanBuildItem Jandex and Native Build: Understand that GraalVM\u0026rsquo;s native build process doesn\u0026rsquo;t engage directly with the Jandex index. Native build concentrates on compiling the Java application into a native binary, leveraging compiled Java classes and dependencies.\nAdditionalBeanBuildItem and Native Build: Similarly, native build isn\u0026rsquo;t heavily impacted by AdditionalBeanBuildItem\u0026rsquo;s presence or absence. Bean registration doesn\u0026rsquo;t significantly alter native build outcomes, which center on compiling and optimizing the application into a native binary.\nConclusion: Navigating Jandex and AdditionalBeanBuildItem\nThrough this journey, the nuances of Jandex and AdditionalBeanBuildItem have been unraveled. Jandex\u0026rsquo;s role in metadata provision and CDI\u0026rsquo;s execution has been clarified, alongside AdditionalBeanBuildItem\u0026rsquo;s explicit bean registration. Remember, Jandex doesn\u0026rsquo;t automatically transform classes into CDI beans; the CDI container is pivotal. Leverage these tools strategically, aligning choices with your extension\u0026rsquo;s demands for seamless integration in Quarkus\u0026rsquo; CDI framework.\n",
      "content_html": "\u003cp\u003eWelcome to a comprehensive exploration of two key aspects in Quarkus extension development: Jandex\nand AdditionalBeanBuildItem.\nThis article aims to elucidate the differences between these approaches, offering insights into\ntheir roles, applications, and the\nintricate interplay between them. By the end, you\u0026rsquo;ll have a clear understanding of how to wield\nthese tools effectively in your Quarkus\nextensions.\u003c/p\u003e\n\u003ch2 id=\"1-jandex-automatic-bean-discovery-and-indexing\"\u003e1. Jandex: Automatic Bean Discovery and Indexing\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eUnderstanding Jandex and Its Role:\u003c/strong\u003e\nIn the realm of Quarkus extensions, beans are the building blocks of functionality, and Contexts and\nDependency Injection (CDI) is\nthe mechanism that governs their management. Jandex, a potent tool in the Quarkus arsenal,\nfacilitates automatic bean discovery and indexing.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eHow Jandex Indexing Works:\u003c/strong\u003e\nWhen the Jandex plugin is integrated into your Quarkus extension, it sweeps through all application\nclasses, creating a comprehensive\nindex file laden with metadata. This file offers an organized snapshot of class metadata,\nannotations, inheritance hierarchies, and\ninterfaces. It acts as a centralized repository of class information.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThe Role of Jandex in CDI:\u003c/strong\u003e\nHowever, Jandex\u0026rsquo;s role doesn\u0026rsquo;t extend to direct CDI bean discovery. Instead, it supplies information\nto the CDI container. During the container\u0026rsquo;s initiation, it delves into the Jandex index to identify\npotential beans and the annotations associated with them. This enables the CDI container to curate\nthe beans available for injection and other CDI functionalities.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample: Automatic Bean Discovery with Jandex:\u003c/strong\u003e\nImagine creating a custom Quarkus extension. By annotating a class with CDI-specific annotations\nlike \u003ccode\u003e@ApplicationScoped\u003c/code\u003e,\nJandex, via its indexing prowess, effortlessly identifies and makes these classes available for CDI.\nThis harmonious integration\nstreamlines the extension process and ensures precise bean identification.\u003c/p\u003e\n\u003ch2 id=\"2-additionalindexedclassesbuilditem-explicit-jandex-indexing\"\u003e2. AdditionalIndexedClassesBuildItem: Explicit Jandex Indexing\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eUnderstanding AdditionalIndexedClassesBuildItem:\u003c/strong\u003e\nIn cases where you seek more control over class indexing, the \u003ccode\u003eAdditionalIndexedClassesBuildItem\u003c/code\u003e\nemerges as a valuable tool.\nIt empowers you to explicitly augment the Jandex index with classes that might otherwise remain\nunindexed.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWhen to Use AdditionalIndexedClassesBuildItem:\u003c/strong\u003e\nThis tool is particularly useful when classes outside of typical bean discovery need to be indexed\nfor other purposes.\nThese classes might belong to third-party libraries or external tools requiring metadata access.\nBy leveraging \u003ccode\u003eAdditionalIndexedClassesBuildItem\u003c/code\u003e, you guarantee proper indexing and metadata\navailability.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUsage of AdditionalIndexedClassesBuildItem:\u003c/strong\u003e\nBy providing specific class names to AdditionalIndexedClassesBuildItem\u0026rsquo;s constructor, you precisely\ndictate which classes receive metadata\nindexing. Regardless of annotations or interfaces, you exercise control over the indexing process.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample: Explicitly Indexing Custom Configuration Classes:\u003c/strong\u003e\nImagine crafting an extension that requires metadata access to configuration classes from diverse\nsources.\nThese classes may not boast CDI annotations, but their metadata remains vital.\nThrough \u003ccode\u003eAdditionalIndexedClassesBuildItem\u003c/code\u003e, you secure their inclusion in the Jandex index,\nensuring accessible metadata for your extension.\u003c/p\u003e\n\u003ch2 id=\"3-additionalbeanbuilditem-explicit-bean-registration\"\u003e3. AdditionalBeanBuildItem: Explicit Bean Registration\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eUnderstanding AdditionalBeanBuildItem:\u003c/strong\u003e\nWhile Jandex handles automatic bean discovery, you might require a more involved approach. This is\nwhere AdditionalBeanBuildItem steps in,\nempowering you to explicitly register classes as CDI beans.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWhen to Use AdditionalBeanBuildItem:\u003c/strong\u003e\nCustom utility classes, third-party libraries, or unconventional beans might necessitate inclusion\nin the CDI context.\nBy embracing \u003ccode\u003eAdditionalBeanBuildItem\u003c/code\u003e, you enforce bean treatment irrespective of annotations or\nauto-discovery.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUsage of AdditionalBeanBuildItem:\u003c/strong\u003e\nThrough \u003ccode\u003eAdditionalBeanBuildItem\u003c/code\u003e, you specify class names to be registered as beans. This\nflexibility allows you to\nseamlessly incorporate custom beans essential to your extension\u0026rsquo;s functionality.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample: Registering Custom Utility Classes as CDI Beans:\u003c/strong\u003e\nImagine building an extension that furnishes additional error handling utilities. These utilities\nmight lack CDI annotations\nbut require injection capabilities. \u003ccode\u003eAdditionalBeanBuildItem\u003c/code\u003e facilitates explicit registration of\nthese utilities as CDI beans,\namplifying their accessibility.\u003c/p\u003e\n\u003ch2 id=\"4-combining-approaches-using-both-jandex-and-additionalbeanbuilditem\"\u003e4. Combining Approaches: Using Both Jandex and AdditionalBeanBuildItem\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eAdvantages of Combining Approaches:\u003c/strong\u003e\nHarnessing the strengths of both Jandex and \u003ccode\u003eAdditionalBeanBuildItem\u003c/code\u003e offers strategic leverage.\nThis hybrid approach strikes a\nbalance between automated discovery and explicit control, granting you the power to cherry-pick\nbeans while enjoying default discovery\nbenefits.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePotential Issues and Solutions:\u003c/strong\u003e\nThe synergy between these approaches is powerful, but vigilance is essential to avert duplicate bean\nregistrations.\nOverlapping registrations between automatic Jandex indexing and explicit \u003ccode\u003eAdditionalBeanBuildItem\u003c/code\u003e\ninclusion can lead to conflicts.\nCareful coordination ensures seamless coexistence.\u003c/p\u003e\n\u003ch2 id=\"5-native-build-considerations-impact-of-jandex-and-additionalbeanbuilditem\"\u003e5. Native Build Considerations: Impact of Jandex and AdditionalBeanBuildItem\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eJandex and Native Build:\u003c/strong\u003e\nUnderstand that GraalVM\u0026rsquo;s native build process doesn\u0026rsquo;t engage directly with the Jandex index. Native\nbuild concentrates on compiling\nthe Java application into a native binary, leveraging compiled Java classes and dependencies.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAdditionalBeanBuildItem and Native Build:\u003c/strong\u003e\nSimilarly, native build isn\u0026rsquo;t heavily impacted by AdditionalBeanBuildItem\u0026rsquo;s presence or absence.\nBean registration doesn\u0026rsquo;t significantly\nalter native build outcomes, which center on compiling and optimizing the application into a native\nbinary.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConclusion: Navigating Jandex and AdditionalBeanBuildItem\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThrough this journey, the nuances of Jandex and \u003ccode\u003eAdditionalBeanBuildItem\u003c/code\u003e have been unraveled.\nJandex\u0026rsquo;s role in metadata provision\nand CDI\u0026rsquo;s execution has been clarified, alongside AdditionalBeanBuildItem\u0026rsquo;s explicit bean\nregistration. Remember, Jandex doesn\u0026rsquo;t\nautomatically transform classes into CDI beans; the CDI container is pivotal. Leverage these tools\nstrategically, aligning\nchoices with your extension\u0026rsquo;s demands for seamless integration in Quarkus\u0026rsquo; CDI framework.\u003c/p\u003e\n",
      "url": "https://iqnev.github.io/posts/jandex-vs-additional-bean-builditem/",
      "date_published": "26096-26-09T94:2626:00+03:00",
      "date_modified": "26096-26-09T94:2626:00+03:00",
      "author": {
        "name": "Calvin Tran",
        "url": "https://iqnev.github.io/"
      }
    }
    
  ]
}