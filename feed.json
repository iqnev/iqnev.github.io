{
  "version": "https://jsonfeed.org/version/1",
  "title": "Codes are a puzzle",
  "home_page_url": "https://iqnev.github.io/",
  "feed_url": "https://iqnev.github.io/feed.json",
  "description": "A minimal hugo theme focus on content",
  "favicon": "https://iqnev.github.io//assets/favicon.ico",
  "expired": false,
  "author": {
    "name": "Calvin Tran",
    "url": "https://iqnev.github.io/"
  },
  "items": [
    
    

    
    {
      "id": "a6e7c83d0c29dd300adee325a485ea28a9326dea",
      "title": "Harnessing Automatic Setup and Integration with Quarkus Dev Services for Efficient Development",
      "summary": "",
      "content_text": " JPrime 2024 concluded successfully!!\nThe organizers of JPrime 2024 have once again gone to great lengths to offer a diverse range of topics, ensuring there\u0026rsquo;s something for everyone.\nHowever, today\u0026rsquo;s article isn\u0026rsquo;t triggered by one of Michael Simons\u0026rsquo; lectures on \u0026ldquo;The Evolution of Integration Testing within Spring and Quarkus\u0026rdquo; although it was highly insightful. He explored integration testing strategies, focusing on the setup in Spring Boot— a topic I personally steer clear of, but that’s for another day.\nThe author clearly emphasized that the issues he highlighted are effectively addressed in Quarkus through the utilization of Dev Services (Figure 1).\nFigure 1 – JPrime 2024\nIt was remarkable to see the amazement it sparked among the newcomers in the audience. Let me delve deeper into Quarkus Dev Services.\nQuarkus Dev Services In Quarkus, Dev Services facilitate the automatic provisioning of unconfigured services in both development and testing modes. Essentially, if you include an extension without configuring it, Quarkus will automatically initiate the relevant service- often utilizing Testcontainers in the background- and configure your application to use this service efficiently.\nAutomatic Service Detection and Launch Quarkus Dev Services automates the detection and launching of necessary services like databases, message brokers, and other back-end services. It does this by tapping into the application’s dependencies specified in pom.xml or build.gradle. For instance, adding a database driver automatically triggers Dev Services to spin up a corresponding containerized instance of that database if it\u0026rsquo;s not already running.\nThe technology used here primarily involves Testcontainers, which allows the creation of lightweight, throwaway instances of common databases, Selenium web browsers, or anything else that can run in a Docker container.\nDynamic Configuration Injection Once the required services are instantiated, Quarkus Dev Services dynamically injects the relevant service connection details into the application\u0026rsquo;s configuration at runtime. This is done without any manual intervention, using a feature known as Continuous Testing that reroutes the standard database, or other service URLs, to the auto-provisioned Testcontainers. Configuration properties such as URLs, user credentials, and other operational parameters are seamlessly set, allowing the application to interact with these services as though they were manually configured\nService-Specific Behaviors Dev Services is tailored for various types of services:\nDatabases: Automatically provides a running database tailored to your application\u0026rsquo;s needs. Whether it\u0026rsquo;s PostgreSQL, MySQL, MongoDB, or any other supported database, Dev Services ensures that a corresponding Testcontainer is available during development.\nMessaging Systems: For applications that use messaging systems like Kafka or AMQP, Quarkus Dev Services starts the necessary brokers, again using Docker, and connects them with the application.\nCustom Dev Services: Developers can extend the functionality by creating custom Quarkus extensions that leverage the Dev Services framework. This allows for tailored setups that are project-specific, offering even greater flexibility and control.\nNetwork Handling and Service Isolation Each service spun up by Quarkus Dev Services runs in its isolated environment. This is crucial for ensuring that there are no port conflicts, data residue, or security issues between different development tests. Despite this isolation, services are networked appropriately using Docker, ensuring that they can communicate with each other as needed, imitating a real-world deployment atmosphere.\nLifecycle Management Quarkus manages the complete lifecycle of these dynamically provisioned services. When you start your application in development mode, the necessary services are started up automatically. When you stop the Quarkus application, these services are also terminated. This management includes handling data persistency as required, allowing developers to pick up right where they left off without any setup delays.\nExample Usage Consider you’re using a PostgreSQL database with Quarkus. If no existing PostgreSQL configuration is detected, Quarkus will kickstart a PostgreSQL Docker container and connect your application automatically.\nThese services are enabled by default in development and test modes but can be disabled if necessary via the application.properties:\nquarkus.datasource.devservices.enabled=false Let\u0026rsquo;s expand on the scenario where Quarkus is using a PostgreSQL database and how the Dev Services facilitate this with minimum fuss.\nIf Quarkus detects that no PostgreSQL configuration is active (not running or not configured explicitly), it will automatically start up a PostgreSQL container using Docker. This is set up behind the scenes through Dev Services.\nTo interact with the database through an ORM layer, consider using Quarkus Panache, which simplifies Hibernate ORM operations. Here’s how to set up your environment:\nAdd Dependencies Firstly, include the necessary dependencies in your pom.xml:\n1\u0026lt;dependency\u0026gt; 2 \u0026lt;groupId\u0026gt;io.quarkus\u0026lt;/groupId\u0026gt; 3 \u0026lt;artifactId\u0026gt;quarkus-hibernate-orm-panache\u0026lt;/artifactId\u0026gt; 4\u0026lt;/dependency\u0026gt; 5\u0026lt;dependency\u0026gt; 6 \u0026lt;groupId\u0026gt;io.quarkus\u0026lt;/groupId\u0026gt; 7 \u0026lt;artifactId\u0026gt;quarkus-jdbc-postgresql\u0026lt;/artifactId\u0026gt; 8\u0026lt;/dependency\u0026gt; Define the Entity Next, define your entity, such as CityEntity:\n1@Entity 2@Table(name = \u0026#34;cities\u0026#34;) 3public class CityEntity { 4 5 @Id 6 @GeneratedValue(strategy = GenerationType.IDENTITY) 7 private Long id; 8 9 private String name; 10 11 @Column(name = \u0026#34;public_id\u0026#34;) 12 private String publicId; 13 14 @OneToOne 15 private StateEntity state; 16 17 @Column(nullable = false, name = \u0026#34;created_at\u0026#34;) 18 private Instant createdAt; 19 20 @Column(nullable = false, name = \u0026#34;last_modified\u0026#34;) 21 private Instant lastModified; 22 23 @PrePersist 24 protected void onCreate() { 25 createdAt = Instant.now(); 26 lastModified = createdAt; 27 } 28 29 @PreUpdate 30 protected void onUpdate() { 31 lastModified = Instant.now(); 32 } 33} Create the Repository Implement the repository which will directly interact with the database:\n1@ApplicationScoped 2public class CityRepository implements PanacheRepository\u0026lt;CityEntity\u0026gt; { 3} Service Layer Define the service layer that utilizes the repository:\n1@ApplicationScoped 2public class CityServiceImpl implements CityService { 3 4 @Inject 5 CityRepository cityRepository; 6 7 @Override 8 public long countCities() { 9 return cityRepository.count(); 10 } 11} 12 13public interface CityService { 14 long countCities(); 15} Resource Endpoint 1@Path(\u0026#34;/cities\u0026#34;) 2@Tag(name = \u0026#34;City Resource\u0026#34;, description = \u0026#34;City APIs\u0026#34;) 3public class CityResource { 4 5 @Inject 6 CityService cityService; 7 8 @GET 9 @Path(\u0026#34;/count\u0026#34;) 10 @Operation(summary = \u0026#34;Get the total number of cities\u0026#34;, description = \u0026#34;Returns the total count of cities in the system.\u0026#34;) 11 @APIResponse(responseCode = \u0026#34;200\u0026#34;, description = \u0026#34;Successful response\u0026#34;, content = @Content(mediaType = \u0026#34;application/json\u0026#34;, schema = @Schema(implementation = Long.class))) 12 public long count() { 13 return cityService.countCities(); 14 } 15} When you run your Quarkus application (mvn quarkus:dev), observe the automatic startup of the PostgreSQL container (Figure 2). This seamless integration exemplifies the power of Quarkus Dev Services, making development and testing significantly simpler by automating the configuration and connection setup to external services needed for your application.\nFigure 2 – Application logs\nPlatform Dev Services Quarkus Dev Services streamline the development and testing phases by handling the configuration and management of various services, allowing developers to focus more on the actual application. Quarkus supports a wide range of Dev Services, including:\nAMQP Apicurio Registry Databases Kafka Keycloak Kubernetes MongoDB RabbitMQ Pulsar Redis Vault Infinispan Elasticsearch Observability Neo4j WireMock Microcks Keycloak and many more, each designed to enhance your development environment seamlessly Conclusion Quarkus Dev Services represents a paradigm shift in how developers approach setting up and integrating external services during the development and testing phases. The automation of environment setup not only accelerates the development process but also reduces the potential for configuration errors, making it easier for teams to focus on creating robust, feature-rich applications.\nOne of the standout advantages of Quarkus Dev Services is the emphasis on developer productivity. By removing the need to manually manage service dependencies, developers can immediately begin work on business logic and application features. This streamlined workflow is particularly beneficial in microservices architectures where multiple services might require simultaneous development and integration\nIn conclusion, embracing Quarkus Dev Services could significantly impact your development team\u0026rsquo;s effectiveness and project outcomes. The simplicity and power of Quarkus encourage experimentation, quicker iterations, and ultimately a faster development cycle. This kind of technological leverage is what modern businesses need to thrive in the digital era.\n",
      "content_html": "\u003cstyle\u003e\n.zoom {\n  transition: transform .2s; /* Animation */\n  margin: 0 auto;\n}\n\n.zoom:hover {\n  transform: scale(2.0); /* Zoom when hovered */\n}\n\u003c/style\u003e\n\u003cp\u003eJPrime 2024 concluded successfully!!\u003c/p\u003e\n\u003cp\u003eThe organizers of JPrime 2024 have once again gone to great lengths to offer a diverse range of\ntopics, ensuring there\u0026rsquo;s something for everyone.\u003c/p\u003e\n\u003cp\u003eHowever, today\u0026rsquo;s article isn\u0026rsquo;t triggered by one of Michael Simons\u0026rsquo; lectures on \u003cstrong\u003e\u0026ldquo;The Evolution of\nIntegration Testing within Spring and Quarkus\u0026rdquo;\u003c/strong\u003e although it was highly insightful. He explored\nintegration testing strategies, focusing on the setup in Spring Boot— a topic I personally steer\nclear of, but that’s for another day.\u003c/p\u003e\n\u003cp\u003eThe author clearly emphasized that the issues he highlighted are effectively addressed in Quarkus\nthrough the utilization of Dev Services (\u003cstrong\u003eFigure 1\u003c/strong\u003e).\u003c/p\u003e\n\u003cbr\u003e\n\u003cimg class=\"zoom\" src=\"/images/jprime-image.jpg\" alt=\"JPrime\" title=\"JPrime\"\u003e\n\u003cp\u003e\u003cem\u003eFigure 1 – JPrime 2024\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eIt was remarkable to see the amazement it sparked among the newcomers in the\naudience. Let me delve deeper into Quarkus Dev Services.\u003c/p\u003e\n\u003ch2 id=\"quarkus-dev-services\"\u003eQuarkus Dev Services\u003c/h2\u003e\n\u003cp\u003eIn Quarkus, Dev Services facilitate the automatic provisioning of unconfigured services in both\ndevelopment and testing modes. Essentially, if you include an extension without configuring it,\nQuarkus will automatically initiate the relevant service- often utilizing Testcontainers in the\nbackground- and configure your application to use this service efficiently.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eAutomatic Service Detection and Launch\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eQuarkus Dev Services automates the detection and launching of necessary services like databases,\nmessage brokers, and other back-end services. It does this by tapping into the application’s\ndependencies specified in \u003ccode\u003epom.xml\u003c/code\u003e or \u003ccode\u003ebuild.gradle\u003c/code\u003e. For instance, adding a database driver\nautomatically triggers Dev Services to spin up a corresponding containerized instance of that\ndatabase if it\u0026rsquo;s not already running.\u003c/p\u003e\n\u003cp\u003eThe technology used here primarily involves Testcontainers, which allows the creation of\nlightweight, throwaway instances of common databases, Selenium web browsers, or anything else that\ncan run in a Docker container.\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eDynamic Configuration Injection\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eOnce the required services are instantiated, Quarkus Dev Services dynamically injects the relevant\nservice connection details into the application\u0026rsquo;s configuration at runtime. This is done without any\nmanual intervention, using a feature known as Continuous Testing that reroutes the standard\ndatabase, or other service URLs, to the auto-provisioned Testcontainers. Configuration properties\nsuch as URLs, user credentials, and other operational parameters are seamlessly set, allowing the\napplication to interact with these services as though they were manually configured\u003c/p\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eService-Specific Behaviors\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eDev Services is tailored for various types of services:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDatabases:\u003c/strong\u003e Automatically provides a running database tailored to your application\u0026rsquo;s needs.\nWhether\nit\u0026rsquo;s PostgreSQL, MySQL, MongoDB, or any other supported database, Dev Services ensures that a\ncorresponding Testcontainer is available during development.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eMessaging Systems:\u003c/strong\u003e For applications that use messaging systems like Kafka or AMQP, Quarkus Dev\nServices starts the necessary brokers, again using Docker, and connects them with the application.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCustom Dev Services:\u003c/strong\u003e Developers can extend the functionality by creating custom Quarkus\nextensions that leverage the Dev Services framework. This allows for tailored setups that are\nproject-specific, offering even greater flexibility and control.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003col start=\"4\"\u003e\n\u003cli\u003e\u003cstrong\u003eNetwork Handling and Service Isolation\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eEach service spun up by Quarkus Dev Services runs in its isolated environment. This is crucial for\nensuring that there are no port conflicts, data residue, or security issues between different\ndevelopment tests. Despite this isolation, services are networked appropriately using Docker,\nensuring that they can communicate with each other as needed, imitating a real-world deployment\natmosphere.\u003c/p\u003e\n\u003col start=\"5\"\u003e\n\u003cli\u003e\u003cstrong\u003eLifecycle Management\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eQuarkus manages the complete lifecycle of these dynamically provisioned services. When you start\nyour application in development mode, the necessary services are started up automatically. When you\nstop the Quarkus application, these services are also terminated. This management includes handling\ndata persistency as required, allowing developers to pick up right where they left off without any\nsetup delays.\u003c/p\u003e\n\u003ch2 id=\"example-usage\"\u003eExample Usage\u003c/h2\u003e\n\u003cp\u003eConsider you’re using a PostgreSQL database with Quarkus. If no existing PostgreSQL configuration is\ndetected, Quarkus will kickstart a PostgreSQL Docker container and connect your application\nautomatically.\u003c/p\u003e\n\u003cp\u003eThese services are enabled by default in development and test modes but can be disabled if necessary\nvia the application.properties:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-properties\" data-lang=\"properties\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003equarkus.datasource.devservices.enabled=\u003cspan style=\"color:#fc6a5d\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLet\u0026rsquo;s expand on the scenario where Quarkus is using a PostgreSQL database and how the Dev Services\nfacilitate this with minimum fuss.\u003c/p\u003e\n\u003cp\u003eIf Quarkus detects that no PostgreSQL configuration is active (not running or not configured\nexplicitly), it will automatically start up a PostgreSQL container using Docker. This is set up\nbehind the scenes through Dev Services.\u003c/p\u003e\n\u003cp\u003eTo interact with the database through an ORM layer, consider using Quarkus Panache, which simplifies\nHibernate ORM operations. Here’s how to set up your environment:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eAdd Dependencies\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFirstly, include the necessary dependencies in your \u003ccode\u003epom.xml\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\u0026lt;dependency\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e   \u0026lt;groupId\u0026gt;io.quarkus\u0026lt;/groupId\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e   \u0026lt;artifactId\u0026gt;quarkus-hibernate-orm-panache\u0026lt;/artifactId\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e\u0026lt;/dependency\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e\u0026lt;dependency\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\u003c/span\u003e\u003cspan\u003e   \u0026lt;groupId\u0026gt;io.quarkus\u0026lt;/groupId\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\u003c/span\u003e\u003cspan\u003e   \u0026lt;artifactId\u0026gt;quarkus-jdbc-postgresql\u0026lt;/artifactId\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\u003c/span\u003e\u003cspan\u003e\u0026lt;/dependency\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003eDefine the Entity\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eNext, define your entity, such as \u003ccode\u003eCityEntity\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e@Entity\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e@Table(name = \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;cities\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eCityEntity\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e  @Id\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e  @GeneratedValue(strategy = GenerationType.IDENTITY)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e Long id;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e String name;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e  @Column(name = \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;public_id\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e String publicId;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e  @OneToOne\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e StateEntity state;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e  @Column(nullable = \u003cspan style=\"color:#fc5fa3\"\u003efalse\u003c/span\u003e, name = \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;created_at\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e Instant createdAt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\u003c/span\u003e\u003cspan\u003e  @Column(nullable = \u003cspan style=\"color:#fc5fa3\"\u003efalse\u003c/span\u003e, name = \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;last_modified\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e Instant lastModified;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\u003c/span\u003e\u003cspan\u003e  @PrePersist\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eprotected\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eonCreate\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\u003c/span\u003e\u003cspan\u003e    createdAt = Instant.now();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\u003c/span\u003e\u003cspan\u003e    lastModified = createdAt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\u003c/span\u003e\u003cspan\u003e  @PreUpdate\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eprotected\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eonUpdate\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\u003c/span\u003e\u003cspan\u003e    lastModified = Instant.now();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003eCreate the Repository\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eImplement the repository which will directly interact with the database:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e@ApplicationScoped\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eCityRepository\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eimplements\u003c/span\u003e PanacheRepository\u0026lt;CityEntity\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003eService Layer\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eDefine the service layer that utilizes the repository:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e@ApplicationScoped\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eCityServiceImpl\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eimplements\u003c/span\u003e CityService {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e  @Inject\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e  CityRepository cityRepository;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e  @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003elong\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003ecountCities\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e cityRepository.count();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eCityService\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003elong\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003ecountCities\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003eResource Endpoint\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e@Path(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;/cities\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e@Tag(name = \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;City Resource\u0026#34;\u003c/span\u003e, description = \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;City APIs\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eCityResource\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e  @Inject\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e  CityService cityService;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e  @GET\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e  @Path(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;/count\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e  @Operation(summary = \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;Get the total number of cities\u0026#34;\u003c/span\u003e, description = \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;Returns the total count of cities in the system.\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e  @APIResponse(responseCode = \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;200\u0026#34;\u003c/span\u003e, description = \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;Successful response\u0026#34;\u003c/span\u003e, content = @Content(mediaType = \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;application/json\u0026#34;\u003c/span\u003e, schema = @Schema(implementation = Long.class)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003elong\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003ecount\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e cityService.countCities();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhen you run your Quarkus application (\u003ccode\u003emvn quarkus:dev\u003c/code\u003e), observe the automatic startup of the\nPostgreSQL container (\u003cstrong\u003eFigure 2\u003c/strong\u003e). This seamless integration exemplifies the power of Quarkus\nDev Services, making development and testing significantly simpler by automating the configuration\nand connection setup to external services needed for your application.\u003c/p\u003e\n\u003cbr\u003e\n\u003cimg class=\"zoom\" src=\"/images/quarkus-dev-services-1.jpg\" alt=\"Application logs\" title=\"Application logs\"\u003e\n\u003cp\u003e\u003cem\u003eFigure 2 – Application logs\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"platform-dev-services\"\u003ePlatform Dev Services\u003c/h2\u003e\n\u003cp\u003eQuarkus Dev Services streamline the development and testing phases by handling the configuration and\nmanagement of various services, allowing developers to focus more on the actual application. Quarkus\nsupports a wide range of Dev Services, including:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAMQP\u003c/li\u003e\n\u003cli\u003eApicurio Registry\u003c/li\u003e\n\u003cli\u003eDatabases\u003c/li\u003e\n\u003cli\u003eKafka\u003c/li\u003e\n\u003cli\u003eKeycloak\u003c/li\u003e\n\u003cli\u003eKubernetes\u003c/li\u003e\n\u003cli\u003eMongoDB\u003c/li\u003e\n\u003cli\u003eRabbitMQ\u003c/li\u003e\n\u003cli\u003ePulsar\u003c/li\u003e\n\u003cli\u003eRedis\u003c/li\u003e\n\u003cli\u003eVault\u003c/li\u003e\n\u003cli\u003eInfinispan\u003c/li\u003e\n\u003cli\u003eElasticsearch\u003c/li\u003e\n\u003cli\u003eObservability\u003c/li\u003e\n\u003cli\u003eNeo4j\u003c/li\u003e\n\u003cli\u003eWireMock\u003c/li\u003e\n\u003cli\u003eMicrocks\u003c/li\u003e\n\u003cli\u003eKeycloak\u003c/li\u003e\n\u003cli\u003eand many more, each designed to enhance your development environment seamlessly\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eQuarkus Dev Services represents a paradigm shift in how developers approach setting up and\nintegrating external services during the development and testing phases. The automation of\nenvironment setup not only accelerates the development process but also reduces the potential for\nconfiguration errors, making it easier for teams to focus on creating robust, feature-rich\napplications.\u003c/p\u003e\n\u003cp\u003eOne of the standout advantages of Quarkus Dev Services is the emphasis on developer productivity. By\nremoving the need to manually manage service dependencies, developers can immediately begin work on\nbusiness logic and application features. This streamlined workflow is particularly beneficial in\nmicroservices architectures where multiple services might require simultaneous development and\nintegration\u003c/p\u003e\n\u003cp\u003eIn conclusion, embracing Quarkus Dev Services could significantly impact your development team\u0026rsquo;s\neffectiveness and project outcomes. The simplicity and power of Quarkus encourage experimentation,\nquicker iterations, and ultimately a faster development cycle. This kind of technological leverage\nis what modern businesses need to thrive in the digital era.\u003c/p\u003e\n",
      "url": "https://iqnev.github.io/posts/harnessing_automatic_setup_and_integration_with_quarkus_dev_services_for_efficient_development/",
      "date_published": "2066-02-09T64:22:00+03:00",
      "date_modified": "2066-02-09T64:22:00+03:00",
      "author": {
        "name": "Calvin Tran",
        "url": "https://iqnev.github.io/"
      }
    },
    
    {
      "id": "9212c8c1042526a7e7fe149b8929be3fe4808b15",
      "title": "Memory Management in GraalVM Native Image",
      "summary": "",
      "content_text": " Memory management is a crucial component of computer software development, tasked with the effective allocation, utilization, and release of memory in applications. Its importance lies in enhancing software performance and ensuring system stability.\nGarbage Collection Garbage collection (GC) is pivotal in contemporary programming languages such as Java and Go. It autonomously detects and recycles unused memory, thereby alleviating the need for developers to manually manage memory. The concept of GC originally emerged in the LISP programming language in the late 1950s, marking the introduction of automated memory management.\nKey advantages of automated memory management include:\nPrevention of memory leaks and efficient memory utilization. Simplified development processes and enhanced program stability. Understanding the nature of \u0026ldquo;garbage\u0026rdquo; in memory and identifying reclaimable space is essential. In the upcoming chapters, we will start by exploring the fundamental principles of garbage collection.\nReference Counting Algorithm [George E. Collins 1966] The Reference Counting Algorithm assigns a field in the object\u0026rsquo;s header to track its reference count. This count increases with each new reference and decreases when a reference is removed. When the count reaches zero, the object is eligible for garbage collection.\nConsider the following code:\nFirst create a String with value demo which is referenced by d (Figure 1).\n1String d = new String(\u0026#34;demo\u0026#34;); Figure 1 – After a String is created\nThen, set d to null. The reference count of demo is zero. In the Reference Counting algorithm, the memory for demo is to be reclaimed (Figure 2).\nd =null; // Reference count of \u0026#39;demo\u0026#39; becomes zero, prompting garbage collection. Figure 2 – When the reference is nullified\nThe Reference Counting Algorithm operates during program execution, avoiding Stop-The-World events, which halt the program temporarily for garbage collection. However, its major drawback is the inability to handle circular references (Figure 3).\nFor example:\n1public class CircularReferenceDemo { 2 3 public CircularReferenceDemo reference; 4 private String name; 5 6 public CircularReferenceDemo(String name) { 7 this.name = name; 8 } 9 10 public void setReference(CircularReferenceDemo ref) { 11 this.reference = ref; 12 } 13 14 public static void main(String[] args) { 15 CircularReferenceDemo objA = new CircularReferenceDemo(\u0026#34;Ref_A\u0026#34;); 16 CircularReferenceDemo objB = new CircularReferenceDemo(\u0026#34;Ref_B\u0026#34;); 17 18 objA.setReference(objB); 19 objB.setReference(objA); 20 21 objA = null; 22 objB = null; 23 } 24} Here, despite nullifying external references, the mutual references between objA and objB prevent their garbage collection.\nFigure 3 – Circular References\nWe can see that both objects can no longer be accessed. However, they are referenced by each other, and thus their reference count will never be zero. Consequently, the GC collector will never be notified to garbage collect them by using the Reference Counting algorithm.\nThis algorithm is practically implemented in C++ through the use of std::shared_ptr. Designed to manage the lifecycle of dynamically allocated objects, std::shared_ptr automates the increment and decrement of reference counts as pointers to the object are created or destroyed. This smart pointer is part of the C++ Standard Library, providing robust memory management capabilities that significantly diminish the risks associated with manual memory handling. Whenever a std::shared_ptr is copied, the internal reference count of the managed object increases, reflecting the new reference. Conversely, when a std::shared_ptr is destructed, goes out of scope, or is reassigned to a different object, the reference count decreases. The allocated memory is automatically reclaimed and the object is destroyed when its reference count reaches zero, effectively preventing memory leaks by ensuring no object remains allocated without necessity.\nReachability Analysis Algorithm [1978] The Reachability Analysis Algorithm begins at GC roots, traversing through the object graph. Objects that cannot be reached from these roots are deemed unrecoverable and are targeted for collection.\nAs shown in the image below, the objects in blue circle should be kept alive and the objects in gray circle can be recycled (Figure 4).\nFigure 4 – Memory leak\nThis method effectively resolves the issue of circular references inherent in the Reference Counting Algorithm. Objects unreachable from the GC roots are categorized for collection.\nTypically, Java objects considered as GC roots include:\nLocal variables within the current method scope. Active Java threads. Static fields from classes. JNI references from native code. Overview of GraalVM Native Image GraalVM offers an ahead-of-time (AOT) compiler, which translates Java applications into standalone executable binaries known as GraalVM Native Images. Developed by Oracle Labs, these binaries encapsulate application and library classes, and runtime components like the GC, allowing operations without a Java Runtime Environment (JRE).\nThe process involves static analysis to determine reachable components, initialization through executed blocks, and finalizing by creating a snapshot of the application state for subsequent machine code translation.\nFundamentals of the Substrate VM The Substrate VM stands as an integral part of the GraalVM suite, orchestrated by Oracle Labs. It\u0026rsquo;s an enhanced JVM that not only supports ahead-of-time (AOT) compilation but also facilitates the execution of languages beyond Java, such as JavaScript, Python, Ruby, and even native languages like C and C++. At its core, Substrate VM serves as a sophisticated framework that allows GraalVM to compile Java applications into standalone native binaries. These binaries do not rely on a conventional Java Virtual Machine (JVM) for their execution, which streamlines deployment and operational processes.\nOne of the cardinal features of Substrate VM is its specialized garbage collector, which is fine-tuned for applications requiring low latency and minimal memory footprint. This garbage collector is adept at handling the unique memory layout and operational model distinct to native images, which differ considerably from traditional Java applications running on a standard JVM. The absence of a Just-In-Time (JIT) compiler in Substrate VM native images is a strategic choice that aids in minimizing the overall size of the executable. This is because it eliminates the necessity to include the JIT compiler and associated metadata, which are substantial in size and complexity.\nFurthermore, while GraalVM is developed using Java, this introduces certain constraints, particularly in terms of native memory access. Such restrictions are primarily due to security concerns and the need to maintain compatibility across various platforms. However, accessing native memory is essential for optimal garbage collection operations. To address this, Substrate VM employs a suite of specialized interfaces that facilitate safe and efficient interactions with native memory. These interfaces are part of the broader GraalVM architecture and enable Substrate VM to effectively manage memory in a manner akin to lower-level languages like C, all while retaining the safety and manageability of Java.\nIn practice, these capabilities make Substrate VM an extremely versatile tool that enhances the functionality and efficiency of applications compiled with GraalVM. By allowing developers to leverage a broader range of programming languages and compile them into efficient native binaries, Substrate VM pushes the boundaries of what can be achieved with traditional Java development environments. This makes it an invaluable asset for modern software development projects that demand high performance, reduced resource consumption, and versatile language support.\nNoteworthy elements of Substrate VM include:\nSimplified memory access via interfaces like Pointer Interface Pointer for raw memory operations and WordBase Interface WordBase for handling word-sized values.\nDivision of the heap into pre-initialized segments containing immutable objects and runtime segments for dynamic object allocation (Figure 5).\nFigure 5 – Memory Management in Native Image\nAt runtime, the so-called image heap in Substrate VM contains objects created during the image build process. This section of the heap is pre-initialized with data from the executable binary\u0026rsquo;s data section and is readily accessible upon application startup. The objects residing in the image heap are considered immortal; hence, references within these objects are treated as root pointers by the garbage collector. However, the GC only scans parts of the image heap for root pointers, specifically those that are not marked as read-only.\nDuring the build process, objects designated as read-only are placed in a specific read-only section of the image heap. Since these objects will never hold references to objects allocated at runtime, they contain no root pointers, allowing the GC to bypass them during scans. Similarly, objects that solely consist of primitive data or arrays of primitive types also lack root pointers. This attribute further streamlines the garbage collection process, as these objects can be omitted from GC scans.\nIn contrast, the Java heap is designated for holding ordinary objects that are created dynamically during runtime. This portion of the heap is subject to regular garbage collection to reclaim space occupied by objects that are no longer in use. It is structured as a generational heap with mechanisms for aging, facilitating efficient memory management over time.\nThis division between the pre-initialized, immortal image heap and the dynamically managed Java heap enables Substrate VM to optimize memory usage and garbage collection efficiency, catering to both static and dynamic aspects of application memory requirements.\nHeap Chunk In Substrate VM\u0026rsquo;s heap model, the memory is systematically organized into structures known as heap chunks. These chunks, typically sized at 1024KB by default, form a continuous segment of virtual memory that is solely allocated to object storage. The organizational structure of these chunks is a linked list where the tail chunk represents the most recently added segment. Such a model facilitates efficient memory allocation and object management.\nThese heap chunks are further categorized into two types: aligned and unaligned. Aligned heap chunks are capable of holding multiple objects continuously. This alignment allows for simpler mapping of objects to their respective parent heap chunks, making memory management more intuitive and efficient. In scenarios where object promotion is necessary-typically, during garbage collection and memory optimization- an object is moved from its original placement in a parent heap chunk to a target heap chunk located in a designated \u0026ldquo;old to-space.\u0026rdquo; This migration is part of the generational heap management strategy that helps in optimizing the garbage collection process by segregating young from old objects, thereby reducing the overhead during GC cycles.\nGarbage Collectors in Native Image GraalVM Native Image supports various GCs tailored to different needs:\nSerial GC: Default low-footprint collector suitable for single-threaded applications.\nG1 Garbage Collector: Designed for multi-threaded applications with large heap sizes, enhancing flexibility in generation management.\nEpsilon GC: A minimalistic collector that handles allocation but lacks reclamation, best used for short-lived applications where full heap utilization is predictable.\nConclusion In conclusion, Substrate VM effectively optimizes memory management within GraalVM by incorporating advanced techniques like specialized garbage collection and structured heap management. These features, including heap chunks and separate memory segments for image and Java heaps, streamline garbage collection and improve application performance. As Substrate VM supports a variety of programming languages and compiles them into efficient native binaries, it showcases how modern JVM frameworks can extend beyond traditional boundaries to enhance execution efficiency and robustness in diverse application environments. This approach sets a high standard for future developments in virtual machine technology and application deployment.\n",
      "content_html": "\u003cstyle\u003e\n.zoom {\n  transition: transform .2s; /* Animation */\n  margin: 0 auto;\n}\n\n.zoom:hover {\n  transform: scale(2.0); /* Zoom when hovered */\n}\n\u003c/style\u003e\n\u003cp\u003eMemory management is a crucial component of computer software development, tasked with the effective\nallocation, utilization, and release of memory in applications. Its importance lies in enhancing\nsoftware performance and ensuring system stability.\u003c/p\u003e\n\u003ch2 id=\"garbage-collection\"\u003eGarbage Collection\u003c/h2\u003e\n\u003cp\u003eGarbage collection (GC) is pivotal in contemporary programming languages such as Java and Go. It\nautonomously detects and recycles unused memory, thereby alleviating the need for developers to\nmanually manage memory. The concept of GC originally emerged in the LISP programming language in the\nlate 1950s, marking the introduction of automated memory management.\u003c/p\u003e\n\u003cp\u003eKey advantages of automated memory management include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePrevention of memory leaks and efficient memory utilization.\u003c/li\u003e\n\u003cli\u003eSimplified development processes and enhanced program stability.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUnderstanding the nature of \u0026ldquo;garbage\u0026rdquo; in memory and identifying reclaimable space is essential. In the upcoming chapters, we will start by exploring the fundamental principles of garbage collection.\u003c/p\u003e\n\u003ch3 id=\"reference-counting-algorithm-george-e-collins-1966\"\u003eReference Counting Algorithm [George E. Collins 1966]\u003c/h3\u003e\n\u003cp\u003eThe Reference Counting Algorithm assigns a field in the object\u0026rsquo;s header to track its reference\ncount. This count increases with each new reference and decreases when a reference is removed. When\nthe count reaches zero, the object is eligible for garbage collection.\u003c/p\u003e\n\u003cp\u003eConsider the following code:\u003c/p\u003e\n\u003cp\u003eFirst create a \u003ccode\u003eString\u003c/code\u003e with value \u003ccode\u003edemo\u003c/code\u003e which is referenced by \u003ccode\u003ed\u003c/code\u003e  (\u003cstrong\u003eFigure 1\u003c/strong\u003e).\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003eString d = \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e String(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;demo\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbr\u003e\n\u003cimg class=\"zoom\" src=\"/images/gc_01.png\" alt=\"Reference Counting\" title=\"Reference Counting\"\u003e\n\u003cp\u003e\u003cem\u003eFigure 1 – After a String is created\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThen, set \u003ccode\u003ed\u003c/code\u003e to \u003ccode\u003enull\u003c/code\u003e. The reference count of \u003ccode\u003edemo\u003c/code\u003e is zero. In the Reference Counting algorithm,\nthe memory for \u003ccode\u003edemo\u003c/code\u003e is to be reclaimed (\u003cstrong\u003eFigure 2\u003c/strong\u003e).\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ed =\u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e; \u003cspan style=\"color:#6c7986\"\u003e// Reference count of \u0026#39;demo\u0026#39; becomes zero, prompting garbage collection.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbr\u003e\n\u003cimg class=\"zoom\" src=\"/images/gc_02.png\" alt=\"Reference Counting\" title=\"Reference Counting\"\u003e\n\u003cp\u003e\u003cem\u003eFigure 2 – When the reference is nullified\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThe Reference Counting Algorithm operates during program execution, avoiding \u003cstrong\u003eStop-The-World\u003c/strong\u003e\nevents, which halt the program temporarily for garbage collection. However, its major drawback is\nthe inability to handle circular references (\u003cstrong\u003eFigure 3\u003c/strong\u003e).\u003c/p\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eCircularReferenceDemo\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e CircularReferenceDemo reference;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e String name;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eCircularReferenceDemo\u003c/span\u003e(String name) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ethis\u003c/span\u003e.name = name;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003esetReference\u003c/span\u003e(CircularReferenceDemo ref) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ethis\u003c/span\u003e.reference = ref;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003emain\u003c/span\u003e(String[] args) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e    CircularReferenceDemo objA = \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e CircularReferenceDemo(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;Ref_A\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e    CircularReferenceDemo objB = \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e CircularReferenceDemo(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;Ref_B\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\u003c/span\u003e\u003cspan\u003e    objA.setReference(objB);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\u003c/span\u003e\u003cspan\u003e    objB.setReference(objA);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\u003c/span\u003e\u003cspan\u003e    objA = \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\u003c/span\u003e\u003cspan\u003e    objB = \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHere, despite nullifying external references, the mutual references between \u003ccode\u003eobjA\u003c/code\u003e and \u003ccode\u003eobjB\u003c/code\u003e\nprevent their garbage collection.\u003c/p\u003e\n\u003cbr\u003e\n\u003cimg class=\"zoom\" src=\"/images/gc_03.png\" alt=\"Reference Counting\" title=\"Reference Counting\"\u003e\n\u003cp\u003e\u003cem\u003eFigure 3 – Circular References\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eWe can see that both objects can no longer be accessed. However, they are referenced by each other,\nand thus their reference count will never be zero. Consequently, the GC collector will never be\nnotified to garbage collect them by using the Reference Counting algorithm.\u003c/p\u003e\n\u003cp\u003eThis algorithm is practically implemented in C++ through the use of \u003ccode\u003estd::shared_ptr\u003c/code\u003e. Designed to\nmanage the lifecycle of dynamically allocated objects, \u003ccode\u003estd::shared_ptr\u003c/code\u003e automates the increment and\ndecrement of reference counts as pointers to the object are created or destroyed.\nThis smart pointer is part of the C++ Standard Library, providing robust memory management\ncapabilities that significantly diminish the risks associated with manual memory handling.\nWhenever a \u003ccode\u003estd::shared_ptr\u003c/code\u003e is copied, the internal reference count of the managed object\nincreases, reflecting the new reference. Conversely, when a \u003ccode\u003estd::shared_ptr\u003c/code\u003e is destructed, goes out\nof scope, or is reassigned to a different object, the reference count decreases. The allocated\nmemory is automatically reclaimed and the object is destroyed when its reference count reaches zero,\neffectively preventing memory leaks by ensuring no object remains allocated without necessity.\u003c/p\u003e\n\u003ch3 id=\"reachability-analysis-algorithm-1978\"\u003eReachability Analysis Algorithm [1978]\u003c/h3\u003e\n\u003cp\u003eThe Reachability Analysis Algorithm begins at GC roots, traversing through the object graph. Objects\nthat cannot be reached from these roots are deemed unrecoverable and are targeted for collection.\u003c/p\u003e\n\u003cp\u003eAs shown in the image below, the objects in blue circle should be kept alive and the objects in\ngray circle can be recycled (\u003cstrong\u003eFigure 4\u003c/strong\u003e).\u003c/p\u003e\n\u003cbr\u003e\n\u003cimg class=\"zoom\" src=\"/images/gc_04.png\" alt=\"Reachability Analysis\" title=\"Reachability Analysis\"\u003e\n\u003cp\u003e\u003cem\u003eFigure 4 – Memory leak\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThis method effectively resolves the issue of circular references inherent in the Reference Counting\nAlgorithm. Objects unreachable from the GC roots are categorized for collection.\u003c/p\u003e\n\u003cp\u003eTypically, Java objects considered as GC roots include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLocal variables within the current method scope.\u003c/li\u003e\n\u003cli\u003eActive Java threads.\u003c/li\u003e\n\u003cli\u003eStatic fields from classes.\u003c/li\u003e\n\u003cli\u003eJNI references from native code.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"overview-of-graalvm-native-image\"\u003eOverview of GraalVM Native Image\u003c/h2\u003e\n\u003cp\u003eGraalVM offers an ahead-of-time (AOT) compiler, which translates Java applications into standalone\nexecutable binaries known as GraalVM Native Images. Developed by Oracle Labs, these binaries\nencapsulate application and library classes, and runtime components like the GC, allowing operations\nwithout a Java Runtime Environment (JRE).\u003c/p\u003e\n\u003cp\u003eThe process involves static analysis to determine reachable components, initialization through\nexecuted blocks, and finalizing by creating a snapshot of the application state for subsequent\nmachine code translation.\u003c/p\u003e\n\u003ch2 id=\"fundamentals-of-the-substrate-vm\"\u003eFundamentals of the Substrate VM\u003c/h2\u003e\n\u003cp\u003eThe Substrate VM stands as an integral part of the GraalVM suite, orchestrated by Oracle Labs. It\u0026rsquo;s\nan enhanced JVM that not only supports ahead-of-time (AOT) compilation but also facilitates the\nexecution of languages beyond Java, such as JavaScript, Python, Ruby, and even native languages like\nC and C++. At its core, Substrate VM serves as a sophisticated framework that allows GraalVM to\ncompile Java applications into standalone native binaries. These binaries do not rely on a\nconventional Java Virtual Machine (JVM) for their execution, which streamlines deployment and\noperational processes.\u003c/p\u003e\n\u003cp\u003eOne of the cardinal features of Substrate VM is its specialized garbage collector, which is\nfine-tuned for applications requiring low latency and minimal memory footprint. This garbage\ncollector is adept at handling the unique memory layout and operational model distinct to native\nimages, which differ considerably from traditional Java applications running on a standard JVM. The\nabsence of a Just-In-Time (JIT) compiler in Substrate VM native images is a strategic choice that\naids in minimizing the overall size of the executable. This is because it eliminates the necessity\nto include the JIT compiler and associated metadata, which are substantial in size and complexity.\u003c/p\u003e\n\u003cp\u003eFurthermore, while GraalVM is developed using Java, this introduces certain constraints,\nparticularly in terms of native memory access. Such restrictions are primarily due to security\nconcerns and the need to maintain compatibility across various platforms. However, accessing native\nmemory is essential for optimal garbage collection operations. To address this, Substrate VM employs\na suite of specialized interfaces that facilitate safe and efficient interactions with native\nmemory. These interfaces are part of the broader GraalVM architecture and enable Substrate VM to\neffectively manage memory in a manner akin to lower-level languages like C, all while retaining the\nsafety and manageability of Java.\u003c/p\u003e\n\u003cp\u003eIn practice, these capabilities make Substrate VM an extremely versatile tool that enhances the\nfunctionality and efficiency of applications compiled with GraalVM. By allowing developers to\nleverage a broader range of programming languages and compile them into efficient native binaries,\nSubstrate VM pushes the boundaries of what can be achieved with traditional Java development\nenvironments. This makes it an invaluable asset for modern software development projects that demand\nhigh performance, reduced resource consumption, and versatile language support.\u003c/p\u003e\n\u003cp\u003eNoteworthy elements of Substrate VM include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eSimplified memory access via interfaces like \u003ccode\u003ePointer\u003c/code\u003e \u003ca href=\"https://www.graalvm.org/sdk/javadoc/org/graalvm/word/Pointer.html\"\u003eInterface Pointer\u003c/a\u003e for raw memory operations and \u003ccode\u003eWordBase\u003c/code\u003e\n\u003ca href=\"https://www.graalvm.org/sdk/javadoc/org/graalvm/word/WordBase.html\"\u003eInterface WordBase\u003c/a\u003e\nfor handling word-sized values.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDivision of the heap into pre-initialized segments containing immutable objects and runtime\nsegments for dynamic object allocation (\u003cstrong\u003eFigure 5\u003c/strong\u003e).\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr\u003e\n\u003cimg class=\"zoom\" src=\"/images/gc_05.png\" alt=\"Memory Management in Native Image\" title=\"Memory Management in Native Image\"\u003e\n\u003cp\u003e\u003cem\u003eFigure 5 – Memory Management in Native Image\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eAt runtime, the so-called image heap in Substrate VM contains objects created during the image build\nprocess. This section of the heap is pre-initialized with data from the executable binary\u0026rsquo;s data\nsection and is readily accessible upon application startup. The objects residing in the image heap\nare considered immortal; hence, references within these objects are treated as root pointers by the\ngarbage collector. However, the GC only scans parts of the image heap for root pointers,\nspecifically those that are not marked as read-only.\u003c/p\u003e\n\u003cp\u003eDuring the build process, objects designated as read-only are placed in a specific read-only section\nof the image heap. Since these objects will never hold references to objects allocated at runtime,\nthey contain no root pointers, allowing the GC to bypass them during scans. Similarly, objects that\nsolely consist of primitive data or arrays of primitive types also lack root pointers. This\nattribute further streamlines the garbage collection process, as these objects can be omitted from\nGC scans.\u003c/p\u003e\n\u003cp\u003eIn contrast, the Java heap is designated for holding ordinary objects that are created dynamically\nduring runtime. This portion of the heap is subject to regular garbage collection to reclaim space\noccupied by objects that are no longer in use. It is structured as a generational heap with\nmechanisms for aging, facilitating efficient memory management over time.\u003c/p\u003e\n\u003cp\u003eThis division between the pre-initialized, immortal image heap and the dynamically managed Java heap\nenables Substrate VM to optimize memory usage and garbage collection efficiency, catering to both\nstatic and dynamic aspects of application memory requirements.\u003c/p\u003e\n\u003ch2 id=\"heap-chunk\"\u003eHeap Chunk\u003c/h2\u003e\n\u003cp\u003eIn Substrate VM\u0026rsquo;s heap model, the memory is systematically organized into structures known as heap\nchunks. These chunks, typically sized at 1024KB by default, form a continuous segment of virtual\nmemory that is solely allocated to object storage. The organizational structure of these chunks is a\nlinked list where the tail chunk represents the most recently added segment. Such a model\nfacilitates efficient memory allocation and object management.\u003c/p\u003e\n\u003cp\u003eThese heap chunks are further categorized into two types: aligned and unaligned. Aligned heap chunks\nare capable of holding multiple objects continuously. This alignment allows for simpler mapping of\nobjects to their respective parent heap chunks, making memory management more intuitive and\nefficient. In scenarios where object promotion is necessary-typically, during garbage collection and\nmemory optimization- an object is moved from its original placement in a parent heap chunk to a\ntarget heap chunk located in a designated \u0026ldquo;old to-space.\u0026rdquo; This migration is part of the generational\nheap management strategy that helps in optimizing the garbage collection process by segregating\nyoung from old objects, thereby reducing the overhead during GC cycles.\u003c/p\u003e\n\u003ch2 id=\"garbage-collectors-in-native-image\"\u003eGarbage Collectors in Native Image\u003c/h2\u003e\n\u003cp\u003eGraalVM Native Image supports various GCs tailored to different needs:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eSerial GC:\u003c/strong\u003e Default low-footprint collector suitable for single-threaded applications.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eG1 Garbage Collector:\u003c/strong\u003e Designed for multi-threaded applications with large heap sizes,\nenhancing flexibility in generation management.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eEpsilon GC:\u003c/strong\u003e A minimalistic collector that handles allocation but lacks reclamation, best used\nfor short-lived applications where full heap utilization is predictable.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIn conclusion, Substrate VM effectively optimizes memory management within GraalVM by incorporating\nadvanced techniques like specialized garbage collection and structured heap management. These\nfeatures, including heap chunks and separate memory segments for image and Java heaps, streamline\ngarbage collection and improve application performance. As Substrate VM supports a variety of\nprogramming languages and compiles them into efficient native binaries, it showcases how modern JVM\nframeworks can extend beyond traditional boundaries to enhance execution efficiency and robustness\nin diverse application environments. This approach sets a high standard for future developments in\nvirtual machine technology and application deployment.\u003c/p\u003e\n",
      "url": "https://iqnev.github.io/posts/memory_management_in_graalvm_native_image/",
      "date_published": "26056-26-09T54:2626:00+03:00",
      "date_modified": "26056-26-09T54:2626:00+03:00",
      "author": {
        "name": "Calvin Tran",
        "url": "https://iqnev.github.io/"
      }
    },
    
    {
      "id": "e0d863830876f296ccf01e49d899a5107f83e5f2",
      "title": "Enhancing Performance with Static Analysis, Image Initialization and Heap Snapshotting",
      "summary": "",
      "content_text": "From monolithic structures to the world of distributed systems, application development has come a long way. The massive adoption of cloud computing and microservice architecture has significantly altered the approach to how server applications are created and deployed. Instead of giant application servers, we now have independent, individually deployed services that spring into action as and when needed.\nHowever, a new player on the block that can impact this smooth functioning might be \u0026lsquo;cold starts.\u0026rsquo; Cold starts kick in when the first request processes on a freshly spawned worker. This situation demands language runtime initialization and service configuration initialization before processing the actual request. The unpredictability and slower execution associated with cold starts can breach the service level agreements of a cloud service. So, how does one counter this growing concern?\nNative Image: Optimizing Startup Time and Memory Footprint To combat the inefficiencies of cold starts, a novel approach has been developed involving points-to analysis, application initialization at build time, heap snapshotting, and ahead-of-time (AOT) compilation. This method operates under a closed-world assumption, requiring all Java classes to be predetermined and accessible at build time. During this phase, a comprehensive points-to analysis determines all reachable program elements (classes, methods, fields) to ensure that only essential Java methods are compiled.\nThe initialization code for the application can execute during the build process rather than at runtime. This allows for the pre-allocation of Java objects and the construction of complex data structures, which are then made available at runtime via an \u0026ldquo;image heap\u0026rdquo;. This image heap is integrated within the executable, providing immediate availability upon application start. The iterative execution of points-to analysis and snapshotting continues until a stable state (fixed point) is achieved, optimizing both startup time and resource consumption.\nDetailed Workflow The input for our system is Java bytecode, which could originate from languages like Java, Scala, or Kotlin. The process treats the application, its libraries, the JDK, and VM components uniformly to produce a native executable specific to an operating system and architecture—termed a \u0026ldquo;native image\u0026rdquo;. The building process includes iterative points-to analysis and heap snapshotting until a fixed point is reached, allowing the application to actively participate through registered callbacks. These steps are collectively known as the native image build process (Figure 1)\nFigure 1 – Native Image Build Process(source: redhat.com)\nPoints-to Analysis We employ a points-to analysis to ascertain the reachability of classes, methods, and fields during runtime. The points-to analysis commences with all entry points, such as the main method of the application, and iteratively traverses all transitively reachable methods until reaching a fixed point(Figure 2).\nFigure 2 – Points-to-analysis\nOur points-to analysis leverages the front end of our compiler to parse Java bytecode into the compiler’s high-level intermediate representation (IR). Subsequently, the IR is transformed into a type-flow graph. In this graph, nodes represent instructions operating on object types, while edges denote directed use edges between nodes, pointing from the definition to the usage. Each node maintains a type state, consisting of a list of types that can reach the node and nullness information. Type states propagate through the use edges; if the type state of a node changes, this change is disseminated to all usages. Importantly, type states can only expand; new types may be added to a type state, but existing types are never removed. This mechanism ensures that the analysis ultimately converges to a fixed point, leading to termination.\nRun Initialization Code The points-to analysis guides the execution of initialization code when it hits a local fixed point. This code finds its origins in two separate sources: Class initializers and custom code batch executed at build time through a feature interface:\nClass Initializers: Every Java class can have a class initializer indicated by a \u0026lt;clinit\u0026gt; method, which initializes static fields. Developers can choose which classes to initialize at build-time vs runtime.\nExplicit Callbacks: Developers can implement custom code through hooks provided by our system, executing before, during, or after the analysis stages.\nHere are the APIs provided for integrating with our system:\nPassive API (queries the current analysis status) 1boolean isReachable(Class\u0026lt;?\u0026gt; clazz); 2 3boolean isReachable(Field field); 4 5boolean isReachable(Executable method); For more information, refer to the QueryReachabilityAccess\nActive API (registers callbacks for analysis status changes): 1void registerReachabilityHandler(Consumer\u0026lt;DuringAnalysisAccess\u0026gt; callback, Object... elements); 2 3void registerSubtypeReachabilityHandler(BiConsumer\u0026lt;DuringAnalysisAccess, Class\u0026lt;?\u0026gt;\u0026gt; callback, Class\u0026lt;?\u0026gt; baseClass); 4 5void registerMethodOverrideReachabilityHandler(BiConsumer\u0026lt;DuringAnalysisAccess, Executable\u0026gt; callback, Executable baseMethod); For more information, refer to the BeforeAnalysisAccess\nDuring this phase, the application can execute custom code such as object allocation and initialization of larger data structures. Importantly, the initialization code can access the current points-to analysis state, enabling queries regarding the reachability of types, methods, or fields. This is accomplished using the various isReachable() methods provided by DuringAnalysisAccess. Leveraging this information, the application can construct data structures optimized for the reachable segments of the application.\nHeap Snapshotting Finally, heap snapshotting constructs an object graph by following root pointers like static fields to build a comprehensive view of all reachable objects. This graph then populates the native image\u0026rsquo;s image heap, ensuring that the application\u0026rsquo;s initial state is efficiently loaded upon startup.\nTo generate the transitive closure of reachable objects, the algorithm traverses object fields, reading their values using reflection. It\u0026rsquo;s crucial to note that the image builder operates within the Java environment. Only instance fields marked as \u0026ldquo;read\u0026rdquo; by the points-to analysis are considered during this traversal. For instance, if a class has two instance fields but one isn\u0026rsquo;t marked as read, the object reachable through the unmarked field is excluded from the image heap.\nWhen encountering a field value whose class hasn\u0026rsquo;t been previously identified by the points-to analysis, the class is registered as a field type. This registration ensures that in subsequent iterations of the points-to analysis, the new type is propagated to all field reads and transitive usages in the type-flow graph.\nThe code snippet below outlines the core algorithm for heap snapshotting:\nDeclare List worklist := [] Declare Set reachableObjects := [] Function BuildHeapSnapshot(PointsToState pointsToState) For Each field in pointsToState.getReachableStaticObjectFields() Call AddObjectToWorkList(field.readValue()) End For For Each method in pointsToState.getReachableMethods() For Each constant in method.embeddedConstants() Call AddObjectToWorkList(constant) End For End For While worklist.isNotEmpty Object current := Pop from worklist If current Object is an Array For Each value in current Call AddObjectToWorkList(value) Add current.getClass() to pointsToState.getObjectArrayTypes() End For Else For Each field in pointsToState.getReachableInstanceObjectFields(current.getClass()) Object value := field.read(current) Call AddObjectToWorkList(value) Add value.getClass() to pointsToState.getFieldValueTypes(field) End For End If End While Return reachableObjects End Function In summary, the heap snapshotting algorithm efficiently constructs a snapshot of the heap by systematically traversing reachable objects and their fields. This ensures that only relevant objects are included in the image heap, optimizing the performance and memory footprint of the native image.\nConclusion In conclusion, the process of heap snapshotting plays a critical role in the creation of native images. By systematically traversing reachable objects and their fields, the heap snapshotting algorithm constructs an object graph that represents the transitive closure of reachable objects from root pointers such as static fields. This object graph is then embedded into the native image as the image heap, serving as the initial heap upon native image startup.\nThroughout the process, the algorithm relies on the state of the points-to analysis to determine which objects and fields are relevant for inclusion in the image heap. Objects and fields marked as \u0026ldquo;read\u0026rdquo; by the points-to analysis are considered, while unmarked entities are excluded. Additionally, when encountering previously unseen types, the algorithm registers them for propagation in subsequent iterations of the points-to analysis.\nOverall, heap snapshotting optimizes the performance and memory usage of native images by ensuring that only necessary objects are included in the image heap. This systematic approach enhances the efficiency and reliability of native image execution.\n",
      "content_html": "\u003cp\u003eFrom monolithic structures to the world of distributed systems, application development has come a\nlong way. The massive adoption of cloud computing and microservice architecture has significantly\naltered the approach to how server applications are created and deployed. Instead of giant\napplication servers, we now have independent, individually deployed services that spring into action\nas and when needed.\u003c/p\u003e\n\u003cp\u003eHowever, a new player on the block that can impact this smooth functioning might be \u003cstrong\u003e\u0026lsquo;cold starts.\u0026rsquo;\u003c/strong\u003e\nCold starts kick in when the first request processes on a freshly spawned worker. This situation\ndemands language runtime initialization and service configuration initialization before processing\nthe actual request. The unpredictability and slower execution associated with cold starts can breach\nthe service level agreements of a cloud service. So, how does one counter this growing concern?\u003c/p\u003e\n\u003cstyle\u003e\n.zoom {\n  transition: transform .2s; /* Animation */\n  margin: 0 auto;\n}\n\n.zoom:hover {\n  transform: scale(2.0); /* Zoom when hovered */\n}\n\u003c/style\u003e\n\u003ch2 id=\"native-image-optimizing-startup-time-and-memory-footprint\"\u003eNative Image: Optimizing Startup Time and Memory Footprint\u003c/h2\u003e\n\u003cp\u003eTo combat the inefficiencies of cold starts, a novel approach has been developed involving points-to\nanalysis, application initialization at build time, heap snapshotting, and ahead-of-time  \u003cstrong\u003e(AOT)\u003c/strong\u003e\ncompilation. This method operates under a closed-world assumption, requiring all Java classes to be\npredetermined and accessible at build time. During this phase, a comprehensive points-to analysis\ndetermines all reachable program elements (classes, methods, fields) to ensure that only essential\nJava methods are compiled.\u003c/p\u003e\n\u003cp\u003eThe initialization code for the application can execute during the build process rather than at\nruntime. This allows for the pre-allocation of Java objects and the construction of complex data\nstructures, which are then made available at runtime via an  \u0026ldquo;image heap\u0026rdquo;. This image heap is\nintegrated within the executable, providing immediate availability upon application start. The\niterative execution of points-to analysis and snapshotting continues until a stable state (fixed\npoint) is achieved, optimizing both startup time and resource consumption.\u003c/p\u003e\n\u003ch2 id=\"detailed-workflow\"\u003eDetailed Workflow\u003c/h2\u003e\n\u003cp\u003eThe input for our system is Java bytecode, which could originate from languages like Java, Scala, or\nKotlin. The process treats the application, its libraries, the JDK, and VM components uniformly to\nproduce a native executable specific to an operating system and architecture—termed a \u0026ldquo;native\nimage\u0026rdquo;. The building process includes iterative points-to analysis and heap snapshotting until a\nfixed point is reached, allowing the application to actively participate through registered\ncallbacks. These steps are collectively known as the native image build process (\u003cstrong\u003eFigure 1\u003c/strong\u003e)\u003c/p\u003e\n\u003cimg class=\"zoom\" src=\"/images/native-image-build-process.jpg\" alt=\"Native Image Build Process\" title=\"Native Image Build Process\"\u003e\n\u003cbr\u003e\n\u003cp\u003e\u003cem\u003eFigure 1 – Native Image Build Process(source: redhat.com)\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"points-to-analysis\"\u003ePoints-to Analysis\u003c/h2\u003e\n\u003cp\u003eWe employ a points-to analysis to ascertain the reachability of classes, methods, and fields during\nruntime. The points-to analysis commences with all entry points, such as the main method of the\napplication, and iteratively traverses all transitively reachable methods until reaching a fixed\npoint(\u003cstrong\u003eFigure 2\u003c/strong\u003e).\u003c/p\u003e\n\u003cimg class=\"zoom\" src=\"/images/points-to-analysis.jpg\" alt=\"Points-to-analysis\" title=\"Points-to-analysis\"\u003e\n\u003cbr\u003e\n\u003cp\u003e\u003cem\u003eFigure 2 – Points-to-analysis\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eOur points-to analysis leverages the front end of our compiler to parse Java bytecode into the\ncompiler’s high-level intermediate representation \u003cstrong\u003e(IR)\u003c/strong\u003e. Subsequently, the IR is transformed into\na\ntype-flow graph. In this graph, nodes represent instructions operating on object types, while edges\ndenote directed use edges between nodes, pointing from the definition to the usage. Each node\nmaintains a type state, consisting of a list of types that can reach the node and nullness\ninformation. Type states propagate through the use edges; if the type state of a node changes, this\nchange is disseminated to all usages. Importantly, type states can only expand; new types may be\nadded to a type state, but existing types are never removed. This mechanism ensures that the\nanalysis ultimately converges to a fixed point, leading to termination.\u003c/p\u003e\n\u003ch2 id=\"run-initialization-code\"\u003eRun Initialization Code\u003c/h2\u003e\n\u003cp\u003eThe points-to analysis guides the execution of initialization code when it hits a local fixed point.\nThis code finds its origins in two separate sources: Class initializers and custom code batch\nexecuted at build time through a feature interface:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eClass Initializers:\u003c/strong\u003e Every Java class can have a class initializer indicated by a \u003ccode\u003e\u0026lt;clinit\u0026gt;\u003c/code\u003e\nmethod,\nwhich initializes static fields. Developers can choose which classes to initialize at build-time\nvs runtime.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eExplicit Callbacks:\u003c/strong\u003e Developers can implement custom code through hooks provided by our\nsystem,\nexecuting before, during, or after the analysis stages.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eHere are the APIs provided for integrating with our system:\u003c/p\u003e\n\u003ch3 id=\"passive-api-queries-the-current-analysis-status\"\u003ePassive API (queries the current analysis status)\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eboolean\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eisReachable\u003c/span\u003e(Class\u0026lt;?\u0026gt; clazz);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eboolean\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eisReachable\u003c/span\u003e(Field field);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eboolean\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eisReachable\u003c/span\u003e(Executable method);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFor more information, refer to\nthe \u003ca href=\"https://github.com/graalvm/labs-openjdk/blob/378138863fe29bae72f34eb8e3af8ab7c457baa6/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/runtime/JVMCICompiler.java#L35\"\u003eQueryReachabilityAccess\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"active-api-registers-callbacks-for-analysis-status-changes\"\u003eActive API (registers callbacks for analysis status changes):\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eregisterReachabilityHandler\u003c/span\u003e(Consumer\u0026lt;DuringAnalysisAccess\u0026gt; callback, Object... elements);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eregisterSubtypeReachabilityHandler\u003c/span\u003e(BiConsumer\u0026lt;DuringAnalysisAccess, Class\u0026lt;?\u0026gt;\u0026gt; callback, Class\u0026lt;?\u0026gt; baseClass);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eregisterMethodOverrideReachabilityHandler\u003c/span\u003e(BiConsumer\u0026lt;DuringAnalysisAccess, Executable\u0026gt; callback, Executable baseMethod);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFor more information, refer to\nthe \u003ca href=\"https://github.com/oracle/graal/blob/979124badd31e91224996ddd08aaf2e10bfeb37d/sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/hosted/Feature.java#L202\"\u003eBeforeAnalysisAccess\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eDuring this phase, the application can execute custom code such as object allocation and\ninitialization of larger data structures. Importantly, the initialization code can access the\ncurrent points-to analysis state, enabling queries regarding the reachability of types, methods, or\nfields. This is accomplished using the various \u003ccode\u003eisReachable()\u003c/code\u003e methods provided by\nDuringAnalysisAccess. Leveraging this information, the application can construct data structures\noptimized for the reachable segments of the application.\u003c/p\u003e\n\u003ch2 id=\"heap-snapshotting\"\u003eHeap Snapshotting\u003c/h2\u003e\n\u003cp\u003eFinally, heap snapshotting constructs an object graph by following root pointers like static fields\nto build a comprehensive view of all reachable objects. This graph then populates the native image\u0026rsquo;s\nimage heap, ensuring that the application\u0026rsquo;s initial state is efficiently loaded upon startup.\u003c/p\u003e\n\u003cp\u003eTo generate the transitive closure of reachable objects, the algorithm traverses object fields,\nreading their values using reflection. It\u0026rsquo;s crucial to note that the image builder operates within\nthe Java environment. Only instance fields marked as \u0026ldquo;read\u0026rdquo; by the points-to analysis are considered\nduring this traversal. For instance, if a class has two instance fields but one isn\u0026rsquo;t marked as\nread, the object reachable through the unmarked field is excluded from the image heap.\u003c/p\u003e\n\u003cp\u003eWhen encountering a field value whose class hasn\u0026rsquo;t been previously identified by the points-to\nanalysis, the class is registered as a field type. This registration ensures that in subsequent\niterations of the points-to analysis, the new type is propagated to all field reads and transitive\nusages in the type-flow graph.\u003c/p\u003e\n\u003cp\u003eThe code snippet below outlines the core algorithm for heap snapshotting:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eDeclare List worklist := []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eDeclare Set reachableObjects := []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eFunction BuildHeapSnapshot(PointsToState pointsToState)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eFor Each field in pointsToState.getReachableStaticObjectFields()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCall AddObjectToWorkList(field.readValue())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eEnd For\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    For Each method in pointsToState.getReachableMethods()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        For Each constant in method.embeddedConstants()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Call AddObjectToWorkList(constant)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        End For\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    End For\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    While worklist.isNotEmpty\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Object current := Pop from worklist\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        If current Object is an Array\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            For Each value in current\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Call AddObjectToWorkList(value)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Add current.getClass() to pointsToState.getObjectArrayTypes()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            End For\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Else\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            For Each field in pointsToState.getReachableInstanceObjectFields(current.getClass())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Object value := field.read(current)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Call AddObjectToWorkList(value)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Add value.getClass() to pointsToState.getFieldValueTypes(field)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            End For\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        End If\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    End While\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Return reachableObjects\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eEnd Function\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn summary, the heap snapshotting algorithm efficiently constructs a snapshot of the heap by\nsystematically traversing reachable objects and their fields. This ensures that only relevant\nobjects are included in the image heap, optimizing the performance and memory footprint of the\nnative image.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIn conclusion, the process of heap snapshotting plays a critical role in the creation of native\nimages. By systematically traversing reachable objects and their fields, the heap snapshotting\nalgorithm constructs an object graph that represents the transitive closure of reachable objects\nfrom root pointers such as static fields. This object graph is then embedded into the native image\nas the image heap, serving as the initial heap upon native image startup.\u003c/p\u003e\n\u003cp\u003eThroughout the process, the algorithm relies on the state of the points-to analysis to determine\nwhich objects and fields are relevant for inclusion in the image heap. Objects and fields marked\nas \u0026ldquo;read\u0026rdquo; by the points-to analysis are considered, while unmarked entities are excluded.\nAdditionally, when encountering previously unseen types, the algorithm registers them for\npropagation in subsequent iterations of the points-to analysis.\u003c/p\u003e\n\u003cp\u003eOverall, heap snapshotting optimizes the performance and memory usage of native images by ensuring\nthat only necessary objects are included in the image heap. This systematic approach enhances the\nefficiency and reliability of native image execution.\u003c/p\u003e\n",
      "url": "https://iqnev.github.io/posts/enhancing_performance_with_static_analysis_image_initialization_and_heap_snapshotting/",
      "date_published": "15056-15-09T54:1515:00+03:00",
      "date_modified": "15056-15-09T54:1515:00+03:00",
      "author": {
        "name": "Calvin Tran",
        "url": "https://iqnev.github.io/"
      }
    },
    
    {
      "id": "0cf79753240b3de9b9bd2e5fdec3aa236fd06b8f",
      "title": "Exploring Graal: Next-Generation JIT Compilation for Java",
      "summary": "",
      "content_text": "The Graal compiler is a radical leap forward in dynamic, Just-In-Time (JIT) compilation technology. Heralded as a significant factor behind Java\u0026rsquo;s impressive performance, the role and function of JIT compilation within the Java Virtual Machine (JVM) architecture often perplexes many practitioners due to its complex and rather opaque nature.\nWhat is a JIT compiler? When you execute the javac command or use the IDE, your Java program is converted from Java source code into JVM bytecode. This process creates a binary representation of your Java program - a format much simpler and more compact than the original source code.\nClassical processors found in your computer or server, however, are incapable of executing JVM bytecode directly. This necessitates the JVM to interpret the bytecode.\nFigure 1 – How a just-in-time (JIT) compiler works\nInterpreters can often underperform compared to native code running on an actual processor, which motivates the JVM to invoke another compiler at runtime - the JIT compiler. The JIT compiler translates your bytecode into machine code that your processor can run directly. This sophisticated compiler executes a range of advanced optimizations to generate high-quality machine code.\nThis bytecode acts as an intermediate layer, enabling Java applications to run on various operating systems with different processor architectures. The JVM itself is a software program that interprets this bytecode instruction by instruction.\nThe Graal JIT Compiler – It’s Written in Java The OpenJDK implementation of the JVM contains two conventional JIT-compilers – the Client Compiler (C1) and the Server Compiler (C2 or Opto). The Client Compiler is optimized for faster operation and less optimized code output, making it ideal for desktop applications where extended JIT-compilation pauses can interrupt user experience. Conversely, the Server Compiler is engineered to spend more time producing highly optimized code, making it suitable for long-running server applications.\nThe two compilers can be used in tandem through \u0026ldquo;tiered compilation\u0026rdquo;. Initially, the code is compiled through C1, followed by C2 if execution frequency justifies the additional compilation time.\nDeveloped in C++, C2, despite its high-performance characteristics, has inherent downsides. C++ is an unsafe language; therefore, errors in the C2 module could cause the entire VM to crash. The complexity and rigidity of the inherited C++ code have also resulted in its maintenance and extendibility becoming a significant challenge.\nUnique to Graal, this JIT-compiler is developed in Java. The compiler\u0026rsquo;s main requirement is accepting JVM bytecode and outputting machine code – a high-level operation that doesn’t require a system-level language like C or C++.\nGraal being written in Java offers several advantages:\nImproved safety: Java\u0026rsquo;s garbage collection and managed memory approach eliminate the risk of memory-related crashes from the JIT compiler itself.\nEasier maintenance and extension: The Java codebase is more approachable for developers to contribute to and extend the capabilities of the JIT compiler.\nPortability: Java\u0026rsquo;s platform independence translates to the Graal JIT compiler potentially working on any platform with a Java Virtual Machine.\nThe JVM Compiler Interface(JVMCI) The JVM Compiler Interface (JVMCI) is an innovative feature and a new interface in the JVM (JEP 243: https://openjdk.org/jeps/243). Much like the Java annotation processing API, the JVMCI also permits the integration of a custom Java JIT compiler.\nThe JVMCI interface comprises a pure function from byte to byte[] :\n1interface JVMCICompiler { 2 3 byte[] compileMethod(byte[] bytecode); 4} This doesn\u0026rsquo;t capture the full complexity of real-life scenarios.\nIn practical applications, we frequently need additional information such as the number of local variables, the stack size, and data gathered from profiling in the interpreter to better understand how the code is performing. Hence, the interface takes a more complex input. Instead of just bytecode, it accepts a CompilationRequest:\n1public interface JVMCICompiler { 2 3 int INVOCATION_ENTRY_BCI = -1; 4 5 CompilationRequestResult compileMethod(CompilationRequest request); 6} JVMCICompiler.java\nA CompilationRequest encapsulates more comprehensive information, such as which JavaMethod is intended for compilation, and potentially much more data needed by the compiler.\nCompilationRequest.java\nThis approach has the benefit of providing all necessary details to the custom JIT-compiler in a more organized and contextual manner. To create a new JIT-compiler for the JVM, one must implement the JVMCICompiler interface.\nIdeal Graph An aspect where Graal truly shines in terms of performing sophisticated code optimization is in its use of a unique data structure: the program-dependence-graph, or colloquially, an \u0026ldquo;Ideal Graph\u0026rdquo;.\nThe program-dependence-graph is a directed graph that presents a visual representation of the dependencies between individual operations, essentially laying out the matrix of dependencies between different parts of your Java code.\nLet\u0026rsquo;s illustrate this concept with a simple example of adding two local variables, x and y. The program-dependence-graph for this operation in Graal\u0026rsquo;s context would involve three nodes and two edges:\nNodes:\nLoad(x) and Load(y): These nodes represent the operations of loading the values of variables x and y from memory into registers within the processor. Add: This node embodies the operation of adding the values loaded from x and y. Edges:\nTwo edges would be drawn from the Load(x) and Load(y) nodes to the Add node. These directional paths convey the data flow. They signify that the values loaded from x and y are the inputs to the addition operation. +---------\u0026gt;+---------\u0026gt;+ | Load(x) | Load(y) | +---------\u0026gt;+---------\u0026gt;+ | v +-----+ | Add | +-----+ In this illustration, the arrows represent the data flow between the nodes. The Load(x) and Load(y) nodes feed their loaded values into the Add node, which performs the addition operation. This visual representation helps Graal identify potential optimizations based on the dependencies between these operations.\nThis graph-based architecture provides the Graal compiler with a clear visible landscape of dependencies and scheduling in the code it compiles. The program-dependence-graph not only maps the flow of data and relationships between operations but also offers a canvas for Gaal to manipulate these relationships. Each node on the graph is a clear candidate for specific optimizations, while the edges indicate where alterations would propagate changes elsewhere in the code - both aspects influence how Graal optimizes your program\u0026rsquo;s performance.\nVisualizing and analyzing this graph can be achieved through a tool called the IdealGraphVisualizer, or IGV. This tool is invaluable in understanding the intricacies of Graal\u0026rsquo;s code optimization capabilities. It allows you to pinpoint how specific parts of your code are being analyzed, modified, and optimized, providing valuable insights for further code enhancements.\nLet\u0026rsquo;s consider a simple Java program that performs a complex operation in a loop:\n1public class Demo { 2 public static void main(String[] args) { 3 for (int i = 0; i \u0026lt; 1_000_000; i++) { 4 System.err.println(complexOperation(i, i + 2)); 5 } 6 } 7 8 public static int complexOperation(int a, int b) { 9 return ((a + b)-a) / 2; 10 } 11} When compiled with Graal, the Ideal Graph for this program would look something like this(Figure 2).\nFigure 2 – Graal Graphs\nTherefore, along with its method level optimizations and overall code performance improvements, this graph-based representation constitutes the key to understanding the power of the Graal compiler in optimizing your Java applications\nIn Conclusion The Graal JIT compiler represents a significant leap forward in Java performance optimization. Its unique characteristic of being written in Java itself offers a compelling alternative to traditional C-based compilers. This not only enhances safety and maintainability but also paves the way for a more dynamic and adaptable JIT compilation landscape.\nThe introduction of the JVM Compiler Interface (JVMCI) further amplifies this potential. By allowing the development of custom JIT compilers in Java, JVMCI opens doors for further experimentation and innovation. This could lead to the creation of specialized compilers targeting specific needs or architectures, ultimately pushing the boundaries of Java performance optimization.\nIn essence, Graal and JVMCI represent a paradigm shift in JIT compilation within the Java ecosystem. They lay the foundation for a future where JIT compilation can be customized, extended, and continuously improved, leading to even more performant and versatile Java applications.\n",
      "content_html": "\u003cp\u003eThe Graal compiler is a radical leap forward in dynamic, Just-In-Time (JIT) compilation technology.\nHeralded as a significant factor behind Java\u0026rsquo;s impressive performance, the role and function of JIT\ncompilation within the Java Virtual Machine (JVM) architecture often perplexes many practitioners\ndue to its complex and rather opaque nature.\u003c/p\u003e\n\u003cstyle\u003e\n.zoom {\n  transition: transform .2s; /* Animation */\n  margin: 0 auto;\n}\n\n.zoom:hover {\n  transform: scale(2.0); /* Zoom when hovered */\n}\n\u003c/style\u003e\n\u003ch2 id=\"what-is-a-jit-compiler\"\u003eWhat is a JIT compiler?\u003c/h2\u003e\n\u003cp\u003eWhen you execute the javac command or use the IDE, your Java program is converted from Java source\ncode into JVM bytecode. This\nprocess creates a binary representation of your Java program - a format much simpler and more\ncompact than the original source code.\u003c/p\u003e\n\u003cp\u003eClassical processors found in your computer or server, however, are incapable of executing JVM\nbytecode directly. This necessitates the JVM to interpret the bytecode.\u003c/p\u003e\n\u003cimg class=\"zoom\" src=\"/images/jit-compiler.jpg\" alt=\"How a just-in-time (JIT) compiler works\" title=\"How a just-in-time (JIT) compiler works\"\u003e\n\u003cbr\u003e\n\u003cp\u003e\u003cem\u003eFigure 1 – How a just-in-time (JIT) compiler works\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eInterpreters can often underperform compared to native code running on an actual processor, which\nmotivates the JVM to invoke another compiler at runtime - the JIT compiler. The JIT compiler\ntranslates your bytecode into machine code that your processor can run directly. This sophisticated\ncompiler executes a range of advanced optimizations to generate high-quality machine code.\u003c/p\u003e\n\u003cp\u003eThis bytecode acts as an intermediate layer, enabling Java applications to run on various operating\nsystems with different processor architectures. The JVM itself is a software program that interprets\nthis bytecode instruction by instruction.\u003c/p\u003e\n\u003ch2 id=\"the-graal-jit-compiler--its-written-in-java\"\u003eThe Graal JIT Compiler – It’s Written in Java\u003c/h2\u003e\n\u003cp\u003eThe OpenJDK implementation of the JVM contains two conventional JIT-compilers – the Client\nCompiler (C1) and the Server Compiler (C2 or Opto). The Client Compiler is optimized for faster\noperation and less optimized code output, making it ideal for desktop applications where extended\nJIT-compilation pauses can interrupt user experience. Conversely, the Server Compiler is engineered\nto spend more time producing highly optimized code, making it suitable for long-running server\napplications.\u003c/p\u003e\n\u003cp\u003eThe two compilers can be used in tandem through \u0026ldquo;tiered compilation\u0026rdquo;. Initially, the code is\ncompiled through C1, followed by C2 if execution frequency justifies the additional compilation\ntime.\u003c/p\u003e\n\u003cp\u003eDeveloped in C++, C2, despite its high-performance characteristics, has inherent downsides. C++ is\nan unsafe language; therefore, errors in the C2 module could cause the entire VM to crash. The\ncomplexity and rigidity of the inherited C++ code have also resulted in its maintenance and\nextendibility becoming a significant challenge.\u003c/p\u003e\n\u003cp\u003eUnique to Graal, this JIT-compiler is developed in Java. The compiler\u0026rsquo;s main requirement is\naccepting JVM bytecode and outputting machine code – a high-level operation that doesn’t require a\nsystem-level language like C or C++.\u003c/p\u003e\n\u003cp\u003eGraal being written in Java offers several advantages:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eImproved safety:\u003c/strong\u003e Java\u0026rsquo;s garbage collection and managed memory approach eliminate the risk of\nmemory-related crashes from the JIT compiler itself.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eEasier maintenance and extension:\u003c/strong\u003e The Java codebase is more approachable for developers to\ncontribute to and extend the capabilities of the JIT compiler.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003ePortability:\u003c/strong\u003e Java\u0026rsquo;s platform independence translates to the Graal JIT compiler potentially\nworking\non any platform with a Java Virtual Machine.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"the-jvm-compiler-interfacejvmci\"\u003eThe JVM Compiler Interface(JVMCI)\u003c/h2\u003e\n\u003cp\u003eThe JVM Compiler Interface (JVMCI) is an innovative feature and a new interface in the JVM (JEP\n243: \u003ca href=\"https://openjdk.org/jeps/243)\"\u003ehttps://openjdk.org/jeps/243)\u003c/a\u003e.\nMuch like the Java annotation processing API, the JVMCI also permits the integration of a custom\nJava JIT compiler.\u003c/p\u003e\n\u003cp\u003eThe JVMCI interface comprises a pure function from byte to \u003ccode\u003ebyte[]\u003c/code\u003e :\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eJVMCICompiler\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003ebyte\u003c/span\u003e[] \u003cspan style=\"color:#41a1c0\"\u003ecompileMethod\u003c/span\u003e(\u003cspan style=\"color:#fc5fa3\"\u003ebyte\u003c/span\u003e[] bytecode);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis doesn\u0026rsquo;t capture the full complexity of real-life scenarios.\u003c/p\u003e\n\u003cp\u003eIn practical applications, we frequently need additional information such as the number of local\nvariables, the stack size, and data gathered from profiling in the interpreter to better understand\nhow the code is performing. Hence, the interface takes a more complex input. Instead of just\nbytecode, it accepts a \u003ccode\u003eCompilationRequest\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eJVMCICompiler\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eint\u003c/span\u003e INVOCATION_ENTRY_BCI = -1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e  CompilationRequestResult \u003cspan style=\"color:#41a1c0\"\u003ecompileMethod\u003c/span\u003e(CompilationRequest request);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://github.com/graalvm/labs-openjdk/blob/378138863fe29bae72f34eb8e3af8ab7c457baa6/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/runtime/JVMCICompiler.java#L35\"\u003eJVMCICompiler.java\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003eCompilationRequest\u003c/code\u003e encapsulates more comprehensive information, such as which JavaMethod is\nintended for compilation, and potentially much more data needed by the compiler.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/graalvm/labs-openjdk/blob/master/src/jdk.internal.vm.ci/share/classes/jdk/vm/ci/code/CompilationRequest.java\"\u003eCompilationRequest.java\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThis approach has the benefit of providing all necessary details to the custom JIT-compiler in a\nmore organized and contextual manner. To create a new JIT-compiler for the JVM, one must implement\nthe \u003ccode\u003eJVMCICompiler\u003c/code\u003e interface.\u003c/p\u003e\n\u003ch2 id=\"ideal-graph\"\u003eIdeal Graph\u003c/h2\u003e\n\u003cp\u003eAn aspect where Graal truly shines in terms of performing sophisticated code optimization is in its\nuse of a unique data structure: the program-dependence-graph, or colloquially, an \u0026ldquo;Ideal Graph\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eThe program-dependence-graph is a directed graph that presents a visual representation of the\ndependencies between individual operations, essentially laying out the matrix of dependencies\nbetween different parts of your Java code.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s illustrate this concept with a simple example of adding two local variables, \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e.\nThe program-dependence-graph for this operation in Graal\u0026rsquo;s context would involve three nodes and two\nedges:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eNodes:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eLoad(x)\u003c/code\u003e and \u003ccode\u003eLoad(y)\u003c/code\u003e: These nodes represent the operations of loading the values of\nvariables \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e from memory into registers within the processor.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdd\u003c/code\u003e: This node embodies the operation of adding the values loaded from \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eEdges:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTwo edges would be drawn from the \u003ccode\u003eLoad(x)\u003c/code\u003e and \u003ccode\u003eLoad(y)\u003c/code\u003e nodes to the Add node. These\ndirectional paths convey the data flow. They signify that the values loaded from \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e\nare the inputs to the addition operation.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      +---------\u0026gt;+---------\u0026gt;+\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      | Load(x)  | Load(y)  |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      +---------\u0026gt;+---------\u0026gt;+\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                 |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                 v\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              +-----+\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              | Add |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              +-----+\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn this illustration, the arrows represent the data flow between the nodes. The \u003ccode\u003eLoad(x)\u003c/code\u003e and \u003ccode\u003eLoad(y)\u003c/code\u003e\nnodes feed their loaded values into the Add node, which performs the addition operation. This visual\nrepresentation helps Graal identify potential optimizations based on the dependencies between these\noperations.\u003c/p\u003e\n\u003cp\u003eThis graph-based architecture provides the Graal compiler with a clear visible landscape of\ndependencies and scheduling in the code it compiles. The program-dependence-graph not only maps the\nflow of data and relationships between operations but also offers a canvas for Gaal to manipulate\nthese relationships. Each node on the graph is a clear candidate for specific optimizations, while\nthe edges indicate where alterations would propagate changes elsewhere in the code - both aspects\ninfluence how Graal optimizes your program\u0026rsquo;s performance.\u003c/p\u003e\n\u003cp\u003eVisualizing and analyzing this graph can be achieved through a tool called\nthe \u003ccode\u003eIdealGraphVisualizer\u003c/code\u003e,\nor IGV. This tool is invaluable in understanding the intricacies of Graal\u0026rsquo;s code optimization\ncapabilities. It allows you to pinpoint how specific parts of your code are being analyzed,\nmodified, and optimized, providing valuable insights for further code enhancements.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s consider a simple Java program that performs a complex operation in a loop:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eDemo\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003emain\u003c/span\u003e(String[] args) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#fc5fa3\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#fc5fa3\"\u003eint\u003c/span\u003e i = 0; i \u0026lt; 1_000_000; i++) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e            System.err.println(complexOperation(i, i + 2));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003ecomplexOperation\u003c/span\u003e(\u003cspan style=\"color:#fc5fa3\"\u003eint\u003c/span\u003e a, \u003cspan style=\"color:#fc5fa3\"\u003eint\u003c/span\u003e b) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e ((a + b)-a) / 2;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhen compiled with Graal, the Ideal Graph for this program would look something like this(\u003cstrong\u003eFigure 2\u003c/strong\u003e).\u003c/p\u003e\n\u003cimg class=\"zoom\" src=\"/images/graal-graph.png\" alt=\"Graal Graphs\" title=\"Graal Graphs\"\u003e\n\u003cbr\u003e\n\u003cp\u003e\u003cem\u003eFigure 2 – Graal Graphs\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eTherefore, along with its method level optimizations and overall code performance improvements, this\ngraph-based representation constitutes the key to understanding the power of the Graal compiler in\noptimizing your Java applications\u003c/p\u003e\n\u003ch2 id=\"in-conclusion\"\u003eIn Conclusion\u003c/h2\u003e\n\u003cp\u003eThe Graal JIT compiler represents a significant leap forward in Java performance optimization. Its unique characteristic of being written in Java itself offers a compelling alternative to traditional C-based compilers. This not only enhances safety and maintainability but also paves the way for a more dynamic and adaptable JIT compilation landscape.\u003c/p\u003e\n\u003cp\u003eThe introduction of the JVM Compiler Interface (JVMCI) further amplifies this potential. By allowing the development of custom JIT compilers in Java, JVMCI opens doors for further experimentation and innovation. This could lead to the creation of specialized compilers targeting specific needs or architectures, ultimately pushing the boundaries of Java performance optimization.\u003c/p\u003e\n\u003cp\u003eIn essence, Graal and JVMCI represent a paradigm shift in JIT compilation within the Java ecosystem. They lay the foundation for a future where JIT compilation can be customized, extended, and continuously improved, leading to even more performant and versatile Java applications.\u003c/p\u003e\n",
      "url": "https://iqnev.github.io/posts/exploring_graal_next_generation_jit_compilation_for_java/",
      "date_published": "6056-06-09T54:66:00+03:00",
      "date_modified": "6056-06-09T54:66:00+03:00",
      "author": {
        "name": "Calvin Tran",
        "url": "https://iqnev.github.io/"
      }
    },
    
    {
      "id": "3e8fb1f1694c74c59e56bca79ab90795dadfe08d",
      "title": "Exploring Pinning in JVM's Virtual Thread Mechanism",
      "summary": "",
      "content_text": "Java\u0026rsquo;s virtual threads offer a lightweight alternative to traditional OS threads, enabling efficient concurrency management. But understanding their behavior is crucial for optimal performance. This blog post dives into pinning, a scenario that can impact virtual thread execution, and explores techniques to monitor and address it.\nVirtual Threads: A Lightweight Concurrency Approach Java\u0026rsquo;s virtual threads are managed entities that run on top of the underlying operating system threads (carrier threads). They provide a more efficient way to handle concurrency compared to creating numerous OS threads, as they incur lower overhead. The JVM maps virtual threads to carrier threads dynamically, allowing for better resource utilization.\nManaged by the JVM: Unlike OS threads that are directly managed by the operating system, virtual threads are created and scheduled by the Java Virtual Machine (JVM). This allows for finer-grained control and optimization within the JVM environment.\nReduced Overhead: Creating and managing virtual threads incurs significantly lower overhead compared to OS threads. This is because the JVM can manage a larger pool of virtual threads efficiently, utilizing a smaller number of underlying OS threads.\nCompatibility with Existing Code: Virtual threads are designed to be seamlessly integrated with existing Java code. They can be used alongside traditional OS threads and work within the familiar constructs like Executor and ExecutorService for managing concurrent.\nThe figure below shows the relationship between virtual threads and platform threads:\nPinning: When a Virtual Thread Gets Stuck Pinning occurs when a virtual thread becomes tied to its carrier thread. This essentially means the virtual thread cannot be preempted (switched to another carrier thread) while it\u0026rsquo;s in a pinned state. Here are common scenarios that trigger pinning:\nSynchronized Blocks and Methods: Executing code within a synchronized block or method leads to pinning. This ensures exclusive access to shared resources, preventing data corruption issues. Code Example:\n1import java.util.concurrent.ExecutorService; 2import java.util.concurrent.Executors; 3 4public class Main { 5 6 public static void main(String[] args) throws InterruptedException { 7 8 final Counter counter = new Counter(); 9 10 Runnable task = () -\u0026gt; { 11 for (int i = 0; i \u0026lt; 1000; i++) { 12 counter.increment(); 13 } 14 }; 15 16 Thread thread1 = new Thread(task); 17 Thread thread2 = new Thread(task); 18 19 thread1.start(); 20 thread2.start(); 21 22 thread1.join(); 23 thread2.join(); 24 25 System.out.println(\u0026#34;Final counter value: \u0026#34; + counter.getCount()); 26 } 27} 28 29class Counter { 30 31 private int count = 0; 32 33 public synchronized void increment() { 34 count++; 35 } 36 37 public synchronized int getCount() { 38 return count; 39 } 40} In this example, when a virtual thread enters the synchronized block, it becomes pinned to its carrier thread, but this is not always true. Java\u0026rsquo;s synchronized keyword alone is not enough to cause thread pinning in virtual threads. For thread pinning to occur, there must be a blocking point within a synchronized block that causes a virtual thread to trigger park, and ultimately disallows unmounting from its carrier thread. Thread pinning could cause a decrease in performance as it would negate the benefits of using lightweight/virtual threads.\nWhenever a virtual thread encounters a blocking point, its state is transitioned to PARKING. This state transition is indicated by invoking the VirtualThread.park() method:\n1// JDK core code 2void park() { 3 assert Thread.currentThread() == this; 4 // complete immediately if parking permit available or interrupted 5 if (getAndSetParkPermit(false) || interrupted) 6 return; 7 // park the thread 8 setState(PARKING); 9 try { 10 if (!yieldContinuation()) { 11 // park on the carrier thread when pinned 12 parkOnCarrierThread(false, 0); 13 } 14 } finally { 15 assert (Thread.currentThread() == this) \u0026amp;\u0026amp; (state() == RUNNING); 16 } 17} Let\u0026rsquo;s take a look at a code sample to illustrate this concept:\n1import java.util.concurrent.ExecutorService; 2import java.util.concurrent.Executors; 3 4public class Main { 5 6 public static void main(String[] args) { 7 8 Counter counter = new Counter(); 9 10 Runnable task = () -\u0026gt; { 11 for (int i = 0; i \u0026lt; 100; i++) { 12 counter.increment(); 13 } 14 }; 15 16 Thread thread1 = Thread.ofVirtual().start(task); 17 Thread thread2 = Thread.ofVirtual().start(task); 18 19 try { 20 thread1.join(); 21 thread2.join(); 22 } catch (InterruptedException e) { 23 throw new RuntimeException(e); 24 } 25 26 System.out.println(\u0026#34;Final counter value: \u0026#34; + counter.getCount()); 27 } 28} 29 30class Counter { 31 32 private int count = 0; 33 34 public void increment() { 35 synchronized (this) { 36 try { 37 Thread.sleep(100); // This simulates a blocking call within the synchronized block 38 } catch (InterruptedException e) { 39 e.printStackTrace(); 40 } 41 count++; 42 } 43 } 44 45 public synchronized int getCount() { 46 return count; 47 } 48} Native Methods/Foreign Functions: Running native methods or foreign functions can also cause pinning. The JVM might not be able to efficiently manage the virtual thread\u0026rsquo;s state during these operations. Monitoring Pinning with -Djdk.tracePinnedThreads=full The -Djdk.tracePinnedThreads=full flag is a JVM startup argument that provides detailed tracing information about virtual thread pinning. When enabled, it logs events like:\nVirtual thread ID involved in pinning Carrier thread ID to which the virtual thread is pinned Stack trace indicating the code section causing pinning Note\nUse this flag judiciously during debugging sessions only, as it introduces performance overhead.\nCompile the our demo code: 1javac Main.java Star the compiled code with the -Djdk.tracePinnedThreads=full flag: 1java -Djdk.tracePinnedThreads=full Main Observe the output in the console, which shows detailed information about virtual thread pinning.: 1Thread[#29,ForkJoinPool-1-worker-1,5,CarrierThreads] 2java.base/java.lang.VirtualThread$VThreadContinuation.onPinned(VirtualThread.java:183) 3java.base/jdk.internal.vm.Continuation.onPinned0(Continuation.java:393) 4java.base/java.lang.VirtualThread.parkNanos(VirtualThread.java:621) 5java.base/java.lang.VirtualThread.sleepNanos(VirtualThread.java:791) 6java.base/java.lang.Thread.sleep(Thread.java:507) 7Counter.increment(Main.java:38) \u0026lt;== monitors:1 8Main.lambda$main$0(Main.java:13) 9java.base/java.lang.VirtualThread.run(VirtualThread.java:309) 10 11Final counter value: 200 Fixing Pinning with Reentrant Locks Pinning is an undesirable scenario which impedes the performance of virtual threads. Reentrant locks serve as an effective tool to counteract pinning. Here\u0026rsquo;s how you can use Reentrant locks to mitigate pinning situations:\n1import java.util.concurrent.ExecutorService; 2import java.util.concurrent.Executors; 3import java.util.concurrent.locks.ReentrantLock; 4 5public class Main { 6 7 public static void main(String[] args) { 8 9 Counter counter = new Counter(); 10 11 Runnable task = () -\u0026gt; { 12 for (int i = 0; i \u0026lt; 100; i++) { 13 counter.increment(); 14 } 15 }; 16 17 Thread thread1 = Thread.ofVirtual().start(task); 18 Thread thread2 = Thread.ofVirtual().start(task); 19 20 try { 21 thread1.join(); 22 thread2.join(); 23 } catch (InterruptedException e) { 24 throw new RuntimeException(e); 25 } 26 27 System.out.println(\u0026#34;Final counter value: \u0026#34; + counter.getCount()); 28 } 29} 30 31class Counter { 32 33 private int count = 0; 34 private final ReentrantLock lock = new ReentrantLock(); 35 36 public void increment() { 37 lock.lock(); 38 try { 39 Thread.sleep(100); // This simulates a blocking call 40 count++; 41 } catch (InterruptedException e) { 42 e.printStackTrace(); 43 } finally { 44 lock.unlock(); 45 } 46 } 47 48 public int getCount() { 49 return count; 50 } 51} In the updated example, we use a ReentrantLock instead of a synchronized block. The thread can acquire the lock and release it immediately after it completes its operation, potentially reducing the duration of pinning compared to a synchronized block which might hold the lock for a longer period.\nIn Conclusion Java\u0026rsquo;s virtual threads stand as a testimony to the evolution and the capabilities of the language. They offer a fresh, lightweight alternative to traditional OS threads, providing a bridge to efficient concurrency management. Taking the time to dig deep and understand key concepts such as thread pinning can equip developers with the know-how to leverage the full potential of these lightweight threads. This knowledge not only prepares developers for leveraging upcoming features but also empowers them to resolve complex concurrency control issues more effectively in their current projects.\n",
      "content_html": "\u003cp\u003eJava\u0026rsquo;s virtual threads offer a lightweight alternative to traditional OS threads, enabling efficient\nconcurrency management. But understanding their behavior is crucial for optimal performance.\nThis blog post dives into pinning, a scenario that can impact virtual thread execution, and explores\ntechniques to monitor and address it.\u003c/p\u003e\n\u003ch2 id=\"virtual-threads-a-lightweight-concurrency-approach\"\u003eVirtual Threads: A Lightweight Concurrency Approach\u003c/h2\u003e\n\u003cp\u003eJava\u0026rsquo;s virtual threads are managed entities that run on top of the underlying operating system\nthreads (carrier threads). They provide a more efficient way to handle concurrency compared to\ncreating numerous OS threads, as they incur lower overhead. The JVM maps virtual threads to carrier\nthreads dynamically, allowing for better resource utilization.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eManaged by the JVM: Unlike OS threads that are directly managed by the operating system, virtual\nthreads are created and scheduled by the Java Virtual Machine (JVM). This allows for finer-grained\ncontrol and optimization within the JVM environment.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eReduced Overhead: Creating and managing virtual threads incurs significantly lower overhead\ncompared to OS threads. This is because the JVM can manage a larger pool of virtual threads\nefficiently, utilizing a smaller number of underlying OS threads.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCompatibility with Existing Code: Virtual threads are designed to be seamlessly integrated with\nexisting Java code. They can be used alongside traditional OS threads and work within the familiar\nconstructs like Executor and ExecutorService for managing concurrent.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe figure below shows the relationship between virtual threads and platform threads:\u003c/p\u003e\n\u003cbr\u003e\n\u003cimg src=\"/images/virtual_threads.jpg\" alt=\"Virtual threads\" title=\"Virtual threads\"\u003e\n\u003cbr\u003e\n\u003ch2 id=\"pinning-when-a-virtual-thread-gets-stuck\"\u003ePinning: When a Virtual Thread Gets Stuck\u003c/h2\u003e\n\u003cp\u003ePinning occurs when a virtual thread becomes tied to its carrier thread. This essentially means the\nvirtual thread cannot be preempted (switched to another carrier thread) while it\u0026rsquo;s in a pinned\nstate. Here are common scenarios that trigger pinning:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSynchronized Blocks and Methods: Executing code within a synchronized block or method leads to\npinning. This ensures exclusive access to shared resources, preventing data corruption issues.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eCode Example:\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e java.util.concurrent.ExecutorService;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e java.util.concurrent.Executors;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eMain\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003emain\u003c/span\u003e(String[] args) \u003cspan style=\"color:#fc5fa3\"\u003ethrows\u003c/span\u003e InterruptedException {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e Counter counter = \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e Counter();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e    Runnable task = () -\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#fc5fa3\"\u003eint\u003c/span\u003e i = 0; i \u0026lt; 1000; i++) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e        counter.increment();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e    };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e    Thread thread1 = \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e Thread(task);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e    Thread thread2 = \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e Thread(task);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\u003c/span\u003e\u003cspan\u003e    thread1.start();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\u003c/span\u003e\u003cspan\u003e    thread2.start();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\u003c/span\u003e\u003cspan\u003e    thread1.join();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\u003c/span\u003e\u003cspan\u003e    thread2.join();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\u003c/span\u003e\u003cspan\u003e    System.out.println(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;Final counter value: \u0026#34;\u003c/span\u003e + counter.getCount());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eCounter\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eint\u003c/span\u003e count = 0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003esynchronized\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eincrement\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\u003c/span\u003e\u003cspan\u003e    count++;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003esynchronized\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003egetCount\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e count;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn this example, when a virtual thread enters the \u003ccode\u003esynchronized\u003c/code\u003e block, it becomes pinned to its\ncarrier thread, but this is not always true.\nJava\u0026rsquo;s \u003ccode\u003esynchronized\u003c/code\u003e keyword alone is not enough to cause thread pinning in virtual\nthreads. For thread pinning to occur, there must be a blocking point within a \u003ccode\u003esynchronized\u003c/code\u003e block\nthat causes a virtual thread to trigger park, and ultimately disallows unmounting from its carrier\nthread. Thread pinning could cause a decrease in performance as it would negate the benefits of\nusing lightweight/virtual threads.\u003c/p\u003e\n\u003cp\u003eWhenever a virtual thread encounters a blocking point, its state is transitioned to \u003ccode\u003ePARKING\u003c/code\u003e.\nThis state transition is indicated by invoking the \u003ccode\u003eVirtualThread.park()\u003c/code\u003e method:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#6c7986\"\u003e// JDK core code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003epark\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eassert\u003c/span\u003e Thread.currentThread() == \u003cspan style=\"color:#fc5fa3\"\u003ethis\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#6c7986\"\u003e// complete immediately if parking permit available or interrupted\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (getAndSetParkPermit(\u003cspan style=\"color:#fc5fa3\"\u003efalse\u003c/span\u003e) || interrupted)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#6c7986\"\u003e// park the thread\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e  setState(PARKING);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003etry\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (!yieldContinuation()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#6c7986\"\u003e// park on the carrier thread when pinned\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e      parkOnCarrierThread(\u003cspan style=\"color:#fc5fa3\"\u003efalse\u003c/span\u003e, 0);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e  } \u003cspan style=\"color:#fc5fa3\"\u003efinally\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003eassert\u003c/span\u003e (Thread.currentThread() == \u003cspan style=\"color:#fc5fa3\"\u003ethis\u003c/span\u003e) \u0026amp;\u0026amp; (state() == RUNNING);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLet\u0026rsquo;s take a look at a code sample to illustrate this concept:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e java.util.concurrent.ExecutorService;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e java.util.concurrent.Executors;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eMain\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003emain\u003c/span\u003e(String[] args) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e    Counter counter = \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e Counter();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e    Runnable task = () -\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#fc5fa3\"\u003eint\u003c/span\u003e i = 0; i \u0026lt; 100; i++) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e        counter.increment();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e    };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e    Thread thread1 = Thread.ofVirtual().start(task);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e    Thread thread2 = Thread.ofVirtual().start(task);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003etry\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\u003c/span\u003e\u003cspan\u003e      thread1.join();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\u003c/span\u003e\u003cspan\u003e      thread2.join();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\u003c/span\u003e\u003cspan\u003e    } \u003cspan style=\"color:#fc5fa3\"\u003ecatch\u003c/span\u003e (InterruptedException e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003ethrow\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e RuntimeException(e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\u003c/span\u003e\u003cspan\u003e    System.out.println(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;Final counter value: \u0026#34;\u003c/span\u003e + counter.getCount());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eCounter\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eint\u003c/span\u003e count = 0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eincrement\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003esynchronized\u003c/span\u003e (\u003cspan style=\"color:#fc5fa3\"\u003ethis\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003etry\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\u003c/span\u003e\u003cspan\u003e        Thread.sleep(100); \u003cspan style=\"color:#6c7986\"\u003e// This simulates a blocking call within the synchronized block\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\u003c/span\u003e\u003cspan\u003e      } \u003cspan style=\"color:#fc5fa3\"\u003ecatch\u003c/span\u003e (InterruptedException e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\u003c/span\u003e\u003cspan\u003e        e.printStackTrace();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\u003c/span\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e41\u003c/span\u003e\u003cspan\u003e      count++;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e42\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e43\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e44\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e45\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003esynchronized\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003egetCount\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e46\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e count;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e47\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e48\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eNative Methods/Foreign Functions: Running native methods or foreign functions can also cause\npinning. The JVM might not be able to efficiently manage the virtual thread\u0026rsquo;s state during these\noperations.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr\u003e \n\u003ch2 id=\"monitoring-pinning-with--djdktracepinnedthreadsfull\"\u003eMonitoring Pinning with \u003ccode\u003e-Djdk.tracePinnedThreads=full\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003e-Djdk.tracePinnedThreads=full\u003c/code\u003e flag is a JVM startup argument that provides detailed tracing\ninformation about virtual thread pinning. When enabled, it logs events like:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eVirtual thread ID involved in pinning\u003c/li\u003e\n\u003cli\u003eCarrier thread ID to which the virtual thread is pinned\u003c/li\u003e\n\u003cli\u003eStack trace indicating the code section causing pinning\u003c/li\u003e\n\u003c/ul\u003e\n\u003cstyle type=\"text/css\"\u003e.notice{--root-color:#444;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#c33;--warning-content:#fee;--info-title:#fb7;--info-content:#fec;--note-title:#6be;--note-content:#e7f2fa;--tip-title:#5a5;--tip-content:#efe}@media (prefers-color-scheme:dark){.notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}}body.dark .notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}.notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:var(--root-color);background:var(--root-background)}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:var(--title-color);background:var(--title-background)}.notice.warning .notice-title{background:var(--warning-title)}.notice.warning{background:var(--warning-content)}.notice.info .notice-title{background:var(--info-title)}.notice.info{background:var(--info-content)}.notice.note .notice-title{background:var(--note-title)}.notice.note{background:var(--note-content)}.notice.tip .notice-title{background:var(--tip-title)}.notice.tip{background:var(--tip-content)}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:.125em;position:relative}\u003c/style\u003e\n\u003cdiv\u003e\u003csvg width=\"0\" height=\"0\" display=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003csymbol id=\"tip-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"note-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"warning-notice\" viewBox=\"0 0 576 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"info-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z\"/\u003e\u003c/symbol\u003e\u003c/svg\u003e\u003c/div\u003e\u003cdiv class=\"notice note\" \u003e\n\u003cp class=\"first notice-title\"\u003e\u003cspan class=\"icon-notice baseline\"\u003e\u003csvg\u003e\u003cuse href=\"#note-notice\"\u003e\u003c/use\u003e\u003c/svg\u003e\u003c/span\u003eNote\u003c/p\u003e\u003cp\u003eUse this flag judiciously during debugging sessions only, as it introduces performance overhead.\u003c/p\u003e\u003c/div\u003e\n\n\u003col\u003e\n\u003cli\u003eCompile the our demo code:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003ejavac Main.java\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003eStar the compiled code with the \u003ccode\u003e-Djdk.tracePinnedThreads=full\u003c/code\u003e flag:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003ejava -Djdk.tracePinnedThreads=full Main\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003eObserve the output in the console, which shows detailed information about virtual thread\npinning.:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003eThread[\u003cspan style=\"color:#6c7986\"\u003e#29,ForkJoinPool-1-worker-1,5,CarrierThreads]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003ejava.base/java.lang.VirtualThread\u003cspan style=\"color:#41a1c0\"\u003e$VThreadContinuation\u003c/span\u003e.onPinned(VirtualThread.java:183)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003ejava.base/jdk.internal.vm.Continuation.onPinned0(Continuation.java:393)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003ejava.base/java.lang.VirtualThread.parkNanos(VirtualThread.java:621)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003ejava.base/java.lang.VirtualThread.sleepNanos(VirtualThread.java:791)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003ejava.base/java.lang.Thread.sleep(Thread.java:507)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003eCounter.increment(Main.java:38) \u0026lt;== monitors:1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003eMain.lambda\u003cspan style=\"color:#41a1c0\"\u003e$main$0\u003c/span\u003e(Main.java:13)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003ejava.base/java.lang.VirtualThread.run(VirtualThread.java:309)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003eFinal counter value: \u003cspan style=\"color:#d0bf69\"\u003e200\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbr\u003e \n\u003ch2 id=\"fixing-pinning-with-reentrant-locks\"\u003eFixing Pinning with Reentrant Locks\u003c/h2\u003e\n\u003cp\u003ePinning is an undesirable scenario which impedes the performance of virtual threads. Reentrant locks serve as an effective tool to counteract pinning.\nHere\u0026rsquo;s how you can use \u003ccode\u003eReentrant\u003c/code\u003e locks to mitigate pinning situations:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e java.util.concurrent.ExecutorService;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e java.util.concurrent.Executors;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e java.util.concurrent.locks.ReentrantLock;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eMain\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003emain\u003c/span\u003e(String[] args) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e    Counter counter = \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e Counter();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e    Runnable task = () -\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#fc5fa3\"\u003eint\u003c/span\u003e i = 0; i \u0026lt; 100; i++) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e        counter.increment();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e    };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e    Thread thread1 = Thread.ofVirtual().start(task);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\u003c/span\u003e\u003cspan\u003e    Thread thread2 = Thread.ofVirtual().start(task);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003etry\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\u003c/span\u003e\u003cspan\u003e      thread1.join();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\u003c/span\u003e\u003cspan\u003e      thread2.join();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\u003c/span\u003e\u003cspan\u003e    } \u003cspan style=\"color:#fc5fa3\"\u003ecatch\u003c/span\u003e (InterruptedException e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003ethrow\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e RuntimeException(e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\u003c/span\u003e\u003cspan\u003e    System.out.println(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;Final counter value: \u0026#34;\u003c/span\u003e + counter.getCount());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eCounter\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eint\u003c/span\u003e count = 0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e ReentrantLock lock = \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e ReentrantLock();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eincrement\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\u003c/span\u003e\u003cspan\u003e    lock.lock();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003etry\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\u003c/span\u003e\u003cspan\u003e      Thread.sleep(100); \u003cspan style=\"color:#6c7986\"\u003e// This simulates a blocking call\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\u003c/span\u003e\u003cspan\u003e      count++;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e41\u003c/span\u003e\u003cspan\u003e    } \u003cspan style=\"color:#fc5fa3\"\u003ecatch\u003c/span\u003e (InterruptedException e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e42\u003c/span\u003e\u003cspan\u003e      e.printStackTrace();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e43\u003c/span\u003e\u003cspan\u003e    } \u003cspan style=\"color:#fc5fa3\"\u003efinally\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e44\u003c/span\u003e\u003cspan\u003e      lock.unlock();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e45\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e46\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e47\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e48\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003egetCount\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e49\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e count;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e50\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e51\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn the updated example, we use a \u003ccode\u003eReentrantLock\u003c/code\u003e instead of a \u003ccode\u003esynchronized\u003c/code\u003e block. The thread can\nacquire the lock and release it immediately after it completes its operation,\npotentially reducing the duration of pinning compared to a \u003ccode\u003esynchronized\u003c/code\u003e block which might hold the\nlock for a longer period.\u003c/p\u003e\n\u003ch2 id=\"in-conclusion\"\u003eIn Conclusion\u003c/h2\u003e\n\u003cp\u003eJava\u0026rsquo;s virtual threads stand as a testimony to the evolution and the capabilities of the language.\nThey offer a fresh, lightweight alternative to traditional OS threads, providing a bridge to\nefficient concurrency management. Taking the time to dig deep and understand key concepts such as\nthread pinning can equip developers with the know-how to leverage the full potential of these\nlightweight threads. This knowledge not only prepares developers for leveraging upcoming features\nbut also empowers them to resolve complex concurrency control issues more effectively in their\ncurrent projects.\u003c/p\u003e\n",
      "url": "https://iqnev.github.io/posts/exploring_pinning_in_jvms_virtual_thread_mechanism/",
      "date_published": "28036-28-09T30:2828:00+00:00",
      "date_modified": "28036-28-09T30:2828:00+00:00",
      "author": {
        "name": "Calvin Tran",
        "url": "https://iqnev.github.io/"
      }
    },
    
    {
      "id": "7d73ccddb5e7532c2235b7e747e4190d7aeee856",
      "title": "The impact of the right technology and architecture on project success",
      "summary": "",
      "content_text": "In this post, we will journey through my personal experiences that underscore the critical role played by apt technology and architecture in project outcomes. We will see why getting these aspects right from the get-go is of paramount importance.\nStory I had the opportunity to dive into the fascinating world of parking and traffic systems – a field ripe with potential for IoT/IIoT solutions. This was a dream-come-true opportunity for me, reminiscent of my high school days tinkering with electronics and microcontrollers.\nOnce I started working on the project, however, I quickly realized that the existing system didn\u0026rsquo;t meet the business requirement. Delving into the system’s program, I found it was written in Earlang(it is a language created by the Ericsson Computer Science Laboratory in the mid-1980s for parallel and distributed computing). Although a renowned language trusted by top-tier entities like Facebook, Amazon, and Google, it wasn\u0026rsquo;t the perfect fit for our project, which necessitated operations on various types of devices like: PT camera, PT VMS, Pay station, proximity cards (RFID), Automatic License Plate Recognition (ALPR), Near-field Communication (NFC), Dedicated Short-Range Communications (DSRC), Overhead radars, Bluetooth, LCD panel UI realization and also different communication protocols.\nMy experience with the aforementioned project got me cogitating about a suitable technology that could help us navigate our way out of the predicament.\nThus, the quest for the ideal technology commenced. It needed to fulfill the following essential functions:\nImplement drivers for diverse devices.\nImplement essential business logic.\nImplement a user interface for terminal devices, like LCDs. Although Electron had been in use, it came with several issues and generally did not seem to be a fitting choice.\nIn the course of my research, I revisited Qt, a software I had familiarized with during my university days. I also had an acquaintance who was proficient in using Qt.\nSubsequent to crafting and demonstrating a successful Qt prototype application to the management, we received approval to transition from Earlang to Qt.\nWhat is Qt? To shed more light on Qt, it employs C++ code in conjunction with several non-standard extensions. Qt is a cross-platform application framework renowned for developing software applications with graphical user interfaces (GUIs). Notably, Qt provides tools and libraries to fabricate applications across desktop, mobile, embedded systems, and web platforms.\nA feather in Qt\u0026rsquo;s proverbial cap is its comprehensive feature set. It features a powerful set of tools for GUI development, cross-platform support, graphics and multimedia support, and Qt Quick and QML for building modern UIs.\nOur decision to switch to Qt was made easier by considering its widespread use globally in popular platforms like:\nDesktop\nKDE Plasma LXQt Unity 2D Embedded and mobile\nTesla Model S in-car UI Mercedes webOS MeeGo Platforms\nSkype Telegram Teamviewer Wireshark VLC media player Rethinking Architecture With Qt in place, we addressed another critical flaw in the project – the underwhelming architecture unsuitable for a full Machine-to-Machine (M2M) system.\nI drafted diagram (Figure 1), and want to show you a multi component architecture was necessitated to accommodate the solution\u0026rsquo;s requirements and provide a versatile system. A well-planned multi component architecture would provide a future-ready solution catering to the customer’s requirements.\nFigure 1 – An example of an IIoT Smart parking architecture\nThe graphic(Figure 1) above merely depicts the ideal structure of such a system. Regrettably, we encountered a system devoid of fundamental concepts, prompting us to discard the initial architecture.\nThis issue was exacerbated by the fact that a UI designer served as a crucial advisor to the project!!!\nHowever, we managed to transition our code from Earlang to Qt and introduce a new architectural paradigm that set the stage for a more robust solution in the future.\nAdditional An IIoT gateway typically consists of the following components:\nSensors/devices: These are installed in parking spaces to detect the presence or absence of a vehicle. Common types of sensors include sensors,actuators, video cameras etc. Field sensors or actuators are connected to I/O module masters. These I/O module masters transmit data to the on-premises PLC or IPC. The PLC/IPC is then connected to the IIoT gateway, which serves as a bridge between the PLC/IPC and the cloud.\nCommunication network: This network carries data between the sensors and the cloud platform. Common communication protocols include Wi-Fi, cellular, and Bluetooth Low Energy (BLE).\nCloud platform: This platform(Parking Guidance System) collects and stores data from the sensors, as well as manages the overall system. The cloud platform can also provide real-time information to users about parking availability, as well as allow users to reserve parking spaces.\nUser interface (UI): This is the interface that users interact with to find parking information and make reservations. The UI can be a mobile app, a website, or a physical display in a parking lot.\nDrawing from the IPSO Alliance, we implemented the IPSO Smart Objects concept. This approach enabled our system to seamlessly integrate and initialize various components and create a virtual hardware replica in the Cloud.\nThe Triumphant Unveiling After months of dedicated effort, our team proudly unveiled a fully functional prototype at the prestigious Traffic Solutions Exhibition in Amsterdam. As we showcased our innovative system to industry experts and potential clients, the response was overwhelmingly positive. Attendees were captivated by the seamless integration of cutting-edge technologies and the robust architectural framework we had meticulously designed.\nThe prototype\u0026rsquo;s ability to seamlessly orchestrate various components, from automats and cameras to scanning devices and intuitive user interfaces, garnered widespread acclaim. Visitors marveled at the system\u0026rsquo;s versatility, real-time monitoring capabilities, and its potential to revolutionize the parking and traffic management landscape.\nThe positive feedback we received not only validated our team\u0026rsquo;s hard work but also reinforced our belief in the power of thoughtful planning and unwavering commitment to excellence. It was a resounding affirmation that our decision to embrace the right technology and design a future-proof architecture had paid off handsomely.\nAs we basked in the success of our triumphant unveiling, we knew that this was merely the beginning of an exciting journey. Armed with the invaluable lessons learned and the overwhelming support from industry leaders, we were more motivated than ever to continue pushing boundaries and delivering innovative solutions that would shape the future of intelligent transportation systems.\nKey Takeaways Reflecting on these experiences, some key takeaways emerge:\nFor Managers\nNever entrust critical decisions to people lacking expertise in the relevant area.\nSelecting the right team members for a project is integral to its success.\nFor Engineers\nDon\u0026rsquo;t allow your existing knowledge of a programming language or concept to cloud your judgement. Remember that each tool is suited for solving specific kinds of problems and it\u0026rsquo;s rare for one tool to fit all cases.\nNever underestimate the power of well-thought-out architecture. It serves as the project\u0026rsquo;s foundation and shapes its future evolutions. So always guess that the Voyager ships are still running at million km distance from Earth, and were designed in the 70s. Engineers then designed a good foundation (architecture), which has allowed them to create such well-functioning devices. The Brains of the Voyager Spacecraft: Command, Data, and Attitude Control Computers\nBeware of the Dunning-Kruger Effect, where people with little knowledge often overestimate their abilities as they don\u0026rsquo;t comprehend the depth of expertise required to master something.\nConclusion The journey through this project has taught me invaluable lessons about the significance of making well-informed decisions and laying a solid architectural foundation from the very start. As engineers and developers, we often get caught up in the excitement of new technologies or familiar tools, but it\u0026rsquo;s crucial to step back and critically evaluate whether they truly align with the project\u0026rsquo;s requirements.\n",
      "content_html": "\u003cp\u003eIn this post, we will journey through my personal experiences that underscore the critical role\nplayed by apt technology and architecture in project outcomes.\nWe will see why getting these aspects right from the get-go is of paramount importance.\u003c/p\u003e\n\u003ch2 id=\"story\"\u003eStory\u003c/h2\u003e\n\u003cp\u003eI had the opportunity to dive into the fascinating world of parking and traffic systems – a field\nripe with potential for IoT/IIoT solutions.\nThis was a dream-come-true opportunity for me, reminiscent of my high school days tinkering with\nelectronics and microcontrollers.\u003c/p\u003e\n\u003cp\u003eOnce I started working on the project, however, I quickly realized that the existing system didn\u0026rsquo;t\nmeet the business requirement. Delving into the system’s program,\nI found it was written in Earlang(it is a language created by the Ericsson Computer Science\nLaboratory in the mid-1980s for parallel and distributed computing). Although a renowned\nlanguage trusted by top-tier entities like Facebook,\nAmazon, and Google, it wasn\u0026rsquo;t the perfect fit for our project,\nwhich necessitated operations on various types of devices like: PT camera, PT VMS, Pay station,\nproximity cards (RFID), Automatic License Plate Recognition (ALPR), Near-field Communication (NFC),\nDedicated Short-Range Communications (DSRC), Overhead radars, Bluetooth, LCD panel UI realization\nand also\ndifferent communication protocols.\u003c/p\u003e\n\u003cp\u003eMy experience with the aforementioned project got me cogitating about a suitable technology that\ncould help us navigate our way out of the predicament.\u003c/p\u003e\n\u003cp\u003eThus, the quest for the ideal technology commenced. It needed to fulfill the following essential\nfunctions:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eImplement drivers for diverse devices.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eImplement essential business logic.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eImplement a user interface for terminal devices, like LCDs. Although Electron had been in use, it\ncame with several issues and generally did not seem to be a fitting choice.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIn the course of my research, I revisited Qt, a software I had familiarized with during my\nuniversity\ndays. I also had an acquaintance who was proficient in using Qt.\u003c/p\u003e\n\u003cp\u003eSubsequent to crafting and demonstrating a successful Qt prototype application to the management, we\nreceived approval to transition from Earlang to Qt.\u003c/p\u003e\n\u003ch2 id=\"what-is-qt\"\u003eWhat is Qt?\u003c/h2\u003e\n\u003cp\u003eTo shed more light on Qt, it employs C++ code in conjunction with several non-standard extensions.\nQt is a cross-platform application framework\nrenowned for developing software applications with graphical user interfaces (GUIs). Notably, Qt\nprovides tools and libraries to fabricate applications across\ndesktop, mobile, embedded systems, and web platforms.\u003c/p\u003e\n\u003cp\u003eA feather in Qt\u0026rsquo;s proverbial cap is its comprehensive feature set. It features a powerful set of\ntools for GUI development, cross-platform support, graphics and\nmultimedia support, and Qt Quick and QML for building modern UIs.\u003c/p\u003e\n\u003cp\u003eOur decision to switch to Qt was made easier by considering its widespread use globally in popular\nplatforms like:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eDesktop\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eKDE Plasma\u003c/li\u003e\n\u003cli\u003eLXQt\u003c/li\u003e\n\u003cli\u003eUnity 2D\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eEmbedded and mobile\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTesla Model S in-car UI\u003c/li\u003e\n\u003cli\u003eMercedes\u003c/li\u003e\n\u003cli\u003ewebOS\u003c/li\u003e\n\u003cli\u003eMeeGo\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePlatforms\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSkype\u003c/li\u003e\n\u003cli\u003eTelegram\u003c/li\u003e\n\u003cli\u003eTeamviewer\u003c/li\u003e\n\u003cli\u003eWireshark\u003c/li\u003e\n\u003cli\u003eVLC media player\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003ca href=\"https://www.qt.io/\"\u003e\u003cimg\n  src=\"/images/qt-platform.png\"\n  alt=\"Qt\"\n  loading=\"lazy\"\n  decoding=\"async\"\n  class=\"full-width\"\n/\u003e\n\n\u003c/a\u003e\u003c/p\u003e\n\u003cbr\u003e\n\u003ch2 id=\"rethinking-architecture\"\u003eRethinking Architecture\u003c/h2\u003e\n\u003cp\u003eWith Qt in place, we addressed another critical flaw in the project – the underwhelming architecture\nunsuitable for a full Machine-to-Machine (M2M) system.\u003c/p\u003e\n\u003cp\u003eI drafted diagram (\u003cstrong\u003eFigure 1\u003c/strong\u003e), and want to show you a multi component architecture was\nnecessitated to\naccommodate the solution\u0026rsquo;s requirements and provide a versatile system.\nA well-planned multi component architecture would provide a future-ready solution catering to the\ncustomer’s requirements.\u003c/p\u003e\n\u003cimg src=\"/images/smart_arch.jpg\" alt=\"Smart parking architecture\" title=\"Smart parking architecture\"\u003e\n\u003cbr\u003e\n\u003cp\u003e\u003cem\u003eFigure 1 – An example of an IIoT Smart parking architecture\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThe graphic(\u003cstrong\u003eFigure 1\u003c/strong\u003e) above merely depicts the ideal structure of such a system. Regrettably, we\nencountered a system devoid of fundamental concepts, prompting us to discard the initial\narchitecture.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThis issue was exacerbated by the fact that a UI designer served as a crucial advisor to the project!!!\u003c/strong\u003e\u003c/p\u003e\n\u003cimg src=\"/images/kidding.png\" alt=\"Are you kidding me?\" title=\"Are you kidding me?\"\u003e\n\u003cbr\u003e\n\u003cp\u003eHowever, we managed to transition our code from Earlang to Qt and introduce a new architectural\nparadigm that set the stage for a more robust solution in the future.\u003c/p\u003e\n\u003ch2 id=\"additional\"\u003eAdditional\u003c/h2\u003e\n\u003cp\u003eAn IIoT gateway typically consists of the following components:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSensors/devices:\u003c/strong\u003e These are installed in parking spaces to detect the presence or absence of a\nvehicle. Common types of sensors include sensors,actuators, video cameras etc. Field sensors or\nactuators are connected to I/O module masters. These I/O module masters transmit data to the\non-premises PLC or IPC. The PLC/IPC is then connected to the IIoT gateway, which serves as a bridge\nbetween the PLC/IPC and the cloud.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCommunication network:\u003c/strong\u003e This network carries data between the sensors and the cloud platform.\nCommon communication protocols include Wi-Fi, cellular, and Bluetooth Low Energy (BLE).\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCloud platform:\u003c/strong\u003e This platform(Parking Guidance System) collects and stores data from the\nsensors, as well as manages the overall system. The cloud platform can also provide real-time\ninformation to users about parking availability, as well as allow users to reserve parking spaces.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUser interface (UI):\u003c/strong\u003e This is the interface that users interact with to find parking\ninformation and make reservations. The UI can be a mobile app, a website, or a physical display in a\nparking lot.\u003c/p\u003e\n\u003cp\u003eDrawing from the IPSO Alliance, we implemented the IPSO Smart Objects concept. This approach enabled\nour system to seamlessly integrate and initialize various\ncomponents and create a virtual hardware replica in the Cloud.\u003c/p\u003e\n\u003ch2 id=\"the-triumphant-unveiling\"\u003eThe Triumphant Unveiling\u003c/h2\u003e\n\u003cp\u003eAfter months of dedicated effort, our team proudly unveiled a fully functional prototype at the\nprestigious Traffic Solutions Exhibition in Amsterdam. As we showcased our innovative system to\nindustry experts and potential clients, the response was overwhelmingly positive. Attendees were\ncaptivated by the seamless integration of cutting-edge technologies and the robust architectural\nframework we had meticulously designed.\u003c/p\u003e\n\u003cp\u003eThe prototype\u0026rsquo;s ability to seamlessly orchestrate various components, from automats and cameras to\nscanning devices and intuitive user interfaces, garnered widespread acclaim. Visitors marveled at\nthe system\u0026rsquo;s versatility, real-time monitoring capabilities, and its potential to revolutionize the\nparking and traffic management landscape.\u003c/p\u003e\n\u003cp\u003eThe positive feedback we received not only validated our team\u0026rsquo;s hard work but also reinforced our\nbelief in the power of thoughtful planning and unwavering commitment to excellence. It was a\nresounding affirmation that our decision to embrace the right technology and design a future-proof\narchitecture had paid off handsomely.\u003c/p\u003e\n\u003cp\u003eAs we basked in the success of our triumphant unveiling, we knew that this was merely the beginning\nof an exciting journey. Armed with the invaluable lessons learned and the overwhelming support from\nindustry leaders, we were more motivated than ever to continue pushing boundaries and delivering\ninnovative solutions that would shape the future of intelligent transportation systems.\u003c/p\u003e\n\u003ch2 id=\"key-takeaways\"\u003eKey Takeaways\u003c/h2\u003e\n\u003cp\u003eReflecting on these experiences, some key takeaways emerge:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFor Managers\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eNever entrust critical decisions to people lacking expertise in the relevant area.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSelecting the right team members for a project is integral to its success.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eFor Engineers\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eDon\u0026rsquo;t allow your existing knowledge of a programming language or concept to cloud your judgement.\nRemember that each tool is suited for solving specific kinds of problems and\nit\u0026rsquo;s rare for one tool to fit all cases.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eNever underestimate the power of well-thought-out architecture. It serves as the project\u0026rsquo;s\nfoundation and shapes its future evolutions. So always guess that the Voyager ships are still\nrunning at million km distance from Earth,\nand were designed in the 70s. Engineers then designed a good foundation (architecture), which has\nallowed them to create such well-functioning devices.\n\u003ca href=\"https://www.allaboutcircuits.com/news/voyager-mission-anniversary-computers-command-data-attitude-control/\"\u003eThe Brains of the Voyager Spacecraft: Command, Data, and Attitude Control Computers\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eBeware of the Dunning-Kruger Effect, where people with little knowledge often overestimate their\nabilities as they don\u0026rsquo;t comprehend the depth of expertise required to master something.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cimg src=\"/images/dunning-kruger.png\" alt=\"Dunning Kruger\" title=\"Dunning Kruger\"\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eThe journey through this project has taught me invaluable lessons about the significance of making\nwell-informed decisions and laying a solid architectural foundation from the very start. As\nengineers and developers, we often get caught up in the excitement of new technologies or familiar\ntools, but it\u0026rsquo;s crucial to step back and critically evaluate whether they truly align with the\nproject\u0026rsquo;s requirements.\u003c/p\u003e\n",
      "url": "https://iqnev.github.io/posts/the-impact-of-the-right-technology-and-architecture-on-project-success/",
      "date_published": "23036-23-09T30:2323:00+00:00",
      "date_modified": "23036-23-09T30:2323:00+00:00",
      "author": {
        "name": "Calvin Tran",
        "url": "https://iqnev.github.io/"
      }
    },
    
    {
      "id": "d6f840f3df47143f5954c0e0e64771dc26eeaf44",
      "title": "Why we discarded Reactive systems architecture from our code?",
      "summary": "",
      "content_text": "This article explores our decision to move away from reactive architecture in our software project. We\u0026rsquo;ll delve into the core principles of reactive systems, the benefits of non-blocking I/O, and the challenges we faced with a reactive approach.\nUnderstanding Reactive architecture style Reactive encompasses a set of principles and guidelines aimed at constructing responsive distributed systems and applications, characterized by:\nResponsiveness: Capable of swiftly handling requests, even under heavy loads. Resilience: Able to recover from failures with minimal downtime. Elasticity: Can adapt to changing workloads by scaling resources accordingly. Message-Driven: Utilizes asynchronous messaging to enhance fault tolerance and decouple components. One key benefit of reactive systems is their use of non-blocking I/O. This approach avoids blocking threads during I/O operations, allowing a single thread to handle multiple requests concurrently. This can significantly improve system efficiency compared to traditional blocking I/O. In traditional multithreading, blocking operations pose significant challenges in optimizing systems (Figure 1). Greedy applications consuming excessive memory are inefficient and penalize other applications, often necessitating requests for additional resources like memory, CPU, or larger virtual machines.\nFigure 1 – Traditional Multi-threading\nI/O operations are integral to modern systems, and efficiently managing them is paramount to prevent greedy behavior. Reactive systems employ non-blocking I/O, enabling a low number of OS threads to handle numerous concurrent I/O operations.\nReactive Execution Model Although non-blocking I/O offers substantial benefits, it introduces a novel execution model distinct from traditional frameworks. Reactive programming emerged to address this issue, as it mitigates the inefficiency of platform threads idling during blocking operations (Figure 2).\nFigure 2 – Reactive Event Loop\nQuarkus and Reactive Quarkus leverages a reactive engine powered by Eclipse Vert.x and Netty, facilitating non-blocking I/O interactions. Mutiny, the preferred approach for writing reactive code with Quarkus, adopts an event-driven paradigm, wherein reactions are triggered by received events.\nMutiny offers two event-driven and lazy types:\nUni: Emits a single event (an item or a failure), suitable for representing asynchronous actions with zero or one result. Multi: Emits multiple events (n items, one failure, or one completion), representing streams of items, potentially unbounded. Challenges with Reactive While reactive systems offer benefits, we encountered several challenges during development:\nParadigm Shift: Reactive programming necessitates a fundamental shift in developers\u0026rsquo; mindsets, which can be challenging, especially for developers accustomed to imperative programming. Unlike auxiliary tools like the Streams API, the reactive approach demands a complete mindset overhaul. Code Readability and Understanding: Reactive code poses difficulties for new developers to comprehend, leading to increased time spent deciphering and understanding it. The complexity introduced by reactive paradigms compounds this issue. Note\n\u0026ldquo;Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. \u0026hellip;[Therefore,] making it easy to read makes it easier to write.\u0026rdquo; ― Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship\nDebugging Challenges: Debugging reactive code proves nearly impossible with standard IDE debuggers due to lambdas encapsulating most code. Additionally, the loss of meaningful stack traces during exceptions further hampers debugging efforts. Increased Development and Testing Efforts: The inherent complexity of reactive code can lead to longer development cycles due to the time required for writing, modifying, and testing. Here\u0026rsquo;s an example of reactive code using Mutiny to illustrate the complexity:\n1Multi.createFrom().ticks().every(Duration.ofSeconds(15)) 2 .onItem().invoke(() - \u0026gt; Multi.createFrom().iterable(configs()) 3 .onItem().transform(configuration - \u0026gt; { 4 try { 5 return Tuple2.of(openAPIConfiguration, 6 RestClientBuilder.newBuilder() 7 .baseUrl(new URL(configuration.url())) 8 .build(MyReactiveRestClient.class) 9 .getAPIResponse()); 10 11 } catch (MalformedURLException e) { 12 log.error(\u0026#34;Unable to create url\u0026#34;); 13 14 } 15 return null; 16}).collect().asList().toMulti().onItem().transformToMultiAndConcatenate(tuples - \u0026gt; { 17 18 AtomicInteger callbackCount = new AtomicInteger(); 19 return Multi.createFrom().emitter(emitter - \u0026gt; Multi.createFrom().iterable(tuples) 20 .subscribe().with(tuple - \u0026gt; 21 tuple.getItem2().subscribe().with(response - \u0026gt; { 22 emitter.emit(callbackCount.incrementAndGet()); 23 24 if (callbackCount.get() == tuples.size()) { 25 emitter.complete(); 26 } 27 }) 28 )); 29 30}).subscribe().with(s - \u0026gt; {}, 31Throwable::printStackTrace, () - \u0026gt; doSomethingUponComplete())) 32 .subscribe().with(aLong - \u0026gt; log.info(\u0026#34;Tic Tac with iteration: \u0026#34; + aLong)); Future Outlook-Project Loom and Beyond Project Loom, a recent development in the Java ecosystem, promises to mitigate the issues associated with blocking operations. By enabling the creation of thousands of virtual threads without hardware changes, Project Loom could potentially eliminate the need for a reactive approach in many cases.\nNote\n\u0026ldquo;Project Loom is going to kill Reactive Programming\u0026rdquo; - Brian Goetz\nConclusion In conclusion, our decision to move away from reactive architecture style a pragmatic approach to our project\u0026rsquo;s long-term maintainability. While reactive systems offer potential benefits, the challenges they presented for our team outweighed those advantages in our specific context.\nImportantly, this shift did not compromise performance. This is a positive outcome, as it demonstrates that a well-designed non-reactive(imperative) architecture can deliver the necessary performance without the complexity associated with reactive architecture in our case.\nAs we look towards the future, the focus remains on building a codebase that is not only functional but also easy to understand and maintain for developers of all experience levels. This not only reduces development time but also fosters better collaboration and knowledge sharing within the team.\nIn the graph below, the X-axis represents the increasing complexity of our codebase as it evolves, while the Y-axis depicts the time required for these developmental changes.\n",
      "content_html": "\u003cp\u003eThis article explores our decision to move away from reactive architecture in our software project. We\u0026rsquo;ll delve into the core principles of reactive systems, the benefits of non-blocking I/O, and the challenges we faced with a reactive approach.\u003c/p\u003e\n\u003ch2 id=\"understanding-reactive-architecture-style\"\u003eUnderstanding Reactive architecture style\u003c/h2\u003e\n\u003cp\u003eReactive encompasses a set of principles and guidelines aimed at constructing responsive distributed systems and applications, characterized by:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eResponsiveness:\u003c/strong\u003e Capable of swiftly handling requests, even under heavy loads.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eResilience:\u003c/strong\u003e Able to recover from failures with minimal downtime.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eElasticity:\u003c/strong\u003e Can adapt to changing workloads by scaling resources accordingly.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMessage-Driven:\u003c/strong\u003e Utilizes asynchronous messaging to enhance fault tolerance and decouple components.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eOne key benefit of reactive systems is their use of non-blocking I/O. This approach avoids blocking threads during I/O operations, allowing a single thread to handle multiple requests concurrently. This can significantly improve system efficiency compared to traditional blocking I/O.\nIn traditional multithreading, blocking operations pose significant challenges in optimizing systems (\u003cstrong\u003eFigure 1\u003c/strong\u003e).\nGreedy applications consuming excessive memory are inefficient and penalize other applications, often necessitating requests for additional resources like memory, CPU, or larger virtual machines.\u003c/p\u003e\n\u003cbr\u003e\n\u003cimg src=\"/images/traditional-multithreading.jpg\" alt=\"Traditional Multi-threading\" title=\"Traditional Multi-threading\"\u003e\n\u003cbr\u003e\n\u003cp\u003e\u003cem\u003eFigure 1 – Traditional Multi-threading\u003c/em\u003e\u003c/p\u003e\n\u003cbr\u003e\n\u003cp\u003eI/O operations are integral to modern systems, and efficiently managing them is paramount to prevent greedy behavior.\nReactive systems employ non-blocking I/O, enabling a low number of OS threads to handle numerous concurrent I/O operations.\u003c/p\u003e\n\u003cbr\u003e\n\u003ch2 id=\"reactive-execution-model\"\u003eReactive Execution Model\u003c/h2\u003e\n\u003cp\u003eAlthough non-blocking I/O offers substantial benefits, it introduces a novel execution model distinct from traditional frameworks.\nReactive programming emerged to address this issue, as it mitigates the inefficiency of platform threads idling during blocking operations (\u003cstrong\u003eFigure 2\u003c/strong\u003e).\u003c/p\u003e\n\u003cbr\u003e\n\u003cimg src=\"/images/reactive-event-loop.jpg\" alt=\"Reactive Event Loop\" title=\"Reactive Event Loop\"\u003e\n\u003cbr\u003e\n\u003cp\u003e\u003cem\u003eFigure 2 – Reactive Event Loop\u003c/em\u003e\u003c/p\u003e\n\u003cbr\u003e\n\u003ch2 id=\"quarkus-and-reactive\"\u003eQuarkus and Reactive\u003c/h2\u003e\n\u003cp\u003eQuarkus leverages a reactive engine powered by Eclipse Vert.x and Netty, facilitating non-blocking I/O interactions.\nMutiny, the preferred approach for writing reactive code with Quarkus, adopts an event-driven paradigm, wherein reactions are triggered by received events.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://smallrye.io/smallrye-mutiny/latest/\"\u003eMutiny\u003c/a\u003e offers two event-driven and lazy types:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eUni:\u003c/strong\u003e Emits a single event (an item or a failure), suitable for representing asynchronous actions with zero or one result.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMulti:\u003c/strong\u003e Emits multiple events (n items, one failure, or one completion), representing streams of items, potentially unbounded.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cbr\u003e\n\u003ch2 id=\"challenges-with-reactive\"\u003eChallenges with Reactive\u003c/h2\u003e\n\u003cp\u003eWhile reactive systems offer benefits, we encountered several challenges during development:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eParadigm Shift:\u003c/strong\u003e Reactive programming necessitates a fundamental shift in developers\u0026rsquo; mindsets, which can be challenging, especially for developers accustomed to imperative programming.\nUnlike auxiliary tools like the Streams API, the reactive approach demands a complete mindset overhaul.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCode Readability and Understanding:\u003c/strong\u003e Reactive code poses difficulties for new developers to comprehend, leading to increased time spent deciphering and understanding it. The complexity introduced by reactive paradigms compounds this issue.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cbr\u003e\n\u003cstyle type=\"text/css\"\u003e.notice{--root-color:#444;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#c33;--warning-content:#fee;--info-title:#fb7;--info-content:#fec;--note-title:#6be;--note-content:#e7f2fa;--tip-title:#5a5;--tip-content:#efe}@media (prefers-color-scheme:dark){.notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}}body.dark .notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}.notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:var(--root-color);background:var(--root-background)}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:var(--title-color);background:var(--title-background)}.notice.warning .notice-title{background:var(--warning-title)}.notice.warning{background:var(--warning-content)}.notice.info .notice-title{background:var(--info-title)}.notice.info{background:var(--info-content)}.notice.note .notice-title{background:var(--note-title)}.notice.note{background:var(--note-content)}.notice.tip .notice-title{background:var(--tip-title)}.notice.tip{background:var(--tip-content)}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:.125em;position:relative}\u003c/style\u003e\n\u003cdiv\u003e\u003csvg width=\"0\" height=\"0\" display=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003csymbol id=\"tip-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"note-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"warning-notice\" viewBox=\"0 0 576 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"info-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z\"/\u003e\u003c/symbol\u003e\u003c/svg\u003e\u003c/div\u003e\u003cdiv class=\"notice note\" \u003e\n\u003cp class=\"first notice-title\"\u003e\u003cspan class=\"icon-notice baseline\"\u003e\u003csvg\u003e\u003cuse href=\"#note-notice\"\u003e\u003c/use\u003e\u003c/svg\u003e\u003c/span\u003eNote\u003c/p\u003e\u003cp\u003e\u0026ldquo;Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. \u0026hellip;[Therefore,] making it easy to read makes it easier to write.\u0026rdquo;\n\u003cstrong\u003e― Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e\n\n\u003cbr\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eDebugging Challenges:\u003c/strong\u003e Debugging reactive code proves nearly impossible with standard IDE debuggers due to lambdas encapsulating most code.\nAdditionally, the loss of meaningful stack traces during exceptions further hampers debugging efforts.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIncreased Development and Testing Efforts:\u003c/strong\u003e The inherent complexity of reactive code can lead to longer development cycles due to the time required for writing, modifying, and testing.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cbr\u003e\n\u003cp\u003eHere\u0026rsquo;s an example of reactive code using Mutiny to illustrate the complexity:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003eMulti.createFrom().ticks().every(Duration.ofSeconds(15))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e    .onItem().invoke(() - \u0026gt; Multi.createFrom().iterable(configs())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e    .onItem().transform(configuration - \u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003etry\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e Tuple2.of(openAPIConfiguration,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e        RestClientBuilder.newBuilder()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e            .baseUrl(\u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e URL(configuration.url()))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e            .build(MyReactiveRestClient.class)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e            .getAPIResponse());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e  } \u003cspan style=\"color:#fc5fa3\"\u003ecatch\u003c/span\u003e (MalformedURLException e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e    log.error(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;Unable to create url\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e}).collect().asList().toMulti().onItem().transformToMultiAndConcatenate(tuples - \u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\u003c/span\u003e\u003cspan\u003e  AtomicInteger callbackCount = \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e AtomicInteger();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e Multi.createFrom().emitter(emitter - \u0026gt; Multi.createFrom().iterable(tuples)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\u003c/span\u003e\u003cspan\u003e      .subscribe().with(tuple - \u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\u003c/span\u003e\u003cspan\u003e          tuple.getItem2().subscribe().with(response - \u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\u003c/span\u003e\u003cspan\u003e              emitter.emit(callbackCount.incrementAndGet());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (callbackCount.get() == tuples.size()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\u003c/span\u003e\u003cspan\u003e    emitter.complete();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\u003c/span\u003e\u003cspan\u003e                    })\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\u003c/span\u003e\u003cspan\u003e                ));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\u003c/span\u003e\u003cspan\u003e}).subscribe().with(s - \u0026gt; {},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\u003c/span\u003e\u003cspan\u003eThrowable::printStackTrace, () - \u0026gt; doSomethingUponComplete()))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\u003c/span\u003e\u003cspan\u003e    .subscribe().with(aLong - \u0026gt; log.info(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;Tic Tac with iteration: \u0026#34;\u003c/span\u003e + aLong));\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbr\u003e\n\u003ch2 id=\"future-outlook-project-loom-and-beyond\"\u003eFuture Outlook-Project Loom and Beyond\u003c/h2\u003e\n\u003cp\u003eProject Loom, a recent development in the Java ecosystem, promises to mitigate the issues associated with blocking operations.\nBy enabling the creation of thousands of virtual threads without hardware changes, Project Loom could potentially eliminate the need for a reactive approach in many cases.\u003c/p\u003e\n\u003cbr\u003e\n\u003cdiv class=\"notice note\" \u003e\n\u003cp class=\"first notice-title\"\u003e\u003cspan class=\"icon-notice baseline\"\u003e\u003csvg\u003e\u003cuse href=\"#note-notice\"\u003e\u003c/use\u003e\u003c/svg\u003e\u003c/span\u003eNote\u003c/p\u003e\u003cp\u003e\u0026ldquo;Project Loom is going to kill Reactive Programming\u0026rdquo;\n\u003cstrong\u003e- Brian Goetz\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e\n\n\u003cbr\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIn conclusion, our decision to move away from reactive architecture style a pragmatic approach to our project\u0026rsquo;s long-term maintainability. While reactive systems offer potential benefits, the challenges they presented for our team outweighed those advantages in our specific context.\u003c/p\u003e\n\u003cp\u003eImportantly, this shift did not compromise performance. This is a positive outcome, as it demonstrates that a well-designed non-reactive(imperative) architecture can deliver the necessary performance without the complexity associated with reactive architecture in our case.\u003c/p\u003e\n\u003cp\u003eAs we look towards the future, the focus remains on building a codebase that is not only functional but also easy to understand and maintain for developers of all experience levels. This not only reduces development time but also fosters better collaboration and knowledge sharing within the team.\u003c/p\u003e\n\u003cp\u003eIn the graph below, the \u003cstrong\u003eX-axis\u003c/strong\u003e represents the increasing complexity of our codebase as it evolves, while the \u003cstrong\u003eY-axis\u003c/strong\u003e depicts the time required for these developmental changes.\u003c/p\u003e\n\u003cbr\u003e\n\u003cimg src=\"/images/reactive-imperative.jpg\" alt=\"Reactive-Imperative\" title=\"Reactive-Imperative\"\u003e",
      "url": "https://iqnev.github.io/posts/why-we-discarded-reactive-systems-architecture-from-our-code/",
      "date_published": "10036-10-09T30:1010:00+00:00",
      "date_modified": "10036-10-09T30:1010:00+00:00",
      "author": {
        "name": "Calvin Tran",
        "url": "https://iqnev.github.io/"
      }
    },
    
    {
      "id": "d5740415aa3103a96ffccf20d7e9da14a8c72f11",
      "title": "The Challenge of Evolving Schemas in Message Queues",
      "summary": "",
      "content_text": "In systems built on message queues like RabbitMQ or Pub/Sub, schema evolution is inevitable. It allows you to adapt to changing needs and add new features, but it can also introduce challenges. When updating schemas, ensuring a smooth transition is crucial to avoid disrupting existing processes and consumers. Let\u0026rsquo;s explore a scenario where your schema undergoes significant changes:\nInitial Payload (Version 1.0):\n1{ 2 \u0026#34;eventType\u0026#34;: \u0026#34;user_created\u0026#34;, 3 \u0026#34;version\u0026#34;: \u0026#34;1.0\u0026#34;, 4 \u0026#34;timestamp\u0026#34;: \u0026#34;2024-01-15T08:00:00Z\u0026#34;, 5 \u0026#34;data\u0026#34;: { 6 \u0026#34;id\u0026#34;: \u0026#34;123456789\u0026#34;, 7 \u0026#34;username\u0026#34;: \u0026#34;john_doe\u0026#34;, 8 \u0026#34;name\u0026#34;: \u0026#34;John Doe\u0026#34;, 9 \u0026#34;email\u0026#34;: \u0026#34;john.doe@example.com\u0026#34;, 10 \u0026#34;age\u0026#34;: 30, 11 \u0026#34;gender\u0026#34;: \u0026#34;male\u0026#34;, 12 \u0026#34;address\u0026#34;: { 13 \u0026#34;street\u0026#34;: \u0026#34;123 Main St\u0026#34;, 14 \u0026#34;city\u0026#34;: \u0026#34;Anytown\u0026#34;, 15 \u0026#34;state\u0026#34;: \u0026#34;CA\u0026#34;, 16 \u0026#34;postal_code\u0026#34;: \u0026#34;12345\u0026#34;, 17 \u0026#34;country\u0026#34;: \u0026#34;USA\u0026#34; 18 }, 19 \u0026#34;phone_numbers\u0026#34;: [ 20 { 21 \u0026#34;type\u0026#34;: \u0026#34;home\u0026#34;, 22 \u0026#34;number\u0026#34;: \u0026#34;123-456-7890\u0026#34; 23 } 24 ], 25 \u0026#34;is_active\u0026#34;: true, 26 \u0026#34;registration_date\u0026#34;: \u0026#34;2024-01-15T08:00:00Z\u0026#34; 27 } 28} Then, suppose you introduce changes to this JSON structure as follows(Version 2.0):\n1{ 2 \u0026#34;eventType\u0026#34;: \u0026#34;user_created\u0026#34;, 3 \u0026#34;version\u0026#34;: \u0026#34;2.0\u0026#34;, 4 \u0026#34;timestamp\u0026#34;: \u0026#34;2024-01-15T08:00:00Z\u0026#34;, 5 \u0026#34;data\u0026#34;: { 6 \u0026#34;userId\u0026#34;: \u0026#34;123456789\u0026#34;, 7 \u0026#34;profileDetails\u0026#34;: { 8 \u0026#34;username\u0026#34;: \u0026#34;john_doe\u0026#34;, 9 \u0026#34;fullName\u0026#34;: \u0026#34;John Doe\u0026#34;, 10 \u0026#34;email\u0026#34;: \u0026#34;john.doe@example.com\u0026#34;, 11 \u0026#34;age\u0026#34;: 30, 12 \u0026#34;gender\u0026#34;: \u0026#34;male\u0026#34; 13 }, 14 \u0026#34;contact\u0026#34;: { 15 \u0026#34;address\u0026#34;: { 16 \u0026#34;street\u0026#34;: \u0026#34;123 Main St\u0026#34;, 17 \u0026#34;city\u0026#34;: \u0026#34;Anytown\u0026#34;, 18 \u0026#34;state\u0026#34;: \u0026#34;CA\u0026#34;, 19 \u0026#34;postalCode\u0026#34;: \u0026#34;12345\u0026#34;, 20 \u0026#34;country\u0026#34;: \u0026#34;USA\u0026#34; 21 }, 22 \u0026#34;phoneNumbers\u0026#34;: [ 23 { 24 \u0026#34;type\u0026#34;: \u0026#34;home\u0026#34;, 25 \u0026#34;number\u0026#34;: \u0026#34;123-456-7890\u0026#34; 26 } 27 ] 28 }, 29 \u0026#34;isActive\u0026#34;: true, 30 \u0026#34;createdAt\u0026#34;: \u0026#34;2024-01-15T08:00:00Z\u0026#34; 31 } 32} Now, you need to migrate your system to handle these changes seamlessly.\nA Solution Create a New Topic: Establish a new topic dedicated to publishing messages adhering to the updated schema versions. Producer publishes messages to the appropriate topic based on the schema used. This allows gradual migration and facilitates parallel operation of old and new consumers.\nUpdate the Producer: Modify your producer to generate messages in the new schema format and direct these messages to the newly created topic.\nImplement the Adapter Pattern: Develop an adapter component responsible for listening to messages in the new topic. The adapter, following the adapter pattern, translates messages from the new format to the old format and then transmits them to the original topic.\nMigration of Consumers: Gradually migrate your consumers by redirecting them to subscribe to the new topic instead of the old one.\nDecommission the Adapter: Once all consumers have successfully migrated, decommission the adapter, and remove the old topic from the system.\nImplementation Procedure User creation event version 1. The adapter listens for messages in the new topic, translates them to the old format, and then forwards them to the old topic In the next step, one consumer has migrated, with the other soon to follow. In the final step, the adapter becomes obsolete, and the old topic is no longer needed. Benefits of this approach Backward Compatibility: The Adapter ensures backward compatibility by acting as a bridge between the old and new schema formats, allowing existing Consumers to continue processing messages without disruption.\nFlexibility: Leveraging the adapter pattern provides flexibility in accommodating changes in schema versions or message formats, enabling incremental updates without impacting existing functionality.\nRisk Mitigation: The adapter pattern serves as a risk mitigation strategy by isolating the impact of schema changes, reducing the risk of disruptions or errors in message processing.\nClear Versioning: Versioned topics and a schema registry provide clarity and transparency, making debugging and monitoring easier.\nConclusion Navigating schema evolution in message queue systems demands a strategic approach to ensure seamless transitions. By adopting the outlined solution, organizations can effectively address the challenges associated with schema updates while preserving operational continuity.\nThe proposed strategy acknowledges the inevitability of schema evolution and provides a structured approach to handle changes efficiently. By leveraging the Adapter Pattern, organizations can bridge the gap between old and new schema formats, facilitating backward compatibility and minimizing disruptions to existing processes.\nFurthermore, the approach offers flexibility and risk mitigation, allowing for incremental updates and isolating the impact of schema changes. This ensures that system evolution occurs smoothly, with minimal risk to operational stability.\n",
      "content_html": "\u003cp\u003eIn systems built on message queues like RabbitMQ or Pub/Sub, schema evolution is inevitable.\nIt allows you to adapt to changing needs and add new features, but it can also introduce challenges.\nWhen updating schemas, ensuring a smooth transition is crucial to avoid disrupting existing processes and consumers.\nLet\u0026rsquo;s explore a scenario where your schema undergoes significant changes:\u003c/p\u003e\n\u003cp\u003eInitial Payload (Version 1.0):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e  \u0026#34;eventType\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;user_created\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e  \u0026#34;version\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;1.0\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e  \u0026#34;timestamp\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;2024-01-15T08:00:00Z\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e  \u0026#34;data\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e    \u0026#34;id\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;123456789\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e    \u0026#34;username\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;john_doe\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e    \u0026#34;name\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;John Doe\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e    \u0026#34;email\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;john.doe@example.com\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e    \u0026#34;age\u0026#34;: \u003cspan style=\"color:#d0bf69\"\u003e30\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e    \u0026#34;gender\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;male\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e    \u0026#34;address\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e      \u0026#34;street\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;123 Main St\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e      \u0026#34;city\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;Anytown\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e      \u0026#34;state\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;CA\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e      \u0026#34;postal_code\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;12345\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e      \u0026#34;country\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;USA\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\u003c/span\u003e\u003cspan\u003e    },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\u003c/span\u003e\u003cspan\u003e    \u0026#34;phone_numbers\u0026#34;: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\u003c/span\u003e\u003cspan\u003e      {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\u003c/span\u003e\u003cspan\u003e        \u0026#34;type\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;home\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\u003c/span\u003e\u003cspan\u003e        \u0026#34;number\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;123-456-7890\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\u003c/span\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\u003c/span\u003e\u003cspan\u003e    ],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\u003c/span\u003e\u003cspan\u003e    \u0026#34;is_active\u0026#34;: \u003cspan style=\"color:#fc5fa3\"\u003etrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\u003c/span\u003e\u003cspan\u003e    \u0026#34;registration_date\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;2024-01-15T08:00:00Z\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen, suppose you introduce changes to this JSON structure as follows(Version 2.0):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e  \u0026#34;eventType\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;user_created\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e  \u0026#34;version\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;2.0\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e  \u0026#34;timestamp\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;2024-01-15T08:00:00Z\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e  \u0026#34;data\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e    \u0026#34;userId\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;123456789\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e    \u0026#34;profileDetails\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e      \u0026#34;username\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;john_doe\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e      \u0026#34;fullName\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;John Doe\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e      \u0026#34;email\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;john.doe@example.com\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e      \u0026#34;age\u0026#34;: \u003cspan style=\"color:#d0bf69\"\u003e30\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e      \u0026#34;gender\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;male\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e    },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e    \u0026#34;contact\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e      \u0026#34;address\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e        \u0026#34;street\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;123 Main St\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e        \u0026#34;city\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;Anytown\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\u003c/span\u003e\u003cspan\u003e        \u0026#34;state\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;CA\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\u003c/span\u003e\u003cspan\u003e        \u0026#34;postalCode\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;12345\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\u003c/span\u003e\u003cspan\u003e        \u0026#34;country\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;USA\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\u003c/span\u003e\u003cspan\u003e      },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\u003c/span\u003e\u003cspan\u003e      \u0026#34;phoneNumbers\u0026#34;: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\u003c/span\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\u003c/span\u003e\u003cspan\u003e          \u0026#34;type\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;home\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\u003c/span\u003e\u003cspan\u003e          \u0026#34;number\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;123-456-7890\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\u003c/span\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\u003c/span\u003e\u003cspan\u003e      ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\u003c/span\u003e\u003cspan\u003e    },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\u003c/span\u003e\u003cspan\u003e    \u0026#34;isActive\u0026#34;: \u003cspan style=\"color:#fc5fa3\"\u003etrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\u003c/span\u003e\u003cspan\u003e    \u0026#34;createdAt\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;2024-01-15T08:00:00Z\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow, you need to migrate your system to handle these changes seamlessly.\u003c/p\u003e\n\u003ch2 id=\"a-solution\"\u003eA Solution\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCreate a New Topic:\u003c/strong\u003e Establish a new topic dedicated to publishing messages adhering to the updated schema versions.\nProducer publishes messages to the appropriate topic based on the schema used. This allows gradual migration and facilitates parallel operation of old and new consumers.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate the Producer:\u003c/strong\u003e Modify your producer to generate messages in the new schema format and direct these messages to the newly created topic.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eImplement the Adapter Pattern:\u003c/strong\u003e Develop an adapter component responsible for listening to messages in the new topic. The adapter, following the adapter pattern, translates messages from the new format to the old format and then transmits them to the original topic.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eMigration of Consumers:\u003c/strong\u003e Gradually migrate your consumers by redirecting them to subscribe to the new topic instead of the old one.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDecommission the Adapter:\u003c/strong\u003e Once all consumers have successfully migrated, decommission the adapter, and remove the old topic from the system.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"implementation-procedure\"\u003eImplementation Procedure\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eUser creation event version 1.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cimg src=\"/images/step_1.jpg\" alt=\"User event v1\" title=\"User event v1\"\u003e\n\u003cbr\u003e\n\u003cul\u003e\n\u003cli\u003eThe adapter listens for messages in the new topic, translates them to the old format, and then forwards them to the old topic\u003c/li\u003e\n\u003c/ul\u003e\n\u003cimg src=\"/images/step_2.jpg\" alt=\"User event v1\" title=\"User event v1\"\u003e\n\u003cbr\u003e\n\u003cul\u003e\n\u003cli\u003eIn the next step, one consumer has migrated, with the other soon to follow.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cimg src=\"/images/step_3.jpg\" alt=\"User event v1\" title=\"User event v1\"\u003e\n\u003cbr\u003e\n\u003cul\u003e\n\u003cli\u003eIn the final step, the adapter becomes obsolete, and the old topic is no longer needed.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cimg src=\"/images/step_4.jpg\" alt=\"User event v1\" title=\"User event v1\"\u003e\n\u003cbr\u003e\n\u003ch2 id=\"benefits-of-this-approach\"\u003eBenefits of this approach\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eBackward Compatibility:\u003c/strong\u003e The Adapter ensures backward compatibility by acting as a bridge between the old and new schema formats, allowing existing Consumers to continue processing messages without disruption.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eFlexibility:\u003c/strong\u003e Leveraging the adapter pattern provides flexibility in accommodating changes in schema versions or message formats, enabling incremental updates without impacting existing functionality.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eRisk Mitigation:\u003c/strong\u003e The adapter pattern serves as a risk mitigation strategy by isolating the impact of schema changes, reducing the risk of disruptions or errors in message processing.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eClear Versioning:\u003c/strong\u003e Versioned topics and a schema registry provide clarity and transparency, making debugging and monitoring easier.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eNavigating schema evolution in message queue systems demands a strategic approach to ensure seamless transitions. By adopting the outlined solution, organizations can effectively address the challenges associated with schema updates while preserving operational continuity.\u003c/p\u003e\n\u003cp\u003eThe proposed strategy acknowledges the inevitability of schema evolution and provides a structured approach to handle changes efficiently. By leveraging the Adapter Pattern, organizations can bridge the gap between old and new schema formats, facilitating backward compatibility and minimizing disruptions to existing processes.\u003c/p\u003e\n\u003cp\u003eFurthermore, the approach offers flexibility and risk mitigation, allowing for incremental updates and isolating the impact of schema changes. This ensures that system evolution occurs smoothly, with minimal risk to operational stability.\u003c/p\u003e\n",
      "url": "https://iqnev.github.io/posts/the-challenge-of-evolving-schemas-in-message-queues/",
      "date_published": "18026-18-09T24:1818:00+03:00",
      "date_modified": "18026-18-09T24:1818:00+03:00",
      "author": {
        "name": "Calvin Tran",
        "url": "https://iqnev.github.io/"
      }
    },
    
    {
      "id": "44c2f51086439c659f372ab58aa7da2c7ae4f0d8",
      "title": "Turbocharge Java Microservices with Quarkus and GraalVM Native Image",
      "summary": "",
      "content_text": "In the dynamic landscape of modern software development, microservices have become the favored architectural approach. While this methodology offers numerous advantages, it is not without its challenges. Issues such as large memory footprints, extended start times, and high CPU usage often accompany traditional JVM-based services. These challenges not only impact the technical aspects but also have financial implications that can significantly affect the overall cost of running and maintaining software solutions.\nWhat is GraalVM Native Image? GraalVM Native Image is a key feature of the GraalVM, which is a high-performance runtime that provides support for various programming languages and execution modes. Specifically, GraalVM Native Image allows you to compile Java applications ahead-of-time into standalone native executables, bypassing the need for a Java Virtual Machine (JVM) during runtime. This innovative approach yields executable files that exhibit nearly instantaneous startup times and significantly reduced memory consumption compared to their traditional JVM counterparts. These native executables are meticulously crafted, containing only the essential classes, methods, and dependent libraries indispensable for the application\u0026rsquo;s functionality. Beyond its technical prowess, GraalVM Native Image emerges as a strategic solution with far-reaching implications. It not only surmounts technical challenges but also introduces a compelling financial case. By facilitating the development of efficient, secure, and instantly scalable cloud-native Java applications, GraalVM becomes instrumental in optimizing resource utilization and fostering cost-effectiveness. In essence, it plays a pivotal role in elevating the performance and financial efficiency of software solutions in contemporary, dynamic environments.\nTechnical Challenges and Financial Implications 1. Large Memory Footprints\nTechnical Impact: Traditional JVM-based services often incur substantial memory overhead due to classloading and metadata for loaded classes.\nFinancial Case: High memory consumption translates to increased infrastructure costs. GraalVM\u0026rsquo;s elimination of metadata for loaded classes and other optimizations leads to a more efficient use of resources, resulting in potential cost savings.\n2. Extended Start Times\nTechnical Impact: Cold starts in microservices can lead to higher response times, impacting user experience and potentially causing service degradation.\nFinancial Case: Extended start times not only affect user satisfaction but also contribute to higher operational costs. GraalVM\u0026rsquo;s optimizations, such as eliminating classloading overhead and pre-generating image heap during the build, drastically reduce startup times, potentially minimizing operational expenses.\n3. High CPU Usage\nTechnical Impact: Traditional JVMs often burn CPU cycles for profiling and Just-In-Time (JIT) compilation during startup.\nFinancial Case: Excessive CPU usage results in increased cloud infrastructure costs. GraalVM\u0026rsquo;s avoidance of profiling and JIT-ing overhead directly contributes to reduced CPU consumption, translating to potential cost savings in cloud usage.\nTackling the Cold Start Problem Microservices, especially in serverless or containerized environments, often face the Cold Start Problem, impacting response times and user experience. GraalVM addresses this challenge by implementing several optimizations:\n1. No Classloading Overhead\nTraditional Java applications rely on classloading at runtime to dynamically load and link classes. This process introduces overhead, particularly during the startup phase. GraalVM minimizes this overhead through a process known as static or ahead-of-time (AOT) compilation. This involves pre-loading, linking, and partially initiating all classes that the application requires. As a result, there is no need for runtime classloading during application startup. 2. Elimination of Interpreted Code\nTraditional Java Virtual Machines rely on an interpreted execution mode before applying Just-In-Time (JIT) compilation. This can contribute to startup delays and increased CPU usage. Native executables contain no interpreted code, further contributing to faster startup times. 3. No Profiling and JIT-ing Overhead\nGraalVM bypasses the need to start the Just-In-Time (JIT) Compiler, reducing CPU usage during startup. 4. Image Heap Generation at Build Time\nGraalVM\u0026rsquo;s native image utility enables the execution of initialization processes for specific classes during the build process. This results in the generation of an image heap that includes pre-initialized portions, speeding up the application\u0026rsquo;s startup. Oracle GraalVM\u0026rsquo;s native image utility has demonstrated startup times almost 100 times faster than traditional JVM-based applications. The graph below illustrates the substantial reduction in runtime memory requirements, showcasing GraalVM\u0026rsquo;s efficiency compared to HotSpot(Figure 1).\nFigure 1 – Native executables start up almost instantly(oracle.com)\nAchieving a Leaner Memory Footprint GraalVM contributes to lower memory footprints through the following optimizations:\n1. No Metadata for Loaded Classes\nGraalVM avoids storing metadata for dynamically loaded classes in the non-heap memory. During the build process, the necessary class information is pre-loaded and linked, minimizing the need for additional metadata at runtime. 2. No Profiling Data or JIT Optimizations\nSince the bytecode is already in native code, GraalVM eliminates the need for collecting profiling data for JIT optimizations, reducing memory overhead. 3. Isolation Technology\nGraalVM introduces Isolates, a technology that partitions the heap into smaller, independent \u0026quot; heaps,\u0026quot; enhancing efficiency, particularly in request processing scenarios. In common, it consumes up to x5 times less memory compared to running on a JVM(Figure 2)\nFigure 2 – Native executables memory compared to Go or Java HotSpot(oracle.com)\nIn conclusion, GraalVM\u0026rsquo;s native image utility offers a transformative solution to the challenges posed by microservices, addressing startup time, memory footprint, and CPU usage concerns. By adopting GraalVM, developers can create cloud-native Java applications that are not only efficient and secure but also provide a superior user experience.\nNative Java with Quarkus To compile your Quarkus service into a native image, various methods are available. While this article won\u0026rsquo;t delve deeply into the Quarkus native build procedure, it does provide an overview of the essential steps.\nBefore proceeding with any approach for building a native image, it\u0026rsquo;s crucial to set up the proper native profile in your pom.xml file. Add the following profile:\n1\u0026lt;profiles\u0026gt; 2 \u0026lt;profile\u0026gt; 3 \u0026lt;id\u0026gt;native\u0026lt;/id\u0026gt; 4 \u0026lt;properties\u0026gt; 5 \u0026lt;quarkus.package.type\u0026gt;native\u0026lt;/quarkus.package.type\u0026gt; 6 \u0026lt;/properties\u0026gt; 7 \u0026lt;/profile\u0026gt; 8\u0026lt;/profiles\u0026gt; Producing a Native Executable with Installed GraalVM Check your GraalVM version using the following command:\n1./gu info native-image This command will display the installed GraalVM version:\nDownloading: Component catalog from www.graalvm.org Filename : https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-22.3.0/native-image-installable-svm-java19-linux-amd64-22.3.0.jar Name : Native Image ID : native-image Version : 22.3.0 GraalVM : 22.3.0 Stability: Experimental Component bundle native-image cannot be installed - The same component Native Image (org.graalvm.native-image[22.3.0.0/55b341ca1bca5219aafa8ed7c8a2273b81d184dd600d8261c837fc32d2dedae5]) is already installed in version 22.3.0 And to create a native executable, use:\n1./mvnw install -Dnative These commands generate a *-runner binary in the target directory, allowing you to run the native executable:\n1./target/*-runner Creating a Native Executable without installed GraalVM If installing GraalVM locally poses challenges, an in-container build can be used:\n1./mvnw install -Dnative -Dquarkus.native.container-build=true -Dquarkus.native.builder-image=graalvm This command initiates the build within a Docker container and provides the necessary image file. You can then start the application with:\n1./target/*-runner In cases where building the native image proves challenging, the RedHat team provides a specialized distribution of GraalVM designed for the Quarkus framework called Mandrel. Mandrel streamlines GraalVM, focusing solely on the native-image capabilities essential for Quarkus applications. To use Mandrel, follow these steps:\nIdentify the appropriate Mandrel version Mandrel repository\nSet the Mandrel version in your application.properties file:\n1quarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel-builder-image:23.0.1.2-Final-java17 Run the Maven build command: 1./mvnw clean install -Pnative Manually Creating a Container For those who prefer manual control over container creation, a multi-stage Docker build can be employed.\n1FROM quay.io/quarkus/ubi-quarkus-mandrel-builder-image:23.0.1.2-Final-java17 AS build 2COPY --chown=quarkus:quarkus mvnw /app/mvnw 3COPY --chown=quarkus:quarkus .mvn /app/.mvn 4COPY --chown=quarkus:quarkus pom.xml /app/ 5USER quarkus 6WORKDIR /app 7RUN ./mvnw -B org.apache.maven.plugins:maven-dependency-plugin:3.6.1:go-offline 8COPY src /app/src 9RUN ./mvnw package -Dnative 10 11FROM quay.io/quarkus/quarkus-micro-image:2.0 12WORKDIR /app/ 13COPY --from=build /app/target/*-runner /app/application 14 15RUN chmod 775 /app /app/application \\ 16 \u0026amp;\u0026amp; chown -R 1001 /app \\ 17 \u0026amp;\u0026amp; chmod -R \u0026#34;g+rwX\u0026#34; /app \\ 18 \u0026amp;\u0026amp; chown -R 1001:root /app 19 20EXPOSE 8080 21USER 1001 22 23CMD [\u0026#34;./application\u0026#34;, \u0026#34;-Dquarkus.http.host=0.0.0.0\u0026#34;] This Dockerfile orchestrates a multi-stage build, resulting in a Docker image with your Quarkus application. Execute this Dockerfile to produce the Docker image, ready to run your Quarkus application.\nSummary GraalVM Native Image is a powerful technology that can revolutionize the way you develop and deploy Java microservices. By adopting GraalVM Native Image, you can create microservices that are:\nFaster More scalable Simpler to deploy More cost-effective GraalVM Native Image is a key enabler of cloud-native Java development and can help you achieve the performance, scalability, and cost savings that your business demands.\nI hope this updated text is more helpful!\n",
      "content_html": "\u003cp\u003eIn the dynamic landscape of modern software development, microservices have become the favored\narchitectural approach. While this methodology offers numerous advantages, it is not without its\nchallenges. Issues such as large memory footprints, extended start times, and high CPU usage often\naccompany traditional JVM-based services. These challenges not only impact the technical aspects but\nalso have financial implications that can significantly affect the overall cost of running and\nmaintaining software solutions.\u003c/p\u003e\n\u003ch2 id=\"what-is-graalvm-native-image\"\u003eWhat is GraalVM Native Image?\u003c/h2\u003e\n\u003cp\u003eGraalVM Native Image is a key feature of the GraalVM, which is a high-performance runtime\nthat\nprovides support for various programming languages and execution modes. Specifically, GraalVM\nNative Image allows you to compile Java applications ahead-of-time into standalone native\nexecutables,\nbypassing the need for a Java Virtual Machine (JVM) during runtime. This innovative approach\nyields executable files that exhibit nearly instantaneous startup\ntimes and significantly reduced memory consumption compared to their traditional JVM counterparts.\nThese native executables are meticulously crafted, containing only the essential classes, methods,\nand dependent libraries indispensable for the application\u0026rsquo;s functionality.\nBeyond its technical prowess, GraalVM Native Image emerges as a strategic solution with\nfar-reaching\nimplications. It not only surmounts technical challenges but also introduces a compelling financial\ncase. By facilitating the development of efficient, secure, and instantly scalable cloud-native Java\napplications, GraalVM becomes instrumental in optimizing resource utilization and fostering\ncost-effectiveness. In essence, it plays a pivotal role in elevating the performance and financial\nefficiency of software solutions in contemporary, dynamic environments.\u003c/p\u003e\n\u003ch2 id=\"technical-challenges-and-financial-implications\"\u003eTechnical Challenges and Financial Implications\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e1. Large Memory Footprints\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTechnical Impact:\u003c/strong\u003e Traditional JVM-based services often incur substantial memory overhead due to\nclassloading and metadata for loaded classes.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFinancial Case:\u003c/strong\u003e High memory consumption translates to increased infrastructure costs. GraalVM\u0026rsquo;s\nelimination of metadata for loaded classes and other optimizations leads to a more efficient use of\nresources, resulting in potential cost savings.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e2. Extended Start Times\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTechnical Impact:\u003c/strong\u003e Cold starts in microservices can lead to higher response times, impacting user\nexperience and potentially causing service degradation.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFinancial Case:\u003c/strong\u003e Extended start times not only affect user satisfaction but also contribute to\nhigher\noperational costs. GraalVM\u0026rsquo;s optimizations, such as eliminating classloading overhead and\npre-generating image heap during the build, drastically reduce startup times, potentially minimizing\noperational expenses.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e3. High CPU Usage\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTechnical Impact:\u003c/strong\u003e Traditional JVMs often burn CPU cycles for profiling and Just-In-Time (JIT)\ncompilation during startup.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFinancial Case:\u003c/strong\u003e Excessive CPU usage results in increased cloud infrastructure costs. GraalVM\u0026rsquo;s\navoidance of profiling and JIT-ing overhead directly contributes to reduced CPU consumption,\ntranslating to potential cost savings in cloud usage.\u003c/p\u003e\n\u003ch3 id=\"tackling-the-cold-start-problem\"\u003eTackling the Cold Start Problem\u003c/h3\u003e\n\u003cp\u003eMicroservices, especially in serverless or containerized environments, often face the Cold Start\nProblem, impacting response times and user experience. GraalVM addresses this challenge by\nimplementing several optimizations:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e1. No Classloading Overhead\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTraditional Java applications rely on classloading at runtime to dynamically load and link\nclasses. This process introduces overhead, particularly during the startup phase. GraalVM\nminimizes this overhead through a process known as static or ahead-of-time (AOT) compilation. This\ninvolves pre-loading, linking, and partially initiating all classes that the application requires.\nAs a result, there is no need for runtime classloading during application startup.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e2. Elimination of Interpreted Code\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTraditional Java Virtual Machines rely on an interpreted execution mode before applying\nJust-In-Time (JIT) compilation. This can contribute to startup delays and increased CPU usage.\nNative executables contain no interpreted code, further contributing to faster startup times.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e3. No Profiling and JIT-ing Overhead\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGraalVM bypasses the need to start the Just-In-Time (JIT) Compiler, reducing CPU usage\nduring startup.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e4. Image Heap Generation at Build Time\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGraalVM\u0026rsquo;s native image utility enables the execution of initialization processes for\nspecific classes during the build process. This results in the generation of an image heap that\nincludes\npre-initialized portions, speeding up the application\u0026rsquo;s startup.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOracle GraalVM\u0026rsquo;s native image utility has demonstrated startup times almost 100 times faster\nthan traditional JVM-based applications. The graph below illustrates the substantial reduction in\nruntime\nmemory requirements, showcasing GraalVM\u0026rsquo;s efficiency compared to HotSpot(\u003cstrong\u003eFigure 1\u003c/strong\u003e).\u003c/p\u003e\n\u003cimg src=\"/images/hello_word_graalvm.png\" alt=\"Executables start up\" title=\"Executables start up\"\u003e\n\u003cbr\u003e\n\u003cp\u003e\u003cem\u003eFigure 1 – Native executables start up almost instantly(oracle.com)\u003c/em\u003e\u003c/p\u003e\n\u003cbr\u003e\n\u003ch3 id=\"achieving-a-leaner-memory-footprint\"\u003eAchieving a Leaner Memory Footprint\u003c/h3\u003e\n\u003cp\u003eGraalVM contributes to lower memory footprints through the following optimizations:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e1. No Metadata for Loaded Classes\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGraalVM avoids storing metadata for dynamically loaded classes in the non-heap memory. During\nthe build process, the necessary class information is pre-loaded and linked, minimizing the need\nfor additional metadata at runtime.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e2. No Profiling Data or JIT Optimizations\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSince the bytecode is already in native code, GraalVM eliminates the need for collecting\nprofiling data for JIT optimizations, reducing memory overhead.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e3. Isolation Technology\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGraalVM introduces Isolates, a technology that partitions the heap into smaller, independent \u0026quot;\nheaps,\u0026quot; enhancing efficiency, particularly in request processing scenarios.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn common, it consumes up to x5 times less memory compared to running on a JVM(\u003cstrong\u003eFigure 2\u003c/strong\u003e)\u003c/p\u003e\n\u003cimg src=\"/images/memory_usage_graalvm.png\" alt=\"Memory compared to Go or Java HotSpot\" title=\"Memory compared to Go or Java HotSpot\"\u003e\n\u003cbr\u003e\n\u003cp\u003e\u003cem\u003eFigure 2 – Native executables memory compared to Go or Java HotSpot(oracle.com)\u003c/em\u003e\u003c/p\u003e\n\u003cbr\u003e\n\u003cp\u003eIn conclusion, GraalVM\u0026rsquo;s native image utility offers a transformative solution to the challenges\nposed by microservices, addressing startup time, memory footprint, and CPU usage concerns. By\nadopting GraalVM, developers can create cloud-native Java applications that are not only\nefficient and secure but also provide a superior user experience.\u003c/p\u003e\n\u003ch2 id=\"native-java-with-quarkus\"\u003eNative Java with Quarkus\u003c/h2\u003e\n\u003cp\u003eTo compile your Quarkus service into a native image, various methods are available. While this\narticle won\u0026rsquo;t delve deeply into the Quarkus native build procedure, it does provide an overview of\nthe essential steps.\u003c/p\u003e\n\u003cp\u003eBefore proceeding with any approach for building a native image, it\u0026rsquo;s crucial to set up the proper\nnative profile in your \u003ccode\u003epom.xml\u003c/code\u003e file. Add the following profile:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\u0026lt;profiles\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e  \u0026lt;profile\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e    \u0026lt;id\u0026gt;native\u0026lt;/id\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e    \u0026lt;properties\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e      \u0026lt;quarkus.package.type\u0026gt;native\u0026lt;/quarkus.package.type\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\u003c/span\u003e\u003cspan\u003e    \u0026lt;/properties\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\u003c/span\u003e\u003cspan\u003e  \u0026lt;/profile\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\u003c/span\u003e\u003cspan\u003e\u0026lt;/profiles\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col\u003e\n\u003cli\u003eProducing a Native Executable with Installed GraalVM\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eCheck your GraalVM version using the following command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e./gu info native-image\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis command will display the installed GraalVM version:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eDownloading: Component catalog from www.graalvm.org\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eFilename : https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-22.3.0/native-image-installable-svm-java19-linux-amd64-22.3.0.jar\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eName     : Native Image\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eID       : native-image\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eVersion  : 22.3.0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eGraalVM  : 22.3.0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eStability: Experimental\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eComponent bundle native-image cannot be installed\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        - The same component Native Image (org.graalvm.native-image[22.3.0.0/55b341ca1bca5219aafa8ed7c8a2273b81d184dd600d8261c837fc32d2dedae5]) is already installed in version 22.3.0\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd to create a native executable, use:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e./mvnw install -Dnative\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThese commands generate a \u003ccode\u003e*-runner\u003c/code\u003e binary in the \u003ccode\u003etarget\u003c/code\u003e directory, allowing you to run the\nnative executable:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e./target/*-runner\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003eCreating a Native Executable without installed GraalVM\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIf installing GraalVM locally poses challenges, an in-container build can be used:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e./mvnw install -Dnative -Dquarkus.native.container-build=\u003cspan style=\"color:#d0a8ff\"\u003etrue\u003c/span\u003e -Dquarkus.native.builder-image=graalvm\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis command initiates the build within a Docker container and provides the necessary image file.\nYou can then start the application with:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e./target/*-runner\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn cases where building the native image proves challenging, the RedHat team provides a specialized\ndistribution of GraalVM designed for the Quarkus framework called Mandrel. Mandrel streamlines\nGraalVM, focusing solely on the native-image capabilities essential for Quarkus applications. To\nuse Mandrel, follow these steps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eIdentify the appropriate Mandrel version \u003ca href=\"https://quay.io/repository/quarkus/ubi-quarkus-mandrel-builder-image?tab=tags\"\u003eMandrel repository\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSet the Mandrel version in your \u003ccode\u003eapplication.properties\u003c/code\u003e file:\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-properties\" data-lang=\"properties\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003equarkus.native.builder-image=\u003cspan style=\"color:#fc6a5d\"\u003equay.io/quarkus/ubi-quarkus-mandrel-builder-image:23.0.1.2-Final-java17\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003eRun the Maven build command:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e./mvnw clean install -Pnative\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"manually-creating-a-container\"\u003eManually Creating a Container\u003c/h3\u003e\n\u003cp\u003eFor those who prefer manual control over container creation, a multi-stage Docker build can be\nemployed.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-dockerfile\" data-lang=\"dockerfile\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eFROM\u003c/span\u003e\u003cspan style=\"color:#fc6a5d\"\u003e quay.io/quarkus/ubi-quarkus-mandrel-builder-image:23.0.1.2-Final-java17 AS build\u003c/span\u003e\u003cspan style=\"color:#960050\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#960050\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fc5fa3\"\u003eCOPY\u003c/span\u003e --chown=quarkus:quarkus mvnw /app/mvnw\u003cspan style=\"color:#960050\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#960050\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fc5fa3\"\u003eCOPY\u003c/span\u003e --chown=quarkus:quarkus .mvn /app/.mvn\u003cspan style=\"color:#960050\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#960050\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fc5fa3\"\u003eCOPY\u003c/span\u003e --chown=quarkus:quarkus pom.xml /app/\u003cspan style=\"color:#960050\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#960050\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fc5fa3\"\u003eUSER\u003c/span\u003e\u003cspan style=\"color:#fc6a5d\"\u003e quarkus\u003c/span\u003e\u003cspan style=\"color:#960050\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#960050\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fc5fa3\"\u003eWORKDIR\u003c/span\u003e\u003cspan style=\"color:#fc6a5d\"\u003e /app\u003c/span\u003e\u003cspan style=\"color:#960050\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#960050\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fc5fa3\"\u003eRUN\u003c/span\u003e ./mvnw -B org.apache.maven.plugins:maven-dependency-plugin:3.6.1:go-offline\u003cspan style=\"color:#960050\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#960050\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fc5fa3\"\u003eCOPY\u003c/span\u003e src /app/src\u003cspan style=\"color:#960050\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#960050\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fc5fa3\"\u003eRUN\u003c/span\u003e ./mvnw package -Dnative\u003cspan style=\"color:#960050\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#960050\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#960050\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fc5fa3\"\u003eFROM\u003c/span\u003e\u003cspan style=\"color:#fc6a5d\"\u003e quay.io/quarkus/quarkus-micro-image:2.0\u003c/span\u003e\u003cspan style=\"color:#960050\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#960050\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fc5fa3\"\u003eWORKDIR\u003c/span\u003e\u003cspan style=\"color:#fc6a5d\"\u003e /app/\u003c/span\u003e\u003cspan style=\"color:#960050\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#960050\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fc5fa3\"\u003eCOPY\u003c/span\u003e --from=build /app/target/*-runner /app/application\u003cspan style=\"color:#960050\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#960050\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#960050\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fc5fa3\"\u003eRUN\u003c/span\u003e chmod \u003cspan style=\"color:#d0bf69\"\u003e775\u003c/span\u003e /app /app/application \u003cspan style=\"color:#fc6a5d\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc6a5d\"\u003e\u003c/span\u003e  \u0026amp;\u0026amp; chown -R \u003cspan style=\"color:#d0bf69\"\u003e1001\u003c/span\u003e /app \u003cspan style=\"color:#fc6a5d\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc6a5d\"\u003e\u003c/span\u003e  \u0026amp;\u0026amp; chmod -R \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;g+rwX\u0026#34;\u003c/span\u003e /app \u003cspan style=\"color:#fc6a5d\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc6a5d\"\u003e\u003c/span\u003e  \u0026amp;\u0026amp; chown -R 1001:root /app\u003cspan style=\"color:#960050\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#960050\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#960050\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fc5fa3\"\u003eEXPOSE\u003c/span\u003e\u003cspan style=\"color:#fc6a5d\"\u003e 8080\u003c/span\u003e\u003cspan style=\"color:#960050\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#960050\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fc5fa3\"\u003eUSER\u003c/span\u003e\u003cspan style=\"color:#fc6a5d\"\u003e 1001\u003c/span\u003e\u003cspan style=\"color:#960050\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#960050\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#960050\"\u003e\u003c/span\u003e\u003cspan style=\"color:#fc5fa3\"\u003eCMD\u003c/span\u003e [\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;./application\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;-Dquarkus.http.host=0.0.0.0\u0026#34;\u003c/span\u003e]\u003cspan style=\"color:#960050\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis Dockerfile orchestrates a multi-stage build, resulting in a Docker image with your Quarkus\napplication. Execute this Dockerfile to produce the Docker image, ready to run your Quarkus\napplication.\u003c/p\u003e\n\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003cp\u003eGraalVM Native Image is a powerful technology that can revolutionize the way you develop and deploy Java microservices. By adopting GraalVM Native Image, you can create microservices that are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFaster\u003c/li\u003e\n\u003cli\u003eMore scalable\u003c/li\u003e\n\u003cli\u003eSimpler to deploy\u003c/li\u003e\n\u003cli\u003eMore cost-effective\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eGraalVM Native Image is a key enabler of cloud-native Java development and can help you achieve the performance, scalability, and cost savings that your business demands.\u003c/p\u003e\n\u003cp\u003eI hope this updated text is more helpful!\u003c/p\u003e\n",
      "url": "https://iqnev.github.io/posts/graalvm-native-image/",
      "date_published": "7016-07-09T14:77:00+03:00",
      "date_modified": "7016-07-09T14:77:00+03:00",
      "author": {
        "name": "Calvin Tran",
        "url": "https://iqnev.github.io/"
      }
    },
    
    {
      "id": "63a7e0e4fde135d424af77dcba5f183c34e651c2",
      "title": "Unveiling Challenges with @Named",
      "summary": "",
      "content_text": "In the ever-evolving landscape of Contexts and Dependency Injection (CDI), developers frequently encounter hurdles related to bean naming, default implementations, and potential conflicts. This article provides a detailed exploration of the potential pitfalls associated with the @Named annotation in CDI. We will delve into its intricacies, shed light on problematic scenarios, and discuss alternative approaches, including the use of @Identifier from SmallRye. Furthermore, we\u0026rsquo;ll offer insights into best practices for building robust and maintainable Jakarta EE applications.\nUnderstanding @Default The @Default annotation is a valuable tool in CDI for explicitly marking a specific implementation as the default one for a given interface or bean type. It comes into play when dealing with multiple implementations of the same interface, allowing developers to specify which implementation should be injected by default when no other qualifiers are used.\nConsider a scenario where multiple implementations of the GreetingService interface exist:\n1 2@Default 3public class DefaultGreetingService implements GreetingService { 4 5 @Override 6 public String greet(String name) { 7 return \u0026#34;Hello, \u0026#34; + name; 8 } 9} 1public class SpecialGreetingService implements GreetingService { 2 3 @Override 4 public String greet(String name) { 5 return \u0026#34;Greetings, \u0026#34; + name + \u0026#34;!\u0026#34;; 6 } 7} When injecting a bean without specifying any qualifiers, CDI uses the @Default -marked bean as the default. This is beneficial in scenarios with multiple implementations, providing a clear default choice.\n1 2@Inject 3private GreetingService greetingService; // Injects the @Default implementation While the use of @Default is optional, it\u0026rsquo;s highly recommended, particularly when dealing with interfaces that have multiple implementations. It provides a clear and consistent default option, preventing ambiguity and unexpected behavior during bean injection.\nExploring @Named - a double-edged sword The @Named qualifier plays a fundamental role in CDI, assigning a human-readable name or identifier to a bean. Developers often employ it to refer to beans by name when injecting them into other components.\nHowever, @Named comes with its own set of challenges, particularly when used without additional qualifiers. By default, CDI associates the unqualified class name as the bean name. This can lead to conflicts with the @Default qualifier, resulting in unexpected behavior during bean injection.\n1 2@Named 3public class MyBean { 4 // Implementation 5} When injecting MyBean without explicit qualifiers, CDI will only add the @Named qualifier, not the @Default qualifier. The @Default qualifier is only applied if it is explicitly specified on the bean or its qualifiers.\n1 2@Inject 3private MyBean myBean; In this case, ambiguity may arise if there are other beans with the same type name. For instance, if there is another bean named MyBean, the injection will result in ambiguity.\nTo address this issue, developers should explicitly qualify the bean they intend to inject.\n1 2@Inject 3@Named(\u0026#34;myBean\u0026#34;) 4private MyBean myBean; Alternatively, developers can utilize a custom qualifier for each bean to eliminate ambiguity.\nProblematic Cases: Ambiguity and Unintended Defaults Ambiguity arises when @Named is used without additional qualifiers, and multiple implementations of the same type exist. Consider the following scenario:\n1 2@Named 3public class ServiceA implements Service { 4 // Implementation 5} 1 2@Named 3public class ServiceB implements Service { 4 // Implementation 5} Injecting Service without explicit qualifiers can lead to ambiguity since both beans match by type, and no name or qualifier distinguishes them.\n1 2@Inject 3private Service service; In this case, CDI does not implicitly add @Default or attempt to resolve the ambiguity, resulting in a failed injection due to an ambiguous dependency.\nAlternatives: Introducing @Identifier from SmallRye Common Acknowledging the challenges posed by @Named, developers often seek alternatives for more explicit control over bean identification. One such alternative is the @Identifier annotation from SmallRye Common . This annotation offers a clearer and more controlled approach to naming beans, reducing the risk of conflicts and unexpected defaults. In contrast to @Named, which requires unique values for each application, @Identifier allows for multiple beans with the same identifier value as long as their types differ. This flexibility is particularly useful when handling different implementations of the same interface or related types.\nTo use @Identifier, simply annotate the bean class with the annotation and specify the identifier value:\n1 2@Identifier(\u0026#34;payment\u0026#34;) 3public class DefaultPaymentProcessor implements PaymentProcessor { 4 // Implementation 5} 1 2@Identifier(\u0026#34;payment\u0026#34;) 3public class LegacyPaymentGateway implements PaymentGateway { 4 // Implementation 5} Injecting beans using @Identifier is straightforward:\n1public class Client { 2 3 @Inject 4 @Identifier(\u0026#34;payment\u0026#34;) 5 PaymentProcessor processor; 6 7 @Inject 8 @Identifier(\u0026#34;payment\u0026#34;) 9 PaymentGateway gateway; 10 11} Here, the \u0026ldquo;payment\u0026rdquo; @Identifier value is reused for multiple beans because the types PaymentProcessor and PaymentGateway differ. This flexibility is not allowed by @Named, where values must be unique application-wide.\nAnother alternative to @Named is to create custom qualifiers. Custom qualifiers are user-defined annotations that can be used to identify and qualify beans. They offer the most granular control over bean selection and can be tailored to specific needs of the application.\nTo create a custom qualifier, follow these steps:\nDefine a new annotation class. Annotate the annotation class with @Qualifier. Optionally, provide a default value for the qualifier. For example, the following custom qualifier named DefaultPaymentGateway indicates the default payment gateway implementation:\n1 2@Qualifier 3@Retention(RUNTIME) 4@Target({METHOD, FIELD, PARAMETER, TYPE}) 5public @interface DefaultPaymentGateway { 6 7} To use the custom qualifier, annotate the bean class with it:\n1 2@DefaultPaymentGateway 3public class StandardPaymentGateway implements PaymentGateway { 4 // Implementation 5} 1public class ExpressPaymentGateway implements PaymentGateway { 2 // Implementation 3} Then, inject the bean using the qualifier:\n1 2@Inject 3@DefaultPaymentGateway 4private PaymentGateway paymentGateway; Choosing the Right Approach The best approach for bean identification depends on the specific needs of the application. For simple applications, @Named may be sufficient. For more complex applications, @Identifier or custom qualifiers offer more control and flexibility.\nThe following table summarizes the pros and cons of each approach:\nApproach Pros Cons @Named Simple, widely supported Can be ambiguous, conflicts with @Default @Identifier Clearer identification, no conflicts with @Default Requires additional annotations Custom qualifiers Maximum flexibility, fine-grained control Requires upfront effort to define and maintain For further confirmation, you can refer to the official CDI specification\nConclusion: Strategic Choices for Bean Naming and Defaults In conclusion, the potential pitfalls associated with @Named underscore the need for careful consideration when using this annotation in CDI. Ambiguity and unintended defaults can arise when relying on implicit naming, especially in the presence of multiple implementations. Developers are encouraged to explore alternatives such as @Identifier from SmallRye Common for a more controlled and explicit approach to bean identification. Embracing explicit qualification, custom qualifiers, and alternative approaches ensures a smoother and more controlled CDI experience, leading to robust and maintainable Java.\n",
      "content_html": "\u003cp\u003eIn the ever-evolving landscape of Contexts and Dependency Injection (\u003cstrong\u003eCDI\u003c/strong\u003e), developers frequently\nencounter hurdles related to bean naming, default implementations, and potential conflicts. This\narticle provides a detailed exploration of the potential pitfalls associated with the \u003ccode\u003e@Named\u003c/code\u003e\nannotation in \u003cstrong\u003eCDI\u003c/strong\u003e. We will delve into its intricacies, shed light on problematic scenarios, and\ndiscuss alternative approaches, including the use of \u003ccode\u003e@Identifier\u003c/code\u003e from \u003cstrong\u003eSmallRye\u003c/strong\u003e. Furthermore,\nwe\u0026rsquo;ll offer insights into best practices for building robust and maintainable \u003cstrong\u003eJakarta EE\u003c/strong\u003e\napplications.\u003c/p\u003e\n\u003ch2 id=\"understanding-default\"\u003eUnderstanding \u003ccode\u003e@Default\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003e@Default\u003c/code\u003e annotation is a valuable tool in \u003cstrong\u003eCDI\u003c/strong\u003e for explicitly marking a specific\nimplementation\nas the default one for a given interface or bean type. It comes into play when dealing with multiple\nimplementations of the same interface, allowing developers to specify which implementation should be\ninjected by default when no other qualifiers are used.\u003c/p\u003e\n\u003cp\u003eConsider a scenario where multiple implementations of the \u003ccode\u003eGreetingService\u003c/code\u003e interface exist:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Default\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eDefaultGreetingService\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eimplements\u003c/span\u003e GreetingService {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e  @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e String \u003cspan style=\"color:#41a1c0\"\u003egreet\u003c/span\u003e(String name) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;Hello, \u0026#34;\u003c/span\u003e + name;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eSpecialGreetingService\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eimplements\u003c/span\u003e GreetingService {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e  @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e String \u003cspan style=\"color:#41a1c0\"\u003egreet\u003c/span\u003e(String name) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;Greetings, \u0026#34;\u003c/span\u003e + name + \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;!\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhen injecting a bean without specifying any qualifiers, \u003cstrong\u003eCDI\u003c/strong\u003e uses the \u003ccode\u003e@Default\u003c/code\u003e -marked bean as\nthe\ndefault. This is beneficial in scenarios with multiple implementations, providing a clear default\nchoice.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Inject\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e GreetingService greetingService; \u003cspan style=\"color:#6c7986\"\u003e// Injects the @Default implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhile the use of \u003ccode\u003e@Default\u003c/code\u003e is optional, it\u0026rsquo;s highly recommended, particularly when dealing with\ninterfaces that have multiple implementations. It provides a clear and consistent default option,\npreventing ambiguity and unexpected behavior during bean injection.\u003c/p\u003e\n\u003ch2 id=\"exploring-named---a-double-edged-sword\"\u003eExploring \u003ccode\u003e@Named\u003c/code\u003e - a double-edged sword\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003e@Named\u003c/code\u003e qualifier plays a fundamental role in \u003cstrong\u003eCDI\u003c/strong\u003e, assigning a human-readable name or\nidentifier to a bean. Developers often employ it to refer to beans by name when injecting them into\nother components.\u003c/p\u003e\n\u003cp\u003eHowever, \u003ccode\u003e@Named\u003c/code\u003e comes with its own set of challenges, particularly when used without additional\nqualifiers. By default, \u003cstrong\u003eCDI\u003c/strong\u003e associates the unqualified class name as the bean name. This can\nlead to conflicts with the @Default qualifier, resulting in unexpected behavior during bean\ninjection.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Named\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eMyBean\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#6c7986\"\u003e// Implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhen injecting \u003ccode\u003eMyBean\u003c/code\u003e without explicit qualifiers, CDI will only add the \u003ccode\u003e@Named\u003c/code\u003e qualifier, not\nthe \u003ccode\u003e@Default\u003c/code\u003e qualifier. The \u003ccode\u003e@Default\u003c/code\u003e qualifier is only applied if it is explicitly specified on\nthe bean or its qualifiers.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Inject\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e MyBean myBean;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn this case, ambiguity may arise if there are other beans with the same type name. For instance, if\nthere is another bean named \u003ccode\u003eMyBean\u003c/code\u003e, the injection will result in ambiguity.\u003c/p\u003e\n\u003cp\u003eTo address this issue, developers should explicitly qualify the bean they intend to inject.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Inject\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e@Named(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;myBean\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e MyBean myBean;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAlternatively, developers can utilize a custom qualifier for each bean to eliminate ambiguity.\u003c/p\u003e\n\u003ch2 id=\"problematic-cases-ambiguity-and-unintended-defaults\"\u003eProblematic Cases: Ambiguity and Unintended Defaults\u003c/h2\u003e\n\u003cp\u003eAmbiguity arises when \u003ccode\u003e@Named\u003c/code\u003e is used without additional qualifiers, and multiple implementations\nof\nthe same type exist. Consider the following scenario:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Named\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eServiceA\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eimplements\u003c/span\u003e Service {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#6c7986\"\u003e// Implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Named\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eServiceB\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eimplements\u003c/span\u003e Service {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#6c7986\"\u003e// Implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eInjecting \u003ccode\u003eService\u003c/code\u003e without explicit qualifiers can lead to ambiguity since both beans match by\ntype,\nand no name or qualifier distinguishes them.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Inject\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e Service service;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn this case, \u003cstrong\u003eCDI\u003c/strong\u003e does not implicitly add \u003ccode\u003e@Default\u003c/code\u003e or attempt to resolve the ambiguity,\nresulting in\na failed injection due to an ambiguous dependency.\u003c/p\u003e\n\u003ch2 id=\"alternatives-introducing-identifier-from-smallrye-common\"\u003eAlternatives: Introducing \u003ccode\u003e@Identifier\u003c/code\u003e from SmallRye Common\u003c/h2\u003e\n\u003cp\u003eAcknowledging the challenges posed by \u003ccode\u003e@Named\u003c/code\u003e, developers often seek alternatives for more explicit\ncontrol over bean identification. One such alternative is the \u003ccode\u003e@Identifier\u003c/code\u003e annotation\nfrom \u003ca href=\"https://javadoc.io/doc/io.smallrye.common/smallrye-common-annotation/latest/io/smallrye/common/annotation/Identifier.html\"\u003e\nSmallRye\nCommon\u003c/a\u003e . This annotation offers a clearer and more controlled approach to naming beans, reducing\nthe\nrisk of conflicts and unexpected defaults.\nIn contrast to \u003ccode\u003e@Named\u003c/code\u003e, which requires unique values for each application, \u003ccode\u003e@Identifier\u003c/code\u003e allows for\nmultiple beans with the same identifier value as long as their types differ. This flexibility is\nparticularly useful when handling different implementations of the same interface or related types.\u003c/p\u003e\n\u003cp\u003eTo use \u003ccode\u003e@Identifier\u003c/code\u003e, simply annotate the bean class with the annotation and specify the identifier\nvalue:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Identifier(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;payment\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eDefaultPaymentProcessor\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eimplements\u003c/span\u003e PaymentProcessor {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#6c7986\"\u003e// Implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Identifier(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;payment\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eLegacyPaymentGateway\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eimplements\u003c/span\u003e PaymentGateway {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#6c7986\"\u003e// Implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eInjecting beans using \u003ccode\u003e@Identifier\u003c/code\u003e is straightforward:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eClient\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e  @Inject\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e  @Identifier(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;payment\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e  PaymentProcessor processor;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e  @Inject\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e  @Identifier(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;payment\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e  PaymentGateway gateway;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHere, the \u0026ldquo;payment\u0026rdquo; \u003ccode\u003e@Identifier\u003c/code\u003e value is reused for multiple beans because the types\n\u003ccode\u003ePaymentProcessor\u003c/code\u003e and \u003ccode\u003ePaymentGateway\u003c/code\u003e differ. This flexibility is not allowed by \u003ccode\u003e@Named\u003c/code\u003e, where\nvalues\nmust be unique application-wide.\u003c/p\u003e\n\u003cp\u003eAnother alternative to \u003ccode\u003e@Named\u003c/code\u003e is to create custom qualifiers. Custom qualifiers are user-defined\nannotations that can be used to identify and qualify beans. They offer the most granular control\nover bean selection and can be tailored to specific needs of the application.\u003c/p\u003e\n\u003cp\u003eTo create a custom qualifier, follow these steps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eDefine a new annotation class.\u003c/li\u003e\n\u003cli\u003eAnnotate the annotation class with \u003ccode\u003e@Qualifier\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eOptionally, provide a default value for the qualifier.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor example, the following custom qualifier named \u003ccode\u003eDefaultPaymentGateway\u003c/code\u003e indicates the default\npayment gateway implementation:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Qualifier\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e@Retention(RUNTIME)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e@Target({METHOD, FIELD, PARAMETER, TYPE})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e @interface DefaultPaymentGateway {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTo use the custom qualifier, annotate the bean class with it:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@DefaultPaymentGateway\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eStandardPaymentGateway\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eimplements\u003c/span\u003e PaymentGateway {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#6c7986\"\u003e// Implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eExpressPaymentGateway\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eimplements\u003c/span\u003e PaymentGateway {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#6c7986\"\u003e// Implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen, inject the bean using the qualifier:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e@Inject\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e@DefaultPaymentGateway\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e PaymentGateway paymentGateway;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"choosing-the-right-approach\"\u003eChoosing the Right Approach\u003c/h2\u003e\n\u003cp\u003eThe best approach for bean identification depends on the specific needs of the application. For\nsimple applications, \u003ccode\u003e@Named\u003c/code\u003e may be sufficient. For more complex applications, \u003ccode\u003e@Identifier\u003c/code\u003e or\ncustom\nqualifiers offer more control and flexibility.\u003c/p\u003e\n\u003cp\u003eThe following table summarizes the pros and cons of each approach:\u003c/p\u003e\n\u003cstyle\u003e\ntable {\n    border-collapse: collapse;\n    width: 100%;\n}\n\nth, td {\n    border: 1px solid #dddddd;\n    text-align: left;\n    padding: 8px;\n}\nthead {\n    background-color: #f0e8e8; /* Change this to the desired background color for the header */\n}\n\u003c/style\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eApproach\u003c/th\u003e\n\u003cth\u003ePros\u003c/th\u003e\n\u003cth\u003eCons\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e@Named\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eSimple, widely supported\u003c/td\u003e\n\u003ctd\u003eCan be ambiguous, conflicts with \u003ccode\u003e@Default\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e@Identifier\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eClearer identification, no conflicts with \u003ccode\u003e@Default\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eRequires additional annotations\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCustom qualifiers\u003c/td\u003e\n\u003ctd\u003eMaximum flexibility, fine-grained control\u003c/td\u003e\n\u003ctd\u003eRequires upfront effort to define and maintain\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eFor further confirmation, you can refer to the official \u003cstrong\u003eCDI\u003c/strong\u003e specification\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/2.2.9.png\" alt=\"2.2.9. The qualifier @Named at injection points\n\" title=\"2.2.9. The qualifier @Named at injection points\"\u003e\u003c/p\u003e\n\u003ch3 id=\"conclusion-strategic-choices-for-bean-naming-and-defaults\"\u003eConclusion: Strategic Choices for Bean Naming and Defaults\u003c/h3\u003e\n\u003cp\u003eIn conclusion, the potential pitfalls associated with \u003ccode\u003e@Named\u003c/code\u003e underscore the need for careful\nconsideration when using this annotation in \u003cstrong\u003eCDI\u003c/strong\u003e. Ambiguity and unintended defaults can arise\nwhen\nrelying on implicit naming, especially in the presence of multiple implementations. Developers are\nencouraged to explore alternatives such as \u003ccode\u003e@Identifier\u003c/code\u003e from \u003cstrong\u003eSmallRye Common\u003c/strong\u003e for a more\ncontrolled\nand explicit approach to bean identification. Embracing explicit qualification, custom qualifiers,\nand alternative approaches ensures a smoother and more controlled CDI experience, leading to robust\nand maintainable Java.\u003c/p\u003e\n",
      "url": "https://iqnev.github.io/posts/unveiling-challenges-with-named/",
      "date_published": "9126-09-09T124:99:00+03:00",
      "date_modified": "9126-09-09T124:99:00+03:00",
      "author": {
        "name": "Calvin Tran",
        "url": "https://iqnev.github.io/"
      }
    },
    
    {
      "id": "ab4d7c383ed06830a6d102ddc42bfe1b67f97105",
      "title": "Registering Reflection in Quarkus Extensions",
      "summary": "",
      "content_text": "Quarkus utilizes ahead-of-time (AOT) compilation to build blazing fast native executables. However, AOT works through closed-world analysis which eliminates unused code paths. This can break functionality relying on runtime reflection like dependency injection, bytecode manipulation, and integration with certain libraries.\nRegistering for Reflection When building a native executable, GraalVM operates under a closed-world assumption, analyzing the call tree and eliminating unused classes, methods, and fields. To include elements requiring reflective access, explicit registration becomes crucial.\nUsing the @RegisterForReflection Annotation The simplest way to register a class for reflection is through the @RegisterForReflection annotation:\n1@RegisterForReflection 2public class MyClass { 3} For classes in third-party JARs, an empty class can host the @RegisterForReflection annotation:\n1@RegisterForReflection(targets={DemoReflection1.class, DemoReflection2.class}) 2public class MyReflectionConfiguration { 3} Note that DemoReflection1 and DemoReflection2 will be registered for reflection, but not MyReflectionConfiguration.\nUsing a Configuration File Configuration files can also be used to register classes for reflection. For instance, to register all methods of com.demo.MyClass, create reflection-config.json:\n1[ 2{ 3\u0026#34;name\u0026#34; : \u0026#34;com.demo.MyClass\u0026#34;, 4\u0026#34;allDeclaredConstructors\u0026#34; : true, 5\u0026#34;allPublicConstructors\u0026#34; : true, 6\u0026#34;allDeclaredMethods\u0026#34; : true, 7\u0026#34;allPublicMethods\u0026#34; : true, 8\u0026#34;allDeclaredFields\u0026#34; : true, 9\u0026#34;allPublicFields\u0026#34; : true 10} 11] Make the configuration file known to the native-image executable by adding the following to application.properties:\n1quarkus.native.additional-build-args=-H:ReflectionConfigurationFiles=reflection-config.json Quarkus Extension Support for Native Mode To enable native mode support for a custom extension, Quarkus simplifies the registration of reflection through ReflectiveClassBuildItem. This class is used in the build process to specify classes requiring reflective access.\nUnderstanding ReflectiveClassBuildItem: ReflectiveClassBuildItem is a Quarkus-specific class utilized in the extension development process. It plays a crucial role in indicating which classes should be made available for reflective access at runtime. This is especially relevant when certain operations, such as dependency injection or bytecode manipulation, require runtime reflection.\nUsage in Quarkus Extensions: When creating a Quarkus extension, you can seamlessly integrate the registration of reflective classes using ReflectiveClassBuildItem. The @BuildStep annotation signifies a build step, a fundamental concept in Quarkus extension development. asdadfdf\n1public class MyClass { 2 3 @BuildStep 4 ReflectiveClassBuildItem reflection() { 5 return new ReflectiveClassBuildItem(false, false, \u0026#34;com.demo.DemoClass\u0026#34;); 6 } 7 8} In this snippet, MyClass is a placeholder for the actual extension class you are developing. The reflection() method, annotated with @BuildStep, creates an instance of ReflectiveClassBuildItem, indicating that the class com.demo.DemoClass requires reflective access. The false arguments for methods and fields indicate that reflective access is needed only for the constructor.\nI showcase a Quarkus extension that leverages the ReflectiveClassBuildItem to dynamically register classes for reflection. The extension focuses on identifying classes implementing a specific interface (CustomFeature in this case) and also explicitly registers some standard Java classes for reflective access.\n1import io.quarkus.deployment.annotations.BuildStep; 2import io.quarkus.deployment.builditem.CombinedIndexBuildItem; 3import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem; 4import org.jboss.jandex.ClassInfo; 5 6import java.text.DecimalFormat; 7import java.text.DecimalFormatSymbols; 8import java.text.SimpleDateFormat; 9 10public class ReflectionExtension { 11 12 // Interface to identify classes for reflection 13 private static final DotName CUSTOM_FEATURE_INTERFACE = DotName.createSimple(CustomFeature.class.getName()); 14 15 @BuildStep 16 void registerForReflection(CombinedIndexBuildItem combinedIndex, 17 BuildProducer\u0026lt;ReflectiveClassBuildItem\u0026gt; reflectiveClasses) { 18 19 for (ClassInfo implClassInfo : combinedIndex.getIndex().getAllKnownImplementors(CUSTOM_FEATURE_INTERFACE)) { 20 String combinedIndexName = implClassInfo.name().toString(); 21 log.debugf(\u0026#34;CustomFeature class implementation \u0026#39;[%s]\u0026#39; registered for reflection\u0026#34;, combinedIndexName); 22 23 reflectiveClasses.produce(new ReflectiveClassBuildItem(true, true, combinedIndexName)); 24 } 25 26 } 27 28} Explanation:\nCombinedIndexBuildItem: This build item provides access to the combined index of all classes in the application. In this example, it is used to retrieve all known implementors of the Conversion interface.\nIterating Over Implementors: The extension iterates over all classes implementing the Conversion interface and registers them for reflection using ReflectiveClassBuildItem.\nDotName is a class representing a dotted name, which is essentially a fully qualified class name in a format where package names and class names are separated by dots. The DotName class is part of the Jandex library, which is a tool used by Quarkus for indexing and querying Java classes. DotName is used to represent and work with fully qualified class names in the Jandex indexing system. It\u0026rsquo;s a lightweight and efficient way to refer to classes within the Jandex index.\nConsiderations: While ReflectiveClassBuildItem provides a mechanism to address reflective access requirements, it\u0026rsquo;s crucial to use it judiciously. Excessive reliance on reflective access can undermine the performance benefits of Quarkus\u0026rsquo; AOT compilation approach. Therefore, it\u0026rsquo;s recommended to leverage this tool sparingly and explore alternative strategies whenever possible.\nIn summary, understanding and effectively using ReflectiveClassBuildItem is key to optimizing Quarkus extensions for native mode. By selectively indicating classes that necessitate reflective access, developers can strike a balance between the advantages of AOT compilation and the unavoidable realities of certain runtime operations.\n",
      "content_html": "\u003cp\u003eQuarkus utilizes ahead-of-time \u003cstrong\u003e(AOT)\u003c/strong\u003e compilation to build blazing fast native executables. However,\n\u003cstrong\u003eAOT\u003c/strong\u003e works through closed-world analysis which eliminates unused code paths. This can break\nfunctionality relying on runtime reflection like dependency injection, bytecode manipulation, and\nintegration with certain libraries.\u003c/p\u003e\n\u003ch2 id=\"registering-for-reflection\"\u003eRegistering for Reflection\u003c/h2\u003e\n\u003cp\u003eWhen building a native executable, GraalVM operates under a closed-world assumption, analyzing the\ncall tree and eliminating unused classes, methods, and fields. To include elements requiring\nreflective access, explicit registration becomes crucial.\u003c/p\u003e\n\u003cp\u003eUsing the \u003ccode\u003e@RegisterForReflection\u003c/code\u003e Annotation\nThe simplest way to register a class for reflection is through the \u003ccode\u003e@RegisterForReflection\u003c/code\u003e\nannotation:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e@RegisterForReflection\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eMyClass\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFor classes in third-party JARs, an empty class can host the \u003ccode\u003e@RegisterForReflection\u003c/code\u003e annotation:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e@RegisterForReflection(targets={DemoReflection1.class, DemoReflection2.class})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eMyReflectionConfiguration\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNote that \u003ccode\u003eDemoReflection1\u003c/code\u003e and \u003ccode\u003eDemoReflection2\u003c/code\u003e will be registered for\nreflection, but not \u003ccode\u003eMyReflectionConfiguration\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eUsing a Configuration File\nConfiguration files can also be used to register classes for reflection. For instance, to register\nall methods of \u003ccode\u003ecom.demo.MyClass\u003c/code\u003e, create \u003ccode\u003ereflection-config.json\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e[\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u0026#34;name\u0026#34; : \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;com.demo.MyClass\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\u0026#34;allDeclaredConstructors\u0026#34; : \u003cspan style=\"color:#fc5fa3\"\u003etrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e\u0026#34;allPublicConstructors\u0026#34; : \u003cspan style=\"color:#fc5fa3\"\u003etrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e\u0026#34;allDeclaredMethods\u0026#34; : \u003cspan style=\"color:#fc5fa3\"\u003etrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e\u0026#34;allPublicMethods\u0026#34; : \u003cspan style=\"color:#fc5fa3\"\u003etrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e\u0026#34;allDeclaredFields\u0026#34; : \u003cspan style=\"color:#fc5fa3\"\u003etrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e\u0026#34;allPublicFields\u0026#34; : \u003cspan style=\"color:#fc5fa3\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eMake the configuration file known to the native-image executable by adding the following to\n\u003ccode\u003eapplication.properties\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-properties\" data-lang=\"properties\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003equarkus.native.additional-build-args=\u003cspan style=\"color:#fc6a5d\"\u003e-H:ReflectionConfigurationFiles=reflection-config.json\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"quarkus-extension-support-for-native-mode\"\u003eQuarkus Extension Support for Native Mode\u003c/h2\u003e\n\u003cp\u003eTo enable native mode support for a custom extension, Quarkus simplifies the registration of\nreflection through \u003ccode\u003eReflectiveClassBuildItem\u003c/code\u003e.\nThis class is used in the build process to specify classes requiring reflective access.\u003c/p\u003e\n\u003ch2 id=\"understanding-reflectiveclassbuilditem\"\u003eUnderstanding ReflectiveClassBuildItem:\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eReflectiveClassBuildItem\u003c/code\u003e is a Quarkus-specific class utilized in the extension development process.\nIt plays a crucial role in indicating which classes should be made available for reflective access\nat runtime. This is especially relevant when certain operations, such as dependency injection or\nbytecode manipulation, require runtime reflection.\u003c/p\u003e\n\u003ch2 id=\"usage-in-quarkus-extensions\"\u003eUsage in Quarkus Extensions:\u003c/h2\u003e\n\u003cp\u003eWhen creating a Quarkus extension, you can seamlessly integrate the registration of reflective\nclasses using \u003ccode\u003eReflectiveClassBuildItem\u003c/code\u003e.\nThe \u003ccode\u003e@BuildStep\u003c/code\u003e annotation signifies a build step, a fundamental concept in Quarkus extension\ndevelopment. asdadfdf\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eMyClass\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e    @BuildStep\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e    ReflectiveClassBuildItem \u003cspan style=\"color:#41a1c0\"\u003ereflection\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e ReflectiveClassBuildItem(\u003cspan style=\"color:#fc5fa3\"\u003efalse\u003c/span\u003e, \u003cspan style=\"color:#fc5fa3\"\u003efalse\u003c/span\u003e, \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;com.demo.DemoClass\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn this snippet, \u003ccode\u003eMyClass\u003c/code\u003e is a placeholder for the actual extension class you are\ndeveloping. The \u003ccode\u003ereflection()\u003c/code\u003e method, annotated with \u003ccode\u003e@BuildStep\u003c/code\u003e, creates an instance of\n\u003ccode\u003eReflectiveClassBuildItem\u003c/code\u003e, indicating that the class \u003ccode\u003ecom.demo.DemoClass\u003c/code\u003e requires reflective access.\nThe false arguments for methods and fields indicate that reflective access is needed only for the\nconstructor.\u003c/p\u003e\n\u003cp\u003eI showcase a Quarkus extension that leverages the \u003ccode\u003eReflectiveClassBuildItem to\u003c/code\u003e dynamically register\nclasses for reflection.\nThe extension focuses on identifying classes implementing a specific interface (\u003ccode\u003eCustomFeature\u003c/code\u003e in this\ncase) and also explicitly registers some standard Java classes for reflective access.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e io.quarkus.deployment.annotations.BuildStep;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e org.jboss.jandex.ClassInfo;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e java.text.DecimalFormat;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e java.text.DecimalFormatSymbols;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e java.text.SimpleDateFormat;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eReflectionExtension\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#6c7986\"\u003e// Interface to identify classes for reflection\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e DotName CUSTOM_FEATURE_INTERFACE = DotName.createSimple(CustomFeature.class.getName());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e    @BuildStep\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eregisterForReflection\u003c/span\u003e(CombinedIndexBuildItem combinedIndex,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e                               BuildProducer\u0026lt;ReflectiveClassBuildItem\u0026gt; reflectiveClasses) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#fc5fa3\"\u003efor\u003c/span\u003e (ClassInfo implClassInfo : combinedIndex.getIndex().getAllKnownImplementors(CUSTOM_FEATURE_INTERFACE)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\u003c/span\u003e\u003cspan\u003e            String combinedIndexName = implClassInfo.name().toString();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\u003c/span\u003e\u003cspan\u003e            log.debugf(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;CustomFeature class implementation \u0026#39;[%s]\u0026#39; registered for reflection\u0026#34;\u003c/span\u003e, combinedIndexName);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\u003c/span\u003e\u003cspan\u003e            reflectiveClasses.produce(\u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e ReflectiveClassBuildItem(\u003cspan style=\"color:#fc5fa3\"\u003etrue\u003c/span\u003e, \u003cspan style=\"color:#fc5fa3\"\u003etrue\u003c/span\u003e, combinedIndexName));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\u003c/span\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCombinedIndexBuildItem:\u003c/strong\u003e This build item provides access to the combined index of all classes in\nthe application. In this example, it is used to retrieve all known implementors of the Conversion\ninterface.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eIterating Over Implementors:\u003c/strong\u003e The extension iterates over all classes implementing the Conversion\ninterface and registers them for reflection using \u003ccode\u003eReflectiveClassBuildItem\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDotName\u003c/strong\u003e is a class representing a dotted name, which is essentially a fully qualified class name\nin a format where package names and class names are separated by dots. The \u003ccode\u003eDotName\u003c/code\u003e class is part\nof the \u003cstrong\u003eJandex library\u003c/strong\u003e, which is a tool used by Quarkus for indexing and querying Java classes.\n\u003ccode\u003eDotName\u003c/code\u003e is used to represent and work with fully qualified class names in the \u003cstrong\u003eJandex indexing\u003c/strong\u003e\nsystem. It\u0026rsquo;s a lightweight and efficient way to refer to classes within the \u003cstrong\u003eJandex index\u003c/strong\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003eConsiderations:\u003c/strong\u003e\nWhile \u003ccode\u003eReflectiveClassBuildItem\u003c/code\u003e provides a mechanism to address reflective access requirements, it\u0026rsquo;s\ncrucial to use it judiciously. Excessive reliance on reflective access can undermine the performance\nbenefits of Quarkus\u0026rsquo; \u003cstrong\u003eAOT\u003c/strong\u003e compilation approach. Therefore, it\u0026rsquo;s recommended to leverage this tool\nsparingly and explore alternative strategies whenever possible.\u003c/p\u003e\n\u003cp\u003eIn summary, understanding and effectively using \u003ccode\u003eReflectiveClassBuildItem\u003c/code\u003e is key to optimizing\nQuarkus extensions for native mode. By selectively indicating classes that necessitate reflective\naccess, developers can strike a balance between the advantages of \u003cstrong\u003eAOT\u003c/strong\u003e compilation and the\nunavoidable realities of certain runtime operations.\u003c/p\u003e\n",
      "url": "https://iqnev.github.io/posts/registering-reflection-in-quarkus-extensions/",
      "date_published": "26116-26-09T114:2626:00+03:00",
      "date_modified": "26116-26-09T114:2626:00+03:00",
      "author": {
        "name": "Calvin Tran",
        "url": "https://iqnev.github.io/"
      }
    },
    
    {
      "id": "5fc90753aea95e9d39a73ec00ab3319f8e73d1d1",
      "title": "Exploring Synthetic Beans in Quarkus: A Powerful Extension Mechanism",
      "summary": "",
      "content_text": "In the world of Quarkus, the realm of dependency injection is rich and versatile, offering developers a multitude of tools to manage and control beans. One such tool is the concept of synthetic beans. Synthetic beans are a powerful extension mechanism that allows you to register beans whose attributes are not derived from a Java class, method, or field. Instead, all the attributes of a synthetic bean are defined by an extension.\nIn this article, we\u0026rsquo;ll take a deep dive into the world of synthetic beans in Quarkus. We\u0026rsquo;ll explore the need for synthetic beans, their practical applications, and how to create and use them in your Quarkus applications.\nUnderstanding Synthetic Beans In Quarkus, beans are the building blocks of your application, managed by the Contexts and Dependency Injection (CDI) framework. Typically, CDI beans are Java classes that are annotated with various CDI annotations such as @ApplicationScoped, @RequestScoped, or @Inject. These annotations allow CDI to automatically manage the lifecycle and injection of beans.\nHowever, there are situations where you may need to register a bean that doesn\u0026rsquo;t neatly fit into the traditional CDI model. This is where synthetic beans come into play. Synthetic beans are created by extensions and have their attributes entirely defined by these extensions. In the world of regular CDI, you would achieve this using the AfterBeanDiscovery.addBean() and SyntheticComponents.addBean() methods. In Quarkus, this is accomplished using SyntheticBeanBuildItem.\nWhen Do You Need Synthetic Beans? So, when might you need to use synthetic beans in Quarkus? Synthetic beans are a powerful tool when:\nIntegrating Third-Party Libraries: You\u0026rsquo;re working with a third-party library that doesn\u0026rsquo;t have CDI annotations but needs to be integrated into your CDI-based application. Synthetic beans allow you to bridge this gap.\nDynamic Bean Registration: You need to register beans dynamically at runtime, depending on configuration or other factors. Synthetic beans give you the flexibility to create and register beans on-the-fly.\nCustomized Bean Management: You require fine-grained control over the scope and behavior of a bean that can\u0026rsquo;t be achieved with standard CDI annotations.\nImplementing Specialized Beans: You want to create specialized beans with unique attributes that don\u0026rsquo;t correspond to traditional Java classes or methods.\nMocking Dependencies for Testing: Synthetic beans provide a useful way to mock out dependencies and inject mock implementations for testing purposes.\nSynthesisFinishedBuildItem The SynthesisFinishedBuildItem is used to indicate that the CDI bean discovery and registration process has completed. This allows extensions to know when it is safe to interact with the beans that have been registered.\nFor example:\n1@BuildStep 2void onSynthesisFinished(SynthesisFinishedBuildItem synthesisFinished){ 3 // CDI bean registration is complete, can now safely interact with beans 4 } SyntheticBeansRuntimeInitBuildItem The SyntheticBeansRuntimeInitBuildItem is used to register a callback that will be invoked at runtime after all synthetic beans have been initialized. This is useful if you need to perform additional initialization logic involving synthetic beans.\nFor example:\n1@BuildStep 2SyntheticBeansRuntimeInitBuildItem initSyntheticBeans(){ 3 4 return new SyntheticBeansRuntimeInitBuildItem(ids-\u0026gt;{ 5 // Perform logic with initialized synthetic beans 6 }); 7 8 } The callback passed to SyntheticBeansRuntimeInitBuildItem will receive a Set\u0026lt;Integer\u0026gt; containing the IDs of all initialized synthetic beans.\nSo in summary, SynthesisFinishedBuildItem indicates bean discovery is done, while SyntheticBeansRuntimeInitBuildItem allows initializing logic depending on synthetic beans.\nCreating Synthetic Beans with SyntheticBeanBuildItem In Quarkus, creating synthetic beans is a straightforward process, thanks to the SyntheticBeanBuildItem class. Let\u0026rsquo;s walk through the steps to create and use a synthetic bean:\nCreate the Synthetic Bean Class: Start by defining the synthetic bean class. This class will be the foundation for your synthetic bean. 1package com.iqnev; 2 3public class MySyntheticBean { 4 5 // Define the behavior and attributes of your synthetic bean 6 public void printMessage() { 7 System.out.println(\u0026#34;Hello from synthetic bean!\u0026#34;); 8 } 9} Create a Quarkus Extension: You\u0026rsquo;ll need to create a Quarkus extension to register your synthetic bean. This extension class will use SyntheticBeanBuildItem to configure your bean. Bytecode Generation Approach 1package com.iqnev; 2 3import io.quarkus.arc.deployment.SyntheticBeanBuildItem; 4 5public class MySyntheticBeanExtension { 6 7 @BuildStep 8 SyntheticBeanBuildItem syntheticBean() { 9 return SyntheticBeanBuildItem 10 .configure(MySyntheticBean.class) 11 .scope(ApplicationScoped.class) 12 .creator(mc -\u0026gt; { 13 mc.returnValue(new MySyntheticBean()); 14 }) 15 .done(); 16 } 17} The .creator() method on SyntheticBeanBuildItem is used to generate the bytecode that will create instances of the synthetic bean at runtime.\nThe argument passed to .creator() is a Consumer\u0026lt;MethodCreator\u0026gt; which allows generating Java bytecode inside a method.\nIn this example:\nmc is the MethodCreator instance mc.returnValue(new MySyntheticBean()) generates the bytecode to create a new instance of MySyntheticBean and return it from the method. So essentially, we are telling Quarkus to generate a method that looks something like:\n1MySyntheticBean createSyntheticBean(){ 2 return new MySyntheticBean(); 3 } This generated method will then be called to instantiate the MySyntheticBean when it needs to be injected or used.\nThe reason bytecode generation is used is that synthetic beans do not correspond to real Java classes/methods, so we have to explicitly generate a method to instantiate them\nThe output of SyntheticBeanBuildItem is bytecode recorded at build time. This limits how instances are created at runtime. Common options are:\nGenerate bytecode directly via .creator() Use a BeanCreator subclass Produce instance via @Recorder method Recorder Approach The @Record and .runtimeValue() approaches are alternate ways of providing instances for synthetic beans in Quarkus.\nThis allows you to instantiate the synthetic bean via a recorder class method annotated with @Record(STATIC_INIT). For example:\n1 2@Recorder 3public class MyRecorder { 4 5 @Record(STATIC_INIT) 6 public MySyntheticBean createBean() { 7 return new MySyntheticBean(); 8 } 9 10} 11 12 @BuildStep 13 SyntheticBeanBuildItem syntheticBean(MyRecorder recorder) { 14 return SyntheticBeanBuildItem 15 .configure(MySyntheticBean.class) 16 .runtimeValue(recorder.createBean()); 17 } Here the .runtimeValue() references the recorder method to instantiate the bean.\nThis allows passing a RuntimeValue directly to provide the synthetic bean instance.\nFor example:\n1@BuildStep 2SyntheticBeanBuildItem syntheticBean(){ 3 4 RuntimeValue\u0026lt;MySyntheticBean\u0026gt; bean= //... 5 6 return SyntheticBeanBuildItem 7 .configure(MySyntheticBean.class) 8 .runtimeValue(bean); 9 10 } The RuntimeValue could come from a recorder, supplier, proxy etc.\nSo in summary:\n@Record is one approach to generate the RuntimeValue .runtimeValue() sets the RuntimeValue on the SyntheticBeanBuildItem They both achieve the same goal of providing a runtime instance, just in slightly different ways.\nWhen it comes to providing runtime instances for synthetic beans in Quarkus, I would consider using recorders (via @Record) to be a more advanced approach compared to directly generating bytecode with .creator() or supplying simple RuntimeValues.\nHere are some reasons why using recorders can be more advanced:\nMore encapsulation - The logic to instantiate beans is contained in a separate recorder class rather than directly in build steps. This keeps build steps lean. Reuse - Recorder methods can be reused across multiple synthetic beans rather than rewriting creator logic. Runtime data - Recorder methods execute at runtime so they can leverage runtime resources, configs, services etc. to construct beans. Dependency injection - Recorder methods can inject other services. Life cycle control - Recorder methods annotated with @Record(STATIC_INIT) or @Record(RUNTIME_INIT) give more control over bean instantiation life cycle. Managed beans - Beans instantiated inside recorders can themselves be CDI managed beans. So in summary, recorder methods provide more encapsulation, flexibility and access to runtime data and services for instantiating synthetic beans. They allow for more advanced bean production logic compared to direct bytecode generation.\nHowever, direct bytecode generation with .creator() can still be useful for simple cases where recorders may be overkill. But as synthetic bean needs grow, recorders are a more powerful and advanced approach.\nNote\nIt is possible to configure a synthetic bean in Quarkus to be initialized during the RUNTIME_INIT phase instead of the default STATIC_INIT phase.\nHere is an example:\n1@BuildStep 2@Record(RUNTIME_INIT) 3SyntheticBeanBuildItem lazyBean(BeanRecorder recorder){ 4 5 return SyntheticBeanBuildItem 6 .configure(MyLazyBean.class) 7 .setRuntimeInit() // initialize during RUNTIME_INIT 8 .runtimeValue(recorder.createLazyBean()); 9 10 } The key points are:\nUse setRuntimeInit() on the SyntheticBeanBuildItem to mark it for RUNTIME_INIT The recorder method must be annotated with @Record(RUNTIME_INIT) The runtime init synthetic beans cannot be accessed during STATIC_INIT So in summary, synthetic beans can be initialized lazily during RUNTIME_INIT for cases where eager STATIC_INIT instantiation is not needed. This allows optimizing startup time.\nUse the Synthetic Bean: Now that your synthetic bean is registered, you can inject and use it in your application. 1package com.iqnev; 2 3import javax.inject.Inject; 4 5public class MyBeanUser { 6 7 @Inject 8 MySyntheticBean mySyntheticBean; 9 10 public void useSyntheticBean() { 11 // Use the synthetic bean in your code 12 mySyntheticBean.printMessage(); 13 } 14} Running Your Application: Build and run your Quarkus application as usual, and the synthetic bean will be available for injection and use. Conclusion Synthetic beans in Quarkus provide a powerful mechanism for integrating external libraries, dynamically registering beans, and customizing bean behavior in your CDI-based applications. These beans, whose attributes are defined by extensions rather than Java classes, offer flexibility and versatility in managing dependencies.\nAs we\u0026rsquo;ve explored in this article, creating and using synthetic beans in Quarkus is a straightforward process. By leveraging SyntheticBeanBuildItem and Quarkus extensions, you can seamlessly bridge the gap between traditional CDI and more specialized or dynamic bean registration requirements.\nIn the ever-evolving landscape of Java frameworks, Quarkus continues to stand out by offering innovative solutions like synthetic beans, making it a compelling choice for modern, efficient, and flexible application development. Embrace the power of synthetic beans in Quarkus, and take your dependency injection to the next level!\n",
      "content_html": "\u003cp\u003eIn the world of Quarkus, the realm of dependency injection is rich and versatile, offering\ndevelopers a multitude of tools to manage and control beans. One such tool is the concept of\nsynthetic beans. Synthetic beans are a powerful extension mechanism that allows you to register\nbeans whose attributes are not derived from a Java class, method, or field. Instead, all the\nattributes of a synthetic bean are defined by an extension.\u003c/p\u003e\n\u003cp\u003eIn this article, we\u0026rsquo;ll take a deep dive into the world of synthetic beans in Quarkus. We\u0026rsquo;ll explore\nthe need for synthetic beans, their practical applications, and how to create and use them in your\nQuarkus applications.\u003c/p\u003e\n\u003ch2 id=\"understanding-synthetic-beans\"\u003eUnderstanding Synthetic Beans\u003c/h2\u003e\n\u003cp\u003eIn Quarkus, beans are the building blocks of your application, managed by the Contexts and\nDependency Injection (CDI) framework. Typically, CDI beans are Java classes that are annotated with\nvarious CDI annotations such as \u003ccode\u003e@ApplicationScoped\u003c/code\u003e, \u003ccode\u003e@RequestScoped\u003c/code\u003e, or \u003ccode\u003e@Inject\u003c/code\u003e. These\nannotations\nallow CDI to automatically manage the lifecycle and injection of beans.\u003c/p\u003e\n\u003cp\u003eHowever, there are situations where you may need to register a bean that doesn\u0026rsquo;t neatly fit into the\ntraditional CDI model. This is where synthetic beans come into play. Synthetic beans are created by\nextensions and have their attributes entirely defined by these extensions. In the world of regular\nCDI, you would achieve this using the \u003ccode\u003eAfterBeanDiscovery.addBean()\u003c/code\u003e\nand \u003ccode\u003eSyntheticComponents.addBean()\u003c/code\u003e\nmethods. In Quarkus, this is accomplished using \u003ccode\u003eSyntheticBeanBuildItem\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"when-do-you-need-synthetic-beans\"\u003eWhen Do You Need Synthetic Beans?\u003c/h2\u003e\n\u003cp\u003eSo, when might you need to use synthetic beans in Quarkus? Synthetic beans are a powerful tool when:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eIntegrating Third-Party Libraries:\u003c/strong\u003e You\u0026rsquo;re working with a third-party library that doesn\u0026rsquo;t\nhave CDI annotations but needs to be integrated into your CDI-based application. Synthetic beans\nallow you to bridge this gap.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDynamic Bean Registration:\u003c/strong\u003e You need to register beans dynamically at runtime, depending on\nconfiguration or other factors. Synthetic beans give you the flexibility to create and register\nbeans on-the-fly.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCustomized Bean Management:\u003c/strong\u003e You require fine-grained control over the scope and behavior of a\nbean that can\u0026rsquo;t be achieved with standard CDI annotations.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eImplementing Specialized Beans:\u003c/strong\u003e You want to create specialized beans with unique attributes\nthat don\u0026rsquo;t correspond to traditional Java classes or methods.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eMocking Dependencies for Testing:\u003c/strong\u003e Synthetic beans provide a useful way to mock out\ndependencies and inject mock implementations for testing purposes.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"synthesisfinishedbuilditem\"\u003eSynthesisFinishedBuildItem\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eSynthesisFinishedBuildItem\u003c/code\u003e is used to indicate that the CDI bean discovery and registration\nprocess has completed.\nThis allows extensions to know when it is safe to interact with the beans that have been registered.\u003c/p\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e@BuildStep  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eonSynthesisFinished\u003c/span\u003e(SynthesisFinishedBuildItem synthesisFinished){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#6c7986\"\u003e// CDI bean registration is complete, can now safely interact with beans\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"syntheticbeansruntimeinitbuilditem\"\u003eSyntheticBeansRuntimeInitBuildItem\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eSyntheticBeansRuntimeInitBuildItem\u003c/code\u003e is used to register a callback that will be invoked at\nruntime after all synthetic beans have been initialized.\nThis is useful if you need to perform additional initialization logic involving synthetic beans.\u003c/p\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e@BuildStep\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003eSyntheticBeansRuntimeInitBuildItem \u003cspan style=\"color:#41a1c0\"\u003einitSyntheticBeans\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e SyntheticBeansRuntimeInitBuildItem(ids-\u0026gt;{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#6c7986\"\u003e// Perform logic with initialized synthetic beans\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\u003c/span\u003e\u003cspan\u003e    });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe callback passed to \u003ccode\u003eSyntheticBeansRuntimeInitBuildItem\u003c/code\u003e will receive a \u003ccode\u003eSet\u0026lt;Integer\u0026gt;\u003c/code\u003e containing\nthe IDs of all initialized synthetic beans.\u003c/p\u003e\n\u003cp\u003eSo in summary, \u003ccode\u003eSynthesisFinishedBuildItem\u003c/code\u003e indicates bean discovery is done,\nwhile \u003ccode\u003eSyntheticBeansRuntimeInitBuildItem\u003c/code\u003e allows initializing logic depending on synthetic beans.\u003c/p\u003e\n\u003ch2 id=\"creating-synthetic-beans-with-syntheticbeanbuilditem\"\u003eCreating Synthetic Beans with SyntheticBeanBuildItem\u003c/h2\u003e\n\u003cp\u003eIn Quarkus, creating synthetic beans is a straightforward process, thanks to\nthe \u003ccode\u003eSyntheticBeanBuildItem\u003c/code\u003e class.\nLet\u0026rsquo;s walk through the steps to create and use a synthetic bean:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eCreate the Synthetic Bean Class:\u003c/strong\u003e Start by defining the synthetic bean class. This class will\nbe the foundation for your synthetic bean.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epackage\u003c/span\u003e com.iqnev;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eMySyntheticBean\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#6c7986\"\u003e// Define the behavior and attributes of your synthetic bean\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eprintMessage\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\u003c/span\u003e\u003cspan\u003e    System.out.println(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;Hello from synthetic bean!\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eCreate a Quarkus Extension:\u003c/strong\u003e You\u0026rsquo;ll need to create a Quarkus extension to register your\nsynthetic\nbean.\nThis extension class will use \u003ccode\u003eSyntheticBeanBuildItem\u003c/code\u003e to configure your bean.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"bytecode-generation-approach\"\u003eBytecode Generation Approach\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epackage\u003c/span\u003e com.iqnev;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e io.quarkus.arc.deployment.SyntheticBeanBuildItem;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eMySyntheticBeanExtension\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e  @BuildStep\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e  SyntheticBeanBuildItem \u003cspan style=\"color:#41a1c0\"\u003esyntheticBean\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e SyntheticBeanBuildItem\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e        .configure(MySyntheticBean.class)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e        .scope(ApplicationScoped.class)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e        .creator(mc -\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e          mc.returnValue(\u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e MySyntheticBean());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e        })\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e        .done();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003e.creator()\u003c/code\u003e method on \u003ccode\u003eSyntheticBeanBuildItem\u003c/code\u003e is used to generate the bytecode that will\ncreate instances of the synthetic bean at runtime.\u003c/p\u003e\n\u003cp\u003eThe argument passed to \u003ccode\u003e.creator()\u003c/code\u003e is a \u003ccode\u003eConsumer\u0026lt;MethodCreator\u0026gt;\u003c/code\u003e which allows generating Java\nbytecode inside a method.\u003c/p\u003e\n\u003cp\u003eIn this example:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003emc\u003c/code\u003e is the \u003ccode\u003eMethodCreator\u003c/code\u003e instance\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emc.returnValue(new MySyntheticBean())\u003c/code\u003e generates the bytecode to create a new instance\nof \u003ccode\u003eMySyntheticBean\u003c/code\u003e and return it from the method.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSo essentially, we are telling Quarkus to generate a method that looks something like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003eMySyntheticBean \u003cspan style=\"color:#41a1c0\"\u003ecreateSyntheticBean\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e MySyntheticBean();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis generated method will then be called to instantiate the \u003ccode\u003eMySyntheticBean\u003c/code\u003e when it needs to be\ninjected or used.\u003c/p\u003e\n\u003cp\u003eThe reason bytecode generation is used is that synthetic beans do not correspond to real Java\nclasses/methods, so we have to explicitly generate a method to instantiate them\u003c/p\u003e\n\u003cp\u003eThe output of \u003ccode\u003eSyntheticBeanBuildItem\u003c/code\u003e is bytecode recorded at build time. This limits how instances\nare created at runtime. Common options are:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eGenerate bytecode directly via \u003ccode\u003e.creator()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eUse a \u003ccode\u003eBeanCreator\u003c/code\u003e subclass\u003c/li\u003e\n\u003cli\u003eProduce instance via \u003ccode\u003e@Recorder\u003c/code\u003e method\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"recorder-approach\"\u003eRecorder Approach\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003e@Record\u003c/code\u003e and \u003ccode\u003e.runtimeValue()\u003c/code\u003e approaches are alternate ways of providing instances for\nsynthetic beans in Quarkus.\u003c/p\u003e\n\u003cp\u003eThis allows you to instantiate the synthetic bean via a recorder class method annotated\nwith \u003ccode\u003e@Record(STATIC_INIT)\u003c/code\u003e.\nFor example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e@Recorder\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eMyRecorder\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e  @Record(STATIC_INIT)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e MySyntheticBean \u003cspan style=\"color:#41a1c0\"\u003ecreateBean\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e MySyntheticBean();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e  @BuildStep\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e  SyntheticBeanBuildItem \u003cspan style=\"color:#41a1c0\"\u003esyntheticBean\u003c/span\u003e(MyRecorder recorder) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e SyntheticBeanBuildItem\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e        .configure(MySyntheticBean.class)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e        .runtimeValue(recorder.createBean());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHere the \u003ccode\u003e.runtimeValue()\u003c/code\u003e references the recorder method to instantiate the bean.\u003c/p\u003e\n\u003cp\u003eThis allows passing a \u003ccode\u003eRuntimeValue\u003c/code\u003e directly to provide the synthetic bean instance.\u003c/p\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e@BuildStep \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003eSyntheticBeanBuildItem \u003cspan style=\"color:#41a1c0\"\u003esyntheticBean\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e    RuntimeValue\u0026lt;MySyntheticBean\u0026gt; bean= \u003cspan style=\"color:#6c7986\"\u003e//...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e SyntheticBeanBuildItem\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e    .configure(MySyntheticBean.class)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e    .runtimeValue(bean);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003eRuntimeValue\u003c/code\u003e could come from a recorder, supplier, proxy etc.\u003c/p\u003e\n\u003cp\u003eSo in summary:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e@Record\u003c/code\u003e is one approach to generate the \u003ccode\u003eRuntimeValue\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.runtimeValue()\u003c/code\u003e sets the \u003ccode\u003eRuntimeValue\u003c/code\u003e on the \u003ccode\u003eSyntheticBeanBuildItem\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThey both achieve the same goal of providing a runtime instance, just in slightly different ways.\u003c/p\u003e\n\u003cp\u003eWhen it comes to providing runtime instances for synthetic beans in Quarkus, I would consider using\nrecorders (via \u003ccode\u003e@Record\u003c/code\u003e) to be a more advanced approach compared to directly generating bytecode\nwith\n\u003ccode\u003e.creator()\u003c/code\u003e or supplying simple RuntimeValues.\u003c/p\u003e\n\u003cp\u003eHere are some reasons why using recorders can be more advanced:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eMore encapsulation -\u003c/strong\u003e The logic to instantiate beans is contained in a separate recorder class\nrather than directly in build steps. This keeps build steps lean.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eReuse -\u003c/strong\u003e Recorder methods can be reused across multiple synthetic beans rather than rewriting\ncreator logic.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRuntime data -\u003c/strong\u003e Recorder methods execute at runtime so they can leverage runtime resources,\nconfigs, services etc. to construct beans.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDependency injection -\u003c/strong\u003e Recorder methods can inject other services.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLife cycle control -\u003c/strong\u003e Recorder methods annotated with \u003ccode\u003e@Record(STATIC_INIT)\u003c/code\u003e\nor \u003ccode\u003e@Record(RUNTIME_INIT)\u003c/code\u003e give more control over bean instantiation life cycle.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eManaged beans -\u003c/strong\u003e Beans instantiated inside recorders can themselves be CDI managed beans.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo in summary, recorder methods provide more encapsulation, flexibility and access to runtime data\nand services for instantiating synthetic beans. They allow for more advanced bean production logic\ncompared to direct bytecode generation.\u003c/p\u003e\n\u003cp\u003eHowever, direct bytecode generation with \u003ccode\u003e.creator()\u003c/code\u003e can still be useful for simple cases where\nrecorders may be overkill. But as synthetic bean needs grow, recorders are a more powerful and\nadvanced approach.\u003c/p\u003e\n\u003cstyle type=\"text/css\"\u003e.notice{--root-color:#444;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#c33;--warning-content:#fee;--info-title:#fb7;--info-content:#fec;--note-title:#6be;--note-content:#e7f2fa;--tip-title:#5a5;--tip-content:#efe}@media (prefers-color-scheme:dark){.notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}}body.dark .notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}.notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:var(--root-color);background:var(--root-background)}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:var(--title-color);background:var(--title-background)}.notice.warning .notice-title{background:var(--warning-title)}.notice.warning{background:var(--warning-content)}.notice.info .notice-title{background:var(--info-title)}.notice.info{background:var(--info-content)}.notice.note .notice-title{background:var(--note-title)}.notice.note{background:var(--note-content)}.notice.tip .notice-title{background:var(--tip-title)}.notice.tip{background:var(--tip-content)}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:.125em;position:relative}\u003c/style\u003e\n\u003cdiv\u003e\u003csvg width=\"0\" height=\"0\" display=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003csymbol id=\"tip-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"note-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"warning-notice\" viewBox=\"0 0 576 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"info-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z\"/\u003e\u003c/symbol\u003e\u003c/svg\u003e\u003c/div\u003e\u003cdiv class=\"notice note\" \u003e\n\u003cp class=\"first notice-title\"\u003e\u003cspan class=\"icon-notice baseline\"\u003e\u003csvg\u003e\u003cuse href=\"#note-notice\"\u003e\u003c/use\u003e\u003c/svg\u003e\u003c/span\u003eNote\u003c/p\u003e\u003cp\u003eIt is possible to configure a synthetic bean in Quarkus to be initialized during\nthe \u003ccode\u003eRUNTIME_INIT\u003c/code\u003e\nphase instead of the default \u003ccode\u003eSTATIC_INIT\u003c/code\u003e phase.\u003c/p\u003e\u003c/div\u003e\n\n\u003cp\u003eHere is an example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e@BuildStep\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e@Record(RUNTIME_INIT)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003eSyntheticBeanBuildItem \u003cspan style=\"color:#41a1c0\"\u003elazyBean\u003c/span\u003e(BeanRecorder recorder){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e SyntheticBeanBuildItem\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e    .configure(MyLazyBean.class)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e    .setRuntimeInit() \u003cspan style=\"color:#6c7986\"\u003e// initialize during RUNTIME_INIT\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e    .runtimeValue(recorder.createLazyBean());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe key points are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUse \u003ccode\u003esetRuntimeInit()\u003c/code\u003e on the \u003ccode\u003eSyntheticBeanBuildItem\u003c/code\u003e to mark it for \u003ccode\u003eRUNTIME_INIT\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eThe recorder method must be annotated with \u003ccode\u003e@Record(RUNTIME_INIT)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eThe runtime init synthetic beans cannot be accessed during \u003ccode\u003eSTATIC_INIT\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo in summary, synthetic beans can be initialized lazily during \u003ccode\u003eRUNTIME_INIT\u003c/code\u003e for cases where\neager \u003ccode\u003eSTATIC_INIT\u003c/code\u003e instantiation is not needed. This allows optimizing startup time.\u003c/p\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eUse the Synthetic Bean:\u003c/strong\u003e Now that your synthetic bean is registered, you can inject and use it\nin your application.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epackage\u003c/span\u003e com.iqnev;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eimport\u003c/span\u003e javax.inject.Inject;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eMyBeanUser\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e  @Inject\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e  MySyntheticBean mySyntheticBean;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003euseSyntheticBean\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#6c7986\"\u003e// Use the synthetic bean in your code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e    mySyntheticBean.printMessage();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003eRunning Your Application: Build and run your Quarkus application as usual, and the synthetic bean\nwill be available for injection and use.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eSynthetic beans in Quarkus provide a powerful mechanism for integrating external libraries,\ndynamically registering beans, and customizing bean behavior in your CDI-based applications. These\nbeans, whose attributes are defined by extensions rather than Java classes, offer flexibility and\nversatility in managing dependencies.\u003c/p\u003e\n\u003cp\u003eAs we\u0026rsquo;ve explored in this article, creating and using synthetic beans in Quarkus is a\nstraightforward process. By leveraging \u003ccode\u003eSyntheticBeanBuildItem\u003c/code\u003e and Quarkus extensions, you can\nseamlessly bridge the gap between traditional CDI and more specialized or dynamic bean registration\nrequirements.\u003c/p\u003e\n\u003cp\u003eIn the ever-evolving landscape of Java frameworks, Quarkus continues to stand out by offering\ninnovative solutions like synthetic beans, making it a compelling choice for modern, efficient, and\nflexible application development. Embrace the power of synthetic beans in Quarkus, and take your\ndependency injection to the next level!\u003c/p\u003e\n",
      "url": "https://iqnev.github.io/posts/exploring-synthetic-beans-in-quarkus-a-powerful-extension-mechanism/",
      "date_published": "11116-11-09T114:1111:00+03:00",
      "date_modified": "11116-11-09T114:1111:00+03:00",
      "author": {
        "name": "Calvin Tran",
        "url": "https://iqnev.github.io/"
      }
    },
    
    {
      "id": "4c0c620a7d2e99873f3b1e8dbf886066d9d07e07",
      "title": "Creating Custom Configuration in Quarkus Loaded from JSON File",
      "summary": "",
      "content_text": "Introduction Quarkus, a framework for building lightweight, fast, and efficient Java applications, offers developers the flexibility to create custom configurations loaded from JSON files. These custom configurations can be seamlessly integrated into your Quarkus application, enhancing its configurability and adaptability. To achieve this, Quarkus utilizes Eclipse MicroProfile Config ( MP-Config), with the SmallRye implementation providing the necessary tools. In this article, we\u0026rsquo;ll delve into the process of crafting custom configurations and loading them from JSON files within Quarkus, all while exploring the mechanics of SmallRye\u0026rsquo;s MP-Config implementation. Additionally, we\u0026rsquo;ll showcase the creation and registration of a custom ConfigSource and ConfigSourceFactory, which play a pivotal role in this configuration management approach.\nUnderstanding MicroProfile Config in Quarkus Quarkus internally relies on the SmallRye implementation of MP-Config. This implementation allows developers to incorporate Configuration Sources, which provide configuration data from various origins. These sources can be files with non-standard formats, or even data retrieved from a central repository. MP-Config ensures a deterministic ordering of configuration sources based on their ordinal values when multiple sources contain the same configuration key.\nSmallRye\u0026rsquo;s implementation of MP-Config facilitates the creation of new ConfigSources and ConfigSourceFactories. The ConfigSourceFactory has knowledge of all previously defined sources, enabling developers to read those values and pass them to a newly created ConfigSource. The registration of these custom sources and factories is accomplished through the Java ServiceLoader interface, with a specific file called io.smallrye.config.ConfigSourceFactory being placed in the META-INF/services/ directory. This file provides the fully qualified names of the custom sources and factories.\nImplementing a custom JSON Configuration To demonstrate the creation and registration of a custom ConfigSource and ConfigSourceFactory in Quarkus, we\u0026rsquo;ll focus on a practical example - an JsonConfigSource and JsonConfigSourceFactory pair. This custom configuration source allows you to read external JSON configuration files and integrate them into your Quarkus application.\nThe JsonConfigSource class is responsible for reading and providing configuration properties from a JSON file. It implements the ConfigSource interface and overrides several methods to interact with the Quarkus configuration system.\nHere is an overview of its key functionalities:\nReading a JSON file and parsing it into a JsonObject. Providing configuration properties, including handling default values. Specifying the source\u0026rsquo;s ordinal value. Assigning a unique name to the source, which will be used for registration. 1 2@Slf4j 3public class JsonConfigSource implements ConfigSource { 4 5 private final Map\u0026lt;String, ConfigValue\u0026gt; existingValues; 6 7 private JsonObject root; 8 9 public JsonConfigSource(final Map\u0026lt;String, ConfigValue\u0026gt; exProp) { 10 existingValues = exProp; 11 } 12 13 public void addJsonConfigurations(final ConfigValue config) { 14 final File file = new File(config.getValue()); 15 16 if (!file.canRead()) { 17 log.warn(\u0026#34;Can\u0026#39;t read config from \u0026#34; + file.getAbsolutePath() + \u0026#34;\u0026#34;); 18 } else { 19 try (final InputStream fis = new FileInputStream(file); 20 final JsonReader reader = Json.createReader(fis)) { 21 22 root = reader.readObject(); 23 } catch (final IOException ioe) { 24 log.warn(\u0026#34;Reading the config failed: \u0026#34; + ioe.getMessage()); 25 } 26 } 27 } 28 29 @Override 30 public Map\u0026lt;String, String\u0026gt; getProperties() { 31 32 final Map\u0026lt;String, String\u0026gt; props = new HashMap\u0026lt;\u0026gt;(); 33 final Set\u0026lt;Map.Entry\u0026lt;String, ConfigValue\u0026gt;\u0026gt; entries = existingValues.entrySet(); 34 for (final Map.Entry\u0026lt;String, ConfigValue\u0026gt; entry : entries) { 35 String newVal = getValue(entry.getKey()); 36 if (newVal == null) { 37 newVal = entry.getValue().getValue(); 38 } 39 props.put(entry.getKey(), newVal); 40 } 41 42 return props; 43 } 44 45 @Override 46 public Set\u0026lt;String\u0026gt; getPropertyNames() { 47 return existingValues.keySet(); 48 } 49 50 @Override 51 public int getOrdinal() { 52 return 270; 53 } 54 55 @Override 56 public String getValue(final String configKey) { 57 58 final JsonValue jsonValue = root.get(configKey); 59 60 if (jsonValue != null) { 61 return getStringValue(jsonValue); 62 } 63 64 if (existingValues.containsKey(configKey)) { 65 return existingValues.get(configKey).getValue(); 66 } else { 67 return null; 68 } 69 } 70 71 @Override 72 public String getName() { 73 return \u0026#34;EXTERNAL_JSON\u0026#34;; 74 } 75 76 private String getStringValue(final JsonValue jsonValue) { 77 if (jsonValue != null) { 78 final JsonValue.ValueType valueType = jsonValue.getValueType(); 79 80 if (valueType == JsonValue.ValueType.STRING) { 81 return ((JsonString) jsonValue).getString(); 82 } else if (valueType == JsonValue.ValueType.NUMBER) { 83 // Handle integer and floating-point numbers 84 return jsonValue.toString(); 85 } else if (valueType == JsonValue.ValueType.TRUE || valueType == JsonValue.ValueType.FALSE) { 86 // Handle boolean values 87 return Boolean.toString(jsonValue.getValueType() == JsonValue.ValueType.TRUE); 88 } else if (valueType == JsonValue.ValueType.NULL) { 89 // Handle null values 90 return null; 91 } 92 } 93 return null; 94 } 95} The JsonConfigSourceFactory class is a custom ConfigSourceFactory responsible for creating and configuring instances of the JsonConfigSource. It also defines a unique priority for this factory.\nHere is an overview of its key functionalities:\nRetrieving the path of the JSON configuration file from the Quarkus configuration. Building an instance of JsonConfigSource. Assigning a priority value to the factory. 1 2@Slf4j 3public class JsonConfigSourceFactory implements ConfigSourceFactory { 4 5 public static final String CONFIG_JSON_FILE = \u0026#34;config.json.file\u0026#34;; 6 7 @Override 8 public Iterable\u0026lt;ConfigSource\u0026gt; getConfigSources(final ConfigSourceContext configSourceContext) { 9 final ConfigValue value = configSourceContext.getValue(CONFIG_JSON_FILE); 10 11 if (value == null || value.getValue() == null) { 12 return Collections.emptyList(); 13 } 14 15 final Map\u0026lt;String, ConfigValue\u0026gt; exProp = new HashMap\u0026lt;\u0026gt;(); 16 final Iterator\u0026lt;String\u0026gt; stringIterator = configSourceContext.iterateNames(); 17 18 while (stringIterator.hasNext()) { 19 final String key = stringIterator.next(); 20 final ConfigValue cValue = configSourceContext.getValue(key); 21 exProp.put(key, cValue); 22 } 23 24 final JsonConfigSource configSource = new JsonConfigSource(exProp); 25 final List\u0026lt;ConfigValue\u0026gt; configValueList = List.of(value); 26 27 for (final ConfigValue config : configValueList) { 28 if (ConfigExists(config)) { 29 configSource.addJsonConfigurations(config); 30 } 31 } 32 33 return Collections.singletonList(configSource); 34 } 35 36 @Override 37 public OptionalInt getPriority() { 38 return OptionalInt.of(270); 39 } 40 41 private boolean ConfigExists(final ConfigValue config) { 42 43 if (config == null || config.getValue() == null) { 44 log.warn(\u0026#34;The given ConfigValue object is null\u0026#34;); 45 return false; 46 } else if (!(Files.exists(Path.of(config.getValue())))) { 47 return false; 48 } 49 50 return true; 51 } 52} Registration via ServiceLoader Both the JsonConfigSource and JsonConfigSourceFactory are registered with the Quarkus application through the Java ServiceLoader mechanism. A file named io.smallrye.config.ConfigSourceFactory is placed in the META-INF/services/ directory. This file contains the fully qualified name of the JsonConfigSourceFactory, enabling Quarkus to discover and use it.\nThe JSON file 1{ 2 \u0026#34;simple.service\u0026#34;: \u0026#34;pusher\u0026#34;, 3 \u0026#34;simple.source\u0026#34;: \u0026#34;source\u0026#34;, 4 \u0026#34;simple.destination\u0026#34;: \u0026#34;destination\u0026#34; 5} Define Your Configuration Interface 1 2@ConfigMapping(prefix = \u0026#34;simple\u0026#34;) 3public interface SimpleConfig { 4 5 @WithName(\u0026#34;source\u0026#34;) 6 String source(); 7 8 @WithName(\u0026#34;service\u0026#34;) 9 String service(); 10 11 @WithName(\u0026#34;destination\u0026#34;) 12 String destination(); 13} Conclusion Eclipse MicroProfile Config, in conjunction with the SmallRye implementation, empowers Quarkus developers to manage their application\u0026rsquo;s configuration efficiently. The ability to create and register custom ConfigSources and ConfigSourceFactories, as demonstrated with the JsonConfigSource and JsonConfigSourceFactory, extends the flexibility and utility of the framework. By following these guidelines, you can seamlessly integrate external configuration data, such as JSON files, into your Quarkus application, enhancing its configurability and adaptability.\nBy understanding these concepts and leveraging the power of MicroProfile Config, you can further optimize your Quarkus application\u0026rsquo;s configuration management and streamline the development process.\nThe full source code is available at Github\n",
      "content_html": "\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eQuarkus, a framework for building lightweight, fast, and efficient Java applications, offers\ndevelopers the flexibility to create custom configurations loaded from JSON files. These custom\nconfigurations can be seamlessly integrated into your Quarkus application, enhancing its\nconfigurability and adaptability. To achieve this, Quarkus utilizes Eclipse MicroProfile Config (\nMP-Config), with the SmallRye implementation providing the necessary tools. In this article, we\u0026rsquo;ll\ndelve into the process of crafting custom configurations and loading them from JSON files within\nQuarkus, all while exploring the mechanics of SmallRye\u0026rsquo;s MP-Config implementation. Additionally,\nwe\u0026rsquo;ll showcase the creation and registration of a custom ConfigSource and ConfigSourceFactory, which\nplay a pivotal role in this configuration management approach.\u003c/p\u003e\n\u003ch3 id=\"understanding-microprofile-config-in-quarkus\"\u003eUnderstanding MicroProfile Config in Quarkus\u003c/h3\u003e\n\u003cp\u003eQuarkus internally relies on the SmallRye implementation of MP-Config. This implementation allows\ndevelopers to incorporate Configuration Sources, which provide configuration data from various\norigins. These sources can be files with non-standard formats, or even data retrieved from a central\nrepository. MP-Config ensures a deterministic ordering of configuration sources based on their\nordinal values when multiple sources contain the same configuration key.\u003c/p\u003e\n\u003cp\u003eSmallRye\u0026rsquo;s implementation of MP-Config facilitates the creation of new ConfigSources and\nConfigSourceFactories. The ConfigSourceFactory has knowledge of all previously defined sources,\nenabling developers to read those values and pass them to a newly created ConfigSource. The\nregistration of these custom sources and factories is accomplished through the Java ServiceLoader\ninterface, with a specific file called \u003ccode\u003eio.smallrye.config.ConfigSourceFactory\u003c/code\u003e being placed in the\n\u003ccode\u003eMETA-INF/services/\u003c/code\u003e directory. This file provides the fully qualified names of the custom sources\nand\nfactories.\u003c/p\u003e\n\u003ch3 id=\"implementing-a-custom-json-configuration\"\u003eImplementing a custom JSON Configuration\u003c/h3\u003e\n\u003cp\u003eTo demonstrate the creation and registration of a custom \u003ccode\u003eConfigSource\u003c/code\u003e and \u003ccode\u003eConfigSourceFactory\u003c/code\u003e in\nQuarkus, we\u0026rsquo;ll focus on a practical example - an \u003ccode\u003eJsonConfigSource\u003c/code\u003e and \u003ccode\u003eJsonConfigSourceFactory\u003c/code\u003e\npair.\nThis custom configuration source allows you to read external JSON configuration files and integrate\nthem into your Quarkus application.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eJsonConfigSource\u003c/code\u003e class is responsible for reading and providing configuration properties from\na JSON file. It implements the \u003ccode\u003eConfigSource\u003c/code\u003e interface and overrides several methods to interact\nwith\nthe Quarkus configuration system.\u003c/p\u003e\n\u003cp\u003eHere is an overview of its key functionalities:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReading a JSON file and parsing it into a JsonObject.\u003c/li\u003e\n\u003cli\u003eProviding configuration properties, including handling default values.\u003c/li\u003e\n\u003cli\u003eSpecifying the source\u0026rsquo;s ordinal value.\u003c/li\u003e\n\u003cli\u003eAssigning a unique name to the source, which will be used for registration.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e@Slf4j\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eJsonConfigSource\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eimplements\u003c/span\u003e ConfigSource {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e Map\u0026lt;String, ConfigValue\u0026gt; existingValues;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e JsonObject root;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eJsonConfigSource\u003c/span\u003e(\u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e Map\u0026lt;String, ConfigValue\u0026gt; exProp) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e    existingValues = exProp;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eaddJsonConfigurations\u003c/span\u003e(\u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e ConfigValue config) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e File file = \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e File(config.getValue());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (!file.canRead()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e      log.warn(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;Can\u0026#39;t read config from \u0026#34;\u003c/span\u003e + file.getAbsolutePath() + \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\u003c/span\u003e\u003cspan\u003e    } \u003cspan style=\"color:#fc5fa3\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003etry\u003c/span\u003e (\u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e InputStream fis = \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e FileInputStream(file);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\u003c/span\u003e\u003cspan\u003e          \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e JsonReader reader = Json.createReader(fis)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\u003c/span\u003e\u003cspan\u003e        root = reader.readObject();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\u003c/span\u003e\u003cspan\u003e      } \u003cspan style=\"color:#fc5fa3\"\u003ecatch\u003c/span\u003e (\u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e IOException ioe) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\u003c/span\u003e\u003cspan\u003e        log.warn(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;Reading the config failed: \u0026#34;\u003c/span\u003e + ioe.getMessage());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\u003c/span\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\u003c/span\u003e\u003cspan\u003e  @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e Map\u0026lt;String, String\u0026gt; \u003cspan style=\"color:#41a1c0\"\u003egetProperties\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e Map\u0026lt;String, String\u0026gt; props = \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e HashMap\u0026lt;\u0026gt;();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e Set\u0026lt;Map.Entry\u0026lt;String, ConfigValue\u0026gt;\u0026gt; entries = existingValues.entrySet();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e Map.Entry\u0026lt;String, ConfigValue\u0026gt; entry : entries) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\u003c/span\u003e\u003cspan\u003e      String newVal = getValue(entry.getKey());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (newVal == \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\u003c/span\u003e\u003cspan\u003e        newVal = entry.getValue().getValue();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\u003c/span\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\u003c/span\u003e\u003cspan\u003e      props.put(entry.getKey(), newVal);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e41\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e42\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e props;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e43\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e44\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e45\u003c/span\u003e\u003cspan\u003e  @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e46\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e Set\u0026lt;String\u0026gt; \u003cspan style=\"color:#41a1c0\"\u003egetPropertyNames\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e47\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e existingValues.keySet();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e48\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e49\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e50\u003c/span\u003e\u003cspan\u003e  @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e51\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003egetOrdinal\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e52\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e 270;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e53\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e54\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e55\u003c/span\u003e\u003cspan\u003e  @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e56\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e String \u003cspan style=\"color:#41a1c0\"\u003egetValue\u003c/span\u003e(\u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e String configKey) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e57\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e58\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e JsonValue jsonValue = root.get(configKey);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e59\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e60\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (jsonValue != \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e61\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e getStringValue(jsonValue);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e62\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e63\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e64\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (existingValues.containsKey(configKey)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e65\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e existingValues.get(configKey).getValue();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e66\u003c/span\u003e\u003cspan\u003e    } \u003cspan style=\"color:#fc5fa3\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e67\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e68\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e69\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e70\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e71\u003c/span\u003e\u003cspan\u003e  @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e72\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e String \u003cspan style=\"color:#41a1c0\"\u003egetName\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e73\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;EXTERNAL_JSON\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e74\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e75\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e76\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e String \u003cspan style=\"color:#41a1c0\"\u003egetStringValue\u003c/span\u003e(\u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e JsonValue jsonValue) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e77\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (jsonValue != \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e78\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e JsonValue.ValueType valueType = jsonValue.getValueType();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e79\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e80\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (valueType == JsonValue.ValueType.STRING) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e81\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e ((JsonString) jsonValue).getString();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e82\u003c/span\u003e\u003cspan\u003e      } \u003cspan style=\"color:#fc5fa3\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (valueType == JsonValue.ValueType.NUMBER) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e83\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#6c7986\"\u003e// Handle integer and floating-point numbers\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e84\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e jsonValue.toString();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e85\u003c/span\u003e\u003cspan\u003e      } \u003cspan style=\"color:#fc5fa3\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (valueType == JsonValue.ValueType.TRUE || valueType == JsonValue.ValueType.FALSE) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e86\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#6c7986\"\u003e// Handle boolean values\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e87\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e Boolean.toString(jsonValue.getValueType() == JsonValue.ValueType.TRUE);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e88\u003c/span\u003e\u003cspan\u003e      } \u003cspan style=\"color:#fc5fa3\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (valueType == JsonValue.ValueType.NULL) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e89\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#6c7986\"\u003e// Handle null values\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e90\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e91\u003c/span\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e92\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e93\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e94\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e95\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003eJsonConfigSourceFactory\u003c/code\u003e class is a custom \u003ccode\u003eConfigSourceFactory\u003c/code\u003e responsible for creating and\nconfiguring instances of the \u003ccode\u003eJsonConfigSource\u003c/code\u003e. It also defines a unique priority for this factory.\u003c/p\u003e\n\u003cp\u003eHere is an overview of its key functionalities:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRetrieving the path of the JSON configuration file from the Quarkus configuration.\u003c/li\u003e\n\u003cli\u003eBuilding an instance of JsonConfigSource.\u003c/li\u003e\n\u003cli\u003eAssigning a priority value to the factory.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e@Slf4j\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eJsonConfigSourceFactory\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eimplements\u003c/span\u003e ConfigSourceFactory {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e String CONFIG_JSON_FILE = \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;config.json.file\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e  @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e Iterable\u0026lt;ConfigSource\u0026gt; \u003cspan style=\"color:#41a1c0\"\u003egetConfigSources\u003c/span\u003e(\u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e ConfigSourceContext configSourceContext) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e ConfigValue value = configSourceContext.getValue(CONFIG_JSON_FILE);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (value == \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e || value.getValue() == \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e Collections.emptyList();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e Map\u0026lt;String, ConfigValue\u0026gt; exProp = \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e HashMap\u0026lt;\u0026gt;();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e Iterator\u0026lt;String\u0026gt; stringIterator = configSourceContext.iterateNames();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ewhile\u003c/span\u003e (stringIterator.hasNext()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e String key = stringIterator.next();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e ConfigValue cValue = configSourceContext.getValue(key);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\u003c/span\u003e\u003cspan\u003e      exProp.put(key, cValue);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e JsonConfigSource configSource = \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e JsonConfigSource(exProp);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e List\u0026lt;ConfigValue\u0026gt; configValueList = List.of(value);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e ConfigValue config : configValueList) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (ConfigExists(config)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\u003c/span\u003e\u003cspan\u003e        configSource.addJsonConfigurations(config);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\u003c/span\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e Collections.singletonList(configSource);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\u003c/span\u003e\u003cspan\u003e  @Override\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e OptionalInt \u003cspan style=\"color:#41a1c0\"\u003egetPriority\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e OptionalInt.of(270);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e41\u003c/span\u003e\u003cspan\u003e  \u003cspan style=\"color:#fc5fa3\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eboolean\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eConfigExists\u003c/span\u003e(\u003cspan style=\"color:#fc5fa3\"\u003efinal\u003c/span\u003e ConfigValue config) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e42\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e43\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (config == \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e || config.getValue() == \u003cspan style=\"color:#fc5fa3\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e44\u003c/span\u003e\u003cspan\u003e      log.warn(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;The given ConfigValue object is null\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e45\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003efalse\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e46\u003c/span\u003e\u003cspan\u003e    } \u003cspan style=\"color:#fc5fa3\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003eif\u003c/span\u003e (!(Files.exists(Path.of(config.getValue())))) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e47\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003efalse\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e48\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e49\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e50\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003etrue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e51\u003c/span\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e52\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"registration-via-serviceloader\"\u003eRegistration via ServiceLoader\u003c/h3\u003e\n\u003cp\u003eBoth the \u003ccode\u003eJsonConfigSource\u003c/code\u003e and \u003ccode\u003eJsonConfigSourceFactory\u003c/code\u003e are registered with the Quarkus\napplication through the Java ServiceLoader mechanism. A file\nnamed \u003ccode\u003eio.smallrye.config.ConfigSourceFactory\u003c/code\u003e is placed in the \u003ccode\u003eMETA-INF/services/\u003c/code\u003e directory. This\nfile contains the fully qualified name of the \u003ccode\u003eJsonConfigSourceFactory\u003c/code\u003e, enabling Quarkus to\ndiscover\nand use it.\u003c/p\u003e\n\u003ch3 id=\"the-json-file\"\u003eThe JSON file\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e  \u0026#34;simple.service\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;pusher\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e  \u0026#34;simple.source\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;source\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e  \u0026#34;simple.destination\u0026#34;: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;destination\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"define-your-configuration-interface\"\u003eDefine Your Configuration Interface\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e@ConfigMapping(prefix = \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;simple\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eSimpleConfig\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e  @WithName(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;source\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e  String \u003cspan style=\"color:#41a1c0\"\u003esource\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e  @WithName(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;service\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e  String \u003cspan style=\"color:#41a1c0\"\u003eservice\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e  @WithName(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;destination\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e  String \u003cspan style=\"color:#41a1c0\"\u003edestination\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eEclipse MicroProfile Config, in conjunction with the SmallRye implementation, empowers Quarkus\ndevelopers to manage their application\u0026rsquo;s configuration efficiently. The ability to create and\nregister custom \u003ccode\u003eConfigSources\u003c/code\u003e and \u003ccode\u003eConfigSourceFactories\u003c/code\u003e, as demonstrated with\nthe \u003ccode\u003eJsonConfigSource\u003c/code\u003e\nand \u003ccode\u003eJsonConfigSourceFactory\u003c/code\u003e, extends the flexibility and utility of the framework. By following\nthese guidelines, you can seamlessly integrate external configuration data, such as JSON files, into\nyour Quarkus application, enhancing its configurability and adaptability.\u003c/p\u003e\n\u003cp\u003eBy understanding these concepts and leveraging the power of MicroProfile Config, you can further\noptimize your Quarkus application\u0026rsquo;s configuration management and streamline the development process.\u003c/p\u003e\n\u003cp\u003eThe full source code is available\nat \u003ca href=\"https://github.com/iqnev/quarkus-load-configuration-from-externa-json-file\" title=\"Title\"\u003eGithub\u003c/a\u003e\u003c/p\u003e\n",
      "url": "https://iqnev.github.io/posts/load-configuration-from-json-file/",
      "date_published": "14106-14-09T100:1414:00+03:00",
      "date_modified": "14106-14-09T100:1414:00+03:00",
      "author": {
        "name": "Calvin Tran",
        "url": "https://iqnev.github.io/"
      }
    },
    
    {
      "id": "d8121afede58861489c854fcdd26839c8a105ec6",
      "title": "Extending Quarkus: When and How to Write Your Own Extensions",
      "summary": "",
      "content_text": "Quarkus, with its innovative extension framework, offers developers a powerful way to integrate various technologies seamlessly into their applications. These extensions simplify configuration, enable dependency injection, and optimize performance, making it an attractive option for Java developers. However, before diving into creating your own Quarkus extension, it\u0026rsquo;s crucial to understand when it' s necessary and how to do it effectively.\nWhen to Create a Quarkus Extension Complex Integrations: If you\u0026rsquo;re working with complex frameworks like ORM mappers, reactive clients, or data access libraries, creating an extension can help manage the intricacies of configuration and dependency management. Extensions simplify the use of these frameworks in Quarkus applications.\nPerformance Optimization: Quarkus extensions are designed to align with Quarkus\u0026rsquo; native compilation, resulting in applications that start swiftly and have minimal memory footprints. By creating an extension, you can leverage Quarkus\u0026rsquo; build-time optimization abilities to scan dependencies and generate configuration early, thus avoiding startup delays.\nDeveloper Experience Enhancement: Extensions can significantly enhance the developer experience. They enable live reloading, CLI extensions, templating, and more, streamlining the development process. If you want to provide a seamless and efficient development environment for your team, extensions can help achieve this goal.\nAPI Hardening: If you\u0026rsquo;re building APIs or libraries intended to be used by other Quarkus developers, extensions provide an excellent way to harden your APIs and ensure they work seamlessly within the Quarkus ecosystem.\nHowever, extensions may not always be the best approach. For simpler needs, such as sharing utility code and glue logic between components, a basic JAR file might suffice without the overhead of creating an extension. If your integration is app-specific and unlikely to be reused elsewhere, a basic JAR could be a more straightforward solution. Moreover, if you need full control over dependency versions and don\u0026rsquo;t want to adhere to Quarkus\u0026rsquo; BOM (Bill of Materials) for dependency management, a JAR may be a better choice. Finally, if your code needs to work across multiple JVM frameworks, such as Spring and Micronaut, avoiding tight coupling to Quarkus may be preferable.\nCreating Quarkus extensions can be complex, often requiring in-depth knowledge of Quarkus internal workings. However, for many scenarios, creating a standard JAR can be sufficient. This JAR, when indexed by Jandex, can be seamlessly discovered by Quarkus during build time. While Quarkus extensions provide a range of advantages, including superior performance and developer productivity, they may not always be necessary.\nQuarkus unique approach to moving work to build time, rather than runtime, is at the core of its fast startup times and low memory footprint. This philosophy extends to Quarkus extensions, which can leverage these build-time optimizations. Even if you\u0026rsquo;re not primarily concerned with fast boot times, the benefits of creating your extensions extend to simplifying configurations, extending the Quarkus CLI, and integrating with Quarkus\u0026rsquo;s Dev Mode.\nCreating your Quarkus extensions doesn\u0026rsquo;t have to be overly complicated. With the right approach and a clear understanding of your project\u0026rsquo;s needs, you can solve complex problems efficiently. Extensions offer a flexible and powerful way to enhance your Quarkus applications and make them more efficient and developer-friendly.\nCreating a Quarkus Extension When you decide that creating a Quarkus extension is the right approach, it\u0026rsquo;s essential to understand the structural components of an extension:\nRuntime Section: This section contains the core business logic implemented as beans, services, or other components that integrate with Quarkus; Deployment Section: The deployment section handles build-time augmentation and configuration. It ensures that your extension integrates seamlessly with Quarkus\u0026rsquo; optimization processes; Descriptor: A descriptor declares metadata about your extension, including its name, parameters, compatibility information, and more; Documentation: Comprehensive documentation should accompany your extension. It guides users on how to use and configure your extension effectively. Anatomy of the Quarkus Extension Consider a scenario where you want to create a custom caching extension for Quarkus. This extension will allow developers to easily integrate caching functionality into their Quarkus applications.\nRuntime Section:\nIn this section, you would implement the core caching functionality using Java code. This might include methods for caching data, retrieving cached data, and managing cache expiration. For example, you might have a CustomCacheService class with methods like put(key, value), get(key), and evict(key) to handle caching operations. Deployment Section:\nThe deployment section is responsible for build-time optimization. Here, you can specify how the caching configuration should be generated during the build process. For our caching extension, this section might include instructions on how to scan for cached objects in the application code and generate cache configuration. Descriptor:\nThe descriptor file (custom-cache-extension.yaml) provides metadata about your extension. It includes information like the extension\u0026rsquo;s name, version, compatibility with Quarkus, and configuration parameters. For instance, your descriptor might specify that the extension is named \u0026quot; custom-cache-extension,\u0026quot; is compatible with Quarkus 2.0+, and requires a cache timeout configuration parameter. Documentation:\nComprehensive documentation should accompany your extension. It guides users on how to use the custom caching extension effectively within their Quarkus applications. Documentation should include examples of how to configure the cache, integrate it into Quarkus services, and manage cached data. Additionally, it should provide best practices for cache utilization. By following this structure, your custom caching extension becomes a valuable tool for Quarkus developers. They can easily incorporate caching into their applications, improving performance and optimizing resource usage.\nRuntime module:\n1class CustomCacheService { 2 3 // Core caching functionality using Java code 4 public void put(String key, Object value) { 5 // Cache data implementation 6 } 7 8 public Object get(String key) { 9 // Retrieve cached data implementation 10 } 11 12 public void evict(String key) { 13 // Evict cached data implementation 14 } 15} Deployment module:\n1class CustomCacheProcessor { 2 @BuildStep 3 FeatureBuildItem feature() { 4 // This declares the custom cache extension as a feature 5 return new FeatureBuildItem(\u0026#34;custom-cache\u0026#34;); 6 } 7} Descriptor file: custom-cache-extension.yaml\n1extension: 2name: custom-cache-extension 3metadata: 4 short-name: \u0026#34;resteasy-reactive\u0026#34; 5 keywords: 6 - \u0026#34;jaxrs\u0026#34; 7 - \u0026#34;web\u0026#34; 8 - \u0026#34;rest\u0026#34; 9 categories: 10 - \u0026#34;web\u0026#34; 11 - \u0026#34;reactive\u0026#34; 12 status: \u0026#34;stable\u0026#34; 13 guide: \u0026#34;https://quarkus.io/guides/resteasy-reactive\u0026#34; In conclusion, whether to create a Quarkus extension depends on your project\u0026rsquo;s specific needs and objectives. Quarkus extensions are powerful tools for deep integration, performance optimization, and enhancing the developer experience. However, it\u0026rsquo;s essential to weigh the trade-offs and consider whether a simpler solution, like a standard JAR library, might better suit your use case. By understanding when and how to create Quarkus extensions effectively, you can make informed decisions and leverage the full potential of this innovative framework.\n",
      "content_html": "\u003cp\u003eQuarkus, with its innovative extension framework, offers developers a powerful way to integrate\nvarious technologies seamlessly into their applications.\nThese extensions simplify configuration, enable dependency injection, and optimize performance,\nmaking it an attractive option for Java developers.\nHowever, before diving into creating your own Quarkus extension, it\u0026rsquo;s crucial to understand when it'\ns necessary and how to do it effectively.\u003c/p\u003e\n\u003ch2 id=\"when-to-create-a-quarkus-extension\"\u003eWhen to Create a Quarkus Extension\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eComplex Integrations: If you\u0026rsquo;re working with complex frameworks like ORM mappers, reactive\nclients, or data access libraries, creating an extension can help manage the intricacies of\nconfiguration and dependency management.\nExtensions simplify the use of these frameworks in Quarkus applications.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePerformance Optimization: Quarkus extensions are designed to align with Quarkus\u0026rsquo; native\ncompilation, resulting in applications that start swiftly and have minimal memory footprints.\nBy creating an extension, you can leverage Quarkus\u0026rsquo; build-time optimization abilities to scan\ndependencies and generate configuration early, thus avoiding startup delays.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDeveloper Experience Enhancement: Extensions can significantly enhance the developer experience.\nThey enable live reloading, CLI extensions, templating, and more, streamlining the development\nprocess.\nIf you want to provide a seamless and efficient development environment for your team, extensions\ncan help achieve this goal.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAPI Hardening: If you\u0026rsquo;re building APIs or libraries intended to be used by other Quarkus\ndevelopers, extensions provide an excellent way to harden your\nAPIs and ensure they work seamlessly within the Quarkus ecosystem.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eHowever, extensions may not always be the best approach. For simpler needs, such as sharing utility\ncode and glue logic between components, a basic JAR file might\nsuffice without the overhead of creating an extension. If your integration is app-specific and\nunlikely to be reused elsewhere, a basic JAR could be a more straightforward solution. Moreover, if\nyou need full control over dependency versions and don\u0026rsquo;t want to adhere to Quarkus\u0026rsquo; BOM (Bill of\nMaterials) for dependency management, a JAR may be a better choice. Finally, if your code needs to\nwork across multiple JVM frameworks, such as Spring and Micronaut,\navoiding tight coupling to Quarkus may be preferable.\u003c/p\u003e\n\u003cp\u003eCreating Quarkus extensions can be complex, often requiring in-depth knowledge of Quarkus internal\nworkings. However, for many scenarios, creating a standard JAR can be sufficient. This JAR, when\nindexed by Jandex, can be seamlessly discovered by Quarkus during build time. While Quarkus\nextensions provide a range of advantages, including superior performance and developer productivity,\nthey may not always be necessary.\u003c/p\u003e\n\u003cp\u003eQuarkus unique approach to moving work to build time, rather than runtime, is at the core of its\nfast startup times and low memory footprint. This philosophy extends to Quarkus extensions, which\ncan leverage these build-time optimizations. Even if you\u0026rsquo;re not primarily concerned with fast boot\ntimes, the benefits of creating your extensions extend to simplifying configurations, extending the\nQuarkus CLI, and integrating with Quarkus\u0026rsquo;s Dev Mode.\u003c/p\u003e\n\u003cp\u003eCreating your Quarkus extensions doesn\u0026rsquo;t have to be overly complicated. With the right approach and\na clear understanding of your project\u0026rsquo;s needs, you can solve complex problems efficiently.\nExtensions offer a flexible and powerful way to enhance your Quarkus applications and make them more\nefficient and developer-friendly.\u003c/p\u003e\n\u003ch2 id=\"creating-a-quarkus-extension\"\u003eCreating a Quarkus Extension\u003c/h2\u003e\n\u003cp\u003eWhen you decide that creating a Quarkus extension is the right approach, it\u0026rsquo;s essential to\nunderstand the structural components of an extension:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRuntime Section:\u003c/strong\u003e This section contains the core business logic implemented as beans, services,\nor other components that integrate with Quarkus;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDeployment Section:\u003c/strong\u003e The deployment section handles build-time augmentation and configuration.\nIt ensures that your extension integrates seamlessly with Quarkus\u0026rsquo; optimization processes;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDescriptor:\u003c/strong\u003e A descriptor declares metadata about your extension, including its name,\nparameters, compatibility information, and more;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDocumentation:\u003c/strong\u003e Comprehensive documentation should accompany your extension. It guides users on\nhow to use and configure your extension effectively.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"anatomy-of-the-quarkus-extension\"\u003eAnatomy of the Quarkus Extension\u003c/h2\u003e\n\u003cp\u003eConsider a scenario where you want to create a custom caching extension for Quarkus. This extension\nwill allow developers to easily integrate caching functionality into their Quarkus applications.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eRuntime Section:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIn this section, you would implement the core caching functionality using Java code. This\nmight include methods for caching data, retrieving cached data, and managing cache expiration.\u003c/li\u003e\n\u003cli\u003eFor example, you might have a \u003ccode\u003eCustomCacheService\u003c/code\u003e class with methods\nlike \u003ccode\u003eput(key, value)\u003c/code\u003e, \u003ccode\u003eget(key)\u003c/code\u003e, and \u003ccode\u003eevict(key)\u003c/code\u003e to handle caching operations.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDeployment Section:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe deployment section is responsible for build-time optimization. Here, you can specify how\nthe caching configuration should be generated during the build process.\u003c/li\u003e\n\u003cli\u003eFor our caching extension, this section might include instructions on how to scan for cached\nobjects in the application code and generate cache configuration.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDescriptor:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe descriptor file (\u003ccode\u003ecustom-cache-extension.yaml\u003c/code\u003e) provides metadata about your extension. It\nincludes information like the extension\u0026rsquo;s name, version, compatibility with Quarkus, and\nconfiguration parameters.\u003c/li\u003e\n\u003cli\u003eFor instance, your descriptor might specify that the extension is named \u0026quot;\ncustom-cache-extension,\u0026quot; is compatible with Quarkus 2.0+, and requires a cache timeout\nconfiguration parameter.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDocumentation:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eComprehensive documentation should accompany your extension. It guides users on how to use the\ncustom caching extension effectively within their Quarkus applications.\u003c/li\u003e\n\u003cli\u003eDocumentation should include examples of how to configure the cache, integrate it into Quarkus\nservices, and manage cached data. Additionally, it should provide best practices for cache\nutilization.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eBy following this structure, your custom caching extension becomes a valuable tool for Quarkus\ndevelopers. They can easily incorporate caching into their applications, improving performance and\noptimizing resource usage.\u003c/p\u003e\n\u003cp\u003eRuntime module:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eCustomCacheService\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#6c7986\"\u003e// Core caching functionality using Java code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eput\u003c/span\u003e(String key, Object value) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#6c7986\"\u003e// Cache data implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e Object \u003cspan style=\"color:#41a1c0\"\u003eget\u003c/span\u003e(String key) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#6c7986\"\u003e// Retrieve cached data implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e    \u003cspan style=\"color:#fc5fa3\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#41a1c0\"\u003eevict\u003c/span\u003e(String key) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e      \u003cspan style=\"color:#6c7986\"\u003e// Evict cached data implementation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eDeployment module:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\u003c/span\u003e\u003cspan\u003e\u003cspan style=\"color:#fc5fa3\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#5dd8ff\"\u003eCustomCacheProcessor\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\u003c/span\u003e\u003cspan\u003e    @BuildStep\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\u003c/span\u003e\u003cspan\u003e    FeatureBuildItem \u003cspan style=\"color:#41a1c0\"\u003efeature\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#6c7986\"\u003e// This declares the custom cache extension as a feature\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\u003c/span\u003e\u003cspan\u003e        \u003cspan style=\"color:#fc5fa3\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#fc5fa3\"\u003enew\u003c/span\u003e FeatureBuildItem(\u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;custom-cache\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\u003c/span\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\u003c/span\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eDescriptor file: \u003ccode\u003ecustom-cache-extension.yaml\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#fff;background-color:#1f1f24;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\u003c/span\u003e\u003cspan\u003eextension:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\u003c/span\u003e\u003cspan\u003ename: custom-cache-extension\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\u003c/span\u003e\u003cspan\u003emetadata:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\u003c/span\u003e\u003cspan\u003e    short-name: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;resteasy-reactive\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\u003c/span\u003e\u003cspan\u003e    keywords:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\u003c/span\u003e\u003cspan\u003e    - \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;jaxrs\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\u003c/span\u003e\u003cspan\u003e    - \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;web\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\u003c/span\u003e\u003cspan\u003e    - \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;rest\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\u003c/span\u003e\u003cspan\u003e    categories:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\u003c/span\u003e\u003cspan\u003e    - \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;web\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\u003c/span\u003e\u003cspan\u003e    - \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;reactive\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\u003c/span\u003e\u003cspan\u003e    status: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;stable\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\u003c/span\u003e\u003cspan\u003e    guide: \u003cspan style=\"color:#fc6a5d\"\u003e\u0026#34;https://quarkus.io/guides/resteasy-reactive\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn conclusion, whether to create a Quarkus extension depends on your project\u0026rsquo;s specific needs and\nobjectives.\nQuarkus extensions are powerful tools for deep integration, performance optimization, and enhancing\nthe developer experience.\nHowever, it\u0026rsquo;s essential to weigh the trade-offs and consider whether a simpler solution, like a\nstandard JAR library, might better suit your use case.\nBy understanding when and how to create Quarkus extensions effectively, you can make informed\ndecisions and leverage the full potential of this innovative framework.\u003c/p\u003e\n",
      "url": "https://iqnev.github.io/posts/when-and-how-to-write-your-own-extensions/",
      "date_published": "8106-08-09T1029:88:00+03:00",
      "date_modified": "8106-08-09T1029:88:00+03:00",
      "author": {
        "name": "Calvin Tran",
        "url": "https://iqnev.github.io/"
      }
    },
    
    {
      "id": "497df46942fdef9737dcec4d8e5c01833016c78e",
      "title": "Demystifying Quarkus Extension Development: Jandex vs. AdditionalBeanBuildItem",
      "summary": "",
      "content_text": "Welcome to a comprehensive exploration of two key aspects in Quarkus extension development: Jandex and AdditionalBeanBuildItem. This article aims to elucidate the differences between these approaches, offering insights into their roles, applications, and the intricate interplay between them. By the end, you\u0026rsquo;ll have a clear understanding of how to wield these tools effectively in your Quarkus extensions.\n1. Jandex: Automatic Bean Discovery and Indexing Understanding Jandex and Its Role: In the realm of Quarkus extensions, beans are the building blocks of functionality, and Contexts and Dependency Injection (CDI) is the mechanism that governs their management. Jandex, a potent tool in the Quarkus arsenal, facilitates automatic bean discovery and indexing.\nHow Jandex Indexing Works: When the Jandex plugin is integrated into your Quarkus extension, it sweeps through all application classes, creating a comprehensive index file laden with metadata. This file offers an organized snapshot of class metadata, annotations, inheritance hierarchies, and interfaces. It acts as a centralized repository of class information.\nThe Role of Jandex in CDI: However, Jandex\u0026rsquo;s role doesn\u0026rsquo;t extend to direct CDI bean discovery. Instead, it supplies information to the CDI container. During the container\u0026rsquo;s initiation, it delves into the Jandex index to identify potential beans and the annotations associated with them. This enables the CDI container to curate the beans available for injection and other CDI functionalities.\nExample: Automatic Bean Discovery with Jandex: Imagine creating a custom Quarkus extension. By annotating a class with CDI-specific annotations like @ApplicationScoped, Jandex, via its indexing prowess, effortlessly identifies and makes these classes available for CDI. This harmonious integration streamlines the extension process and ensures precise bean identification.\n2. AdditionalIndexedClassesBuildItem: Explicit Jandex Indexing Understanding AdditionalIndexedClassesBuildItem: In cases where you seek more control over class indexing, the AdditionalIndexedClassesBuildItem emerges as a valuable tool. It empowers you to explicitly augment the Jandex index with classes that might otherwise remain unindexed.\nWhen to Use AdditionalIndexedClassesBuildItem: This tool is particularly useful when classes outside of typical bean discovery need to be indexed for other purposes. These classes might belong to third-party libraries or external tools requiring metadata access. By leveraging AdditionalIndexedClassesBuildItem, you guarantee proper indexing and metadata availability.\nUsage of AdditionalIndexedClassesBuildItem: By providing specific class names to AdditionalIndexedClassesBuildItem\u0026rsquo;s constructor, you precisely dictate which classes receive metadata indexing. Regardless of annotations or interfaces, you exercise control over the indexing process.\nExample: Explicitly Indexing Custom Configuration Classes: Imagine crafting an extension that requires metadata access to configuration classes from diverse sources. These classes may not boast CDI annotations, but their metadata remains vital. Through AdditionalIndexedClassesBuildItem, you secure their inclusion in the Jandex index, ensuring accessible metadata for your extension.\n3. AdditionalBeanBuildItem: Explicit Bean Registration Understanding AdditionalBeanBuildItem: While Jandex handles automatic bean discovery, you might require a more involved approach. This is where AdditionalBeanBuildItem steps in, empowering you to explicitly register classes as CDI beans.\nWhen to Use AdditionalBeanBuildItem: Custom utility classes, third-party libraries, or unconventional beans might necessitate inclusion in the CDI context. By embracing AdditionalBeanBuildItem, you enforce bean treatment irrespective of annotations or auto-discovery.\nUsage of AdditionalBeanBuildItem: Through AdditionalBeanBuildItem, you specify class names to be registered as beans. This flexibility allows you to seamlessly incorporate custom beans essential to your extension\u0026rsquo;s functionality.\nExample: Registering Custom Utility Classes as CDI Beans: Imagine building an extension that furnishes additional error handling utilities. These utilities might lack CDI annotations but require injection capabilities. AdditionalBeanBuildItem facilitates explicit registration of these utilities as CDI beans, amplifying their accessibility.\n4. Combining Approaches: Using Both Jandex and AdditionalBeanBuildItem Advantages of Combining Approaches: Harnessing the strengths of both Jandex and AdditionalBeanBuildItem offers strategic leverage. This hybrid approach strikes a balance between automated discovery and explicit control, granting you the power to cherry-pick beans while enjoying default discovery benefits.\nPotential Issues and Solutions: The synergy between these approaches is powerful, but vigilance is essential to avert duplicate bean registrations. Overlapping registrations between automatic Jandex indexing and explicit AdditionalBeanBuildItem inclusion can lead to conflicts. Careful coordination ensures seamless coexistence.\n5. Native Build Considerations: Impact of Jandex and AdditionalBeanBuildItem Jandex and Native Build: Understand that GraalVM\u0026rsquo;s native build process doesn\u0026rsquo;t engage directly with the Jandex index. Native build concentrates on compiling the Java application into a native binary, leveraging compiled Java classes and dependencies.\nAdditionalBeanBuildItem and Native Build: Similarly, native build isn\u0026rsquo;t heavily impacted by AdditionalBeanBuildItem\u0026rsquo;s presence or absence. Bean registration doesn\u0026rsquo;t significantly alter native build outcomes, which center on compiling and optimizing the application into a native binary.\nConclusion: Navigating Jandex and AdditionalBeanBuildItem\nThrough this journey, the nuances of Jandex and AdditionalBeanBuildItem have been unraveled. Jandex\u0026rsquo;s role in metadata provision and CDI\u0026rsquo;s execution has been clarified, alongside AdditionalBeanBuildItem\u0026rsquo;s explicit bean registration. Remember, Jandex doesn\u0026rsquo;t automatically transform classes into CDI beans; the CDI container is pivotal. Leverage these tools strategically, aligning choices with your extension\u0026rsquo;s demands for seamless integration in Quarkus\u0026rsquo; CDI framework.\n",
      "content_html": "\u003cp\u003eWelcome to a comprehensive exploration of two key aspects in Quarkus extension development: Jandex\nand AdditionalBeanBuildItem.\nThis article aims to elucidate the differences between these approaches, offering insights into\ntheir roles, applications, and the\nintricate interplay between them. By the end, you\u0026rsquo;ll have a clear understanding of how to wield\nthese tools effectively in your Quarkus\nextensions.\u003c/p\u003e\n\u003ch2 id=\"1-jandex-automatic-bean-discovery-and-indexing\"\u003e1. Jandex: Automatic Bean Discovery and Indexing\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eUnderstanding Jandex and Its Role:\u003c/strong\u003e\nIn the realm of Quarkus extensions, beans are the building blocks of functionality, and Contexts and\nDependency Injection (CDI) is\nthe mechanism that governs their management. Jandex, a potent tool in the Quarkus arsenal,\nfacilitates automatic bean discovery and indexing.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eHow Jandex Indexing Works:\u003c/strong\u003e\nWhen the Jandex plugin is integrated into your Quarkus extension, it sweeps through all application\nclasses, creating a comprehensive\nindex file laden with metadata. This file offers an organized snapshot of class metadata,\nannotations, inheritance hierarchies, and\ninterfaces. It acts as a centralized repository of class information.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThe Role of Jandex in CDI:\u003c/strong\u003e\nHowever, Jandex\u0026rsquo;s role doesn\u0026rsquo;t extend to direct CDI bean discovery. Instead, it supplies information\nto the CDI container. During the container\u0026rsquo;s initiation, it delves into the Jandex index to identify\npotential beans and the annotations associated with them. This enables the CDI container to curate\nthe beans available for injection and other CDI functionalities.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample: Automatic Bean Discovery with Jandex:\u003c/strong\u003e\nImagine creating a custom Quarkus extension. By annotating a class with CDI-specific annotations\nlike \u003ccode\u003e@ApplicationScoped\u003c/code\u003e,\nJandex, via its indexing prowess, effortlessly identifies and makes these classes available for CDI.\nThis harmonious integration\nstreamlines the extension process and ensures precise bean identification.\u003c/p\u003e\n\u003ch2 id=\"2-additionalindexedclassesbuilditem-explicit-jandex-indexing\"\u003e2. AdditionalIndexedClassesBuildItem: Explicit Jandex Indexing\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eUnderstanding AdditionalIndexedClassesBuildItem:\u003c/strong\u003e\nIn cases where you seek more control over class indexing, the \u003ccode\u003eAdditionalIndexedClassesBuildItem\u003c/code\u003e\nemerges as a valuable tool.\nIt empowers you to explicitly augment the Jandex index with classes that might otherwise remain\nunindexed.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWhen to Use AdditionalIndexedClassesBuildItem:\u003c/strong\u003e\nThis tool is particularly useful when classes outside of typical bean discovery need to be indexed\nfor other purposes.\nThese classes might belong to third-party libraries or external tools requiring metadata access.\nBy leveraging \u003ccode\u003eAdditionalIndexedClassesBuildItem\u003c/code\u003e, you guarantee proper indexing and metadata\navailability.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUsage of AdditionalIndexedClassesBuildItem:\u003c/strong\u003e\nBy providing specific class names to AdditionalIndexedClassesBuildItem\u0026rsquo;s constructor, you precisely\ndictate which classes receive metadata\nindexing. Regardless of annotations or interfaces, you exercise control over the indexing process.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample: Explicitly Indexing Custom Configuration Classes:\u003c/strong\u003e\nImagine crafting an extension that requires metadata access to configuration classes from diverse\nsources.\nThese classes may not boast CDI annotations, but their metadata remains vital.\nThrough \u003ccode\u003eAdditionalIndexedClassesBuildItem\u003c/code\u003e, you secure their inclusion in the Jandex index,\nensuring accessible metadata for your extension.\u003c/p\u003e\n\u003ch2 id=\"3-additionalbeanbuilditem-explicit-bean-registration\"\u003e3. AdditionalBeanBuildItem: Explicit Bean Registration\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eUnderstanding AdditionalBeanBuildItem:\u003c/strong\u003e\nWhile Jandex handles automatic bean discovery, you might require a more involved approach. This is\nwhere AdditionalBeanBuildItem steps in,\nempowering you to explicitly register classes as CDI beans.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWhen to Use AdditionalBeanBuildItem:\u003c/strong\u003e\nCustom utility classes, third-party libraries, or unconventional beans might necessitate inclusion\nin the CDI context.\nBy embracing \u003ccode\u003eAdditionalBeanBuildItem\u003c/code\u003e, you enforce bean treatment irrespective of annotations or\nauto-discovery.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUsage of AdditionalBeanBuildItem:\u003c/strong\u003e\nThrough \u003ccode\u003eAdditionalBeanBuildItem\u003c/code\u003e, you specify class names to be registered as beans. This\nflexibility allows you to\nseamlessly incorporate custom beans essential to your extension\u0026rsquo;s functionality.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample: Registering Custom Utility Classes as CDI Beans:\u003c/strong\u003e\nImagine building an extension that furnishes additional error handling utilities. These utilities\nmight lack CDI annotations\nbut require injection capabilities. \u003ccode\u003eAdditionalBeanBuildItem\u003c/code\u003e facilitates explicit registration of\nthese utilities as CDI beans,\namplifying their accessibility.\u003c/p\u003e\n\u003ch2 id=\"4-combining-approaches-using-both-jandex-and-additionalbeanbuilditem\"\u003e4. Combining Approaches: Using Both Jandex and AdditionalBeanBuildItem\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eAdvantages of Combining Approaches:\u003c/strong\u003e\nHarnessing the strengths of both Jandex and \u003ccode\u003eAdditionalBeanBuildItem\u003c/code\u003e offers strategic leverage.\nThis hybrid approach strikes a\nbalance between automated discovery and explicit control, granting you the power to cherry-pick\nbeans while enjoying default discovery\nbenefits.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePotential Issues and Solutions:\u003c/strong\u003e\nThe synergy between these approaches is powerful, but vigilance is essential to avert duplicate bean\nregistrations.\nOverlapping registrations between automatic Jandex indexing and explicit \u003ccode\u003eAdditionalBeanBuildItem\u003c/code\u003e\ninclusion can lead to conflicts.\nCareful coordination ensures seamless coexistence.\u003c/p\u003e\n\u003ch2 id=\"5-native-build-considerations-impact-of-jandex-and-additionalbeanbuilditem\"\u003e5. Native Build Considerations: Impact of Jandex and AdditionalBeanBuildItem\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eJandex and Native Build:\u003c/strong\u003e\nUnderstand that GraalVM\u0026rsquo;s native build process doesn\u0026rsquo;t engage directly with the Jandex index. Native\nbuild concentrates on compiling\nthe Java application into a native binary, leveraging compiled Java classes and dependencies.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAdditionalBeanBuildItem and Native Build:\u003c/strong\u003e\nSimilarly, native build isn\u0026rsquo;t heavily impacted by AdditionalBeanBuildItem\u0026rsquo;s presence or absence.\nBean registration doesn\u0026rsquo;t significantly\nalter native build outcomes, which center on compiling and optimizing the application into a native\nbinary.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eConclusion: Navigating Jandex and AdditionalBeanBuildItem\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThrough this journey, the nuances of Jandex and \u003ccode\u003eAdditionalBeanBuildItem\u003c/code\u003e have been unraveled.\nJandex\u0026rsquo;s role in metadata provision\nand CDI\u0026rsquo;s execution has been clarified, alongside AdditionalBeanBuildItem\u0026rsquo;s explicit bean\nregistration. Remember, Jandex doesn\u0026rsquo;t\nautomatically transform classes into CDI beans; the CDI container is pivotal. Leverage these tools\nstrategically, aligning\nchoices with your extension\u0026rsquo;s demands for seamless integration in Quarkus\u0026rsquo; CDI framework.\u003c/p\u003e\n",
      "url": "https://iqnev.github.io/posts/jandex-vs-additional-bean-builditem/",
      "date_published": "26096-26-09T94:2626:00+03:00",
      "date_modified": "26096-26-09T94:2626:00+03:00",
      "author": {
        "name": "Calvin Tran",
        "url": "https://iqnev.github.io/"
      }
    }
    
  ]
}