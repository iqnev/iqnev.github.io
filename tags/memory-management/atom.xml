<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Memory Management on Codes are a puzzle</title>
    <link>https://iqnev.github.io/tags/memory-management/</link>
    <description>Recent content in Memory Management on Codes are a puzzle</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 May 2024 11:04:18 +0300</lastBuildDate>
    <atom:link href="https://iqnev.github.io/tags/memory-management/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Memory Management in GraalVM Native Image</title>
      <link>https://iqnev.github.io/posts/memory_management_in_graalvm_native_image/</link>
      <pubDate>Sun, 26 May 2024 11:04:18 +0300</pubDate>
      <guid>https://iqnev.github.io/posts/memory_management_in_graalvm_native_image/</guid>
      <description>Memory management is a crucial component of computer software development, tasked with the effective allocation, utilization, and release of memory in applications. Its importance lies in enhancing software performance and ensuring system stability.&#xA;Garbage Collection Garbage collection (GC) is pivotal in contemporary programming languages such as Java and Go. It autonomously detects and recycles unused memory, thereby alleviating the need for developers to manually manage memory. The concept of GC originally emerged in the LISP programming language in the late 1950s, marking the introduction of automated memory management.</description>
    </item>
  </channel>
</rss>
