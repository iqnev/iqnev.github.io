<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quarkus on Codes are a puzzle</title>
    <link>https://iqnev.github.io/tags/quarkus/</link>
    <description>Recent content in Quarkus on Codes are a puzzle</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Nov 2023 11:04:18 +0300</lastBuildDate>
    <atom:link href="https://iqnev.github.io/tags/quarkus/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exploring Synthetic Beans in Quarkus: A Powerful Extension Mechanism</title>
      <link>https://iqnev.github.io/posts/exploring-synthetic-beans-in-quarkus-a-powerful-extension-mechanism/</link>
      <pubDate>Sat, 11 Nov 2023 11:04:18 +0300</pubDate>
      <guid>https://iqnev.github.io/posts/exploring-synthetic-beans-in-quarkus-a-powerful-extension-mechanism/</guid>
      <description>In the world of Quarkus, the realm of dependency injection is rich and versatile, offering developers a multitude of tools to manage and control beans. One such tool is the concept of synthetic beans. Synthetic beans are a powerful extension mechanism that allows you to register beans whose attributes are not derived from a Java class, method, or field. Instead, all the attributes of a synthetic bean are defined by an extension.</description>
    </item>
    <item>
      <title>Creating Custom Configuration in Quarkus Loaded from JSON File</title>
      <link>https://iqnev.github.io/posts/load-configuration-from-json-file/</link>
      <pubDate>Sat, 14 Oct 2023 21:00:18 +0300</pubDate>
      <guid>https://iqnev.github.io/posts/load-configuration-from-json-file/</guid>
      <description>Introduction Quarkus, a framework for building lightweight, fast, and efficient Java applications, offers developers the flexibility to create custom configurations loaded from JSON files. These custom configurations can be seamlessly integrated into your Quarkus application, enhancing its configurability and adaptability. To achieve this, Quarkus utilizes Eclipse MicroProfile Config ( MP-Config), with the SmallRye implementation providing the necessary tools. In this article, we&amp;rsquo;ll delve into the process of crafting custom configurations and loading them from JSON files within Quarkus, all while exploring the mechanics of SmallRye&amp;rsquo;s MP-Config implementation.</description>
    </item>
    <item>
      <title>Extending Quarkus: When and How to Write Your Own Extensions</title>
      <link>https://iqnev.github.io/posts/when-and-how-to-write-your-own-extensions/</link>
      <pubDate>Sun, 08 Oct 2023 21:29:18 +0300</pubDate>
      <guid>https://iqnev.github.io/posts/when-and-how-to-write-your-own-extensions/</guid>
      <description>Quarkus, with its innovative extension framework, offers developers a powerful way to integrate various technologies seamlessly into their applications. These extensions simplify configuration, enable dependency injection, and optimize performance, making it an attractive option for Java developers. However, before diving into creating your own Quarkus extension, it&amp;rsquo;s crucial to understand when it&#39; s necessary and how to do it effectively.
When to Create a Quarkus Extension Complex Integrations: If you&amp;rsquo;re working with complex frameworks like ORM mappers, reactive clients, or data access libraries, creating an extension can help manage the intricacies of configuration and dependency management.</description>
    </item>
    <item>
      <title>Demystifying Quarkus Extension Development: Jandex vs. AdditionalBeanBuildItem</title>
      <link>https://iqnev.github.io/posts/jandex-vs-additional-bean-builditem/</link>
      <pubDate>Tue, 26 Sep 2023 23:04:18 +0300</pubDate>
      <guid>https://iqnev.github.io/posts/jandex-vs-additional-bean-builditem/</guid>
      <description>Welcome to a comprehensive exploration of two key aspects in Quarkus extension development: Jandex and AdditionalBeanBuildItem. This article aims to elucidate the differences between these approaches, offering insights into their roles, applications, and the intricate interplay between them. By the end, you&amp;rsquo;ll have a clear understanding of how to wield these tools effectively in your Quarkus extensions.
1. Jandex: Automatic Bean Discovery and Indexing Understanding Jandex and Its Role: In the realm of Quarkus extensions, beans are the building blocks of functionality, and Contexts and Dependency Injection (CDI) is the mechanism that governs their management.</description>
    </item>
  </channel>
</rss>
