<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GraalVM on Codes are a puzzle</title>
    <link>https://iqnev.github.io/tags/graalvm/</link>
    <description>Recent content in GraalVM on Codes are a puzzle</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Nov 2023 14:04:18 +0300</lastBuildDate>
    <atom:link href="https://iqnev.github.io/tags/graalvm/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Registering Reflection in Quarkus Extensions</title>
      <link>https://iqnev.github.io/posts/registering-reflection-in-quarkus-extensions/</link>
      <pubDate>Sun, 26 Nov 2023 14:04:18 +0300</pubDate>
      <guid>https://iqnev.github.io/posts/registering-reflection-in-quarkus-extensions/</guid>
      <description>Quarkus utilizes ahead-of-time (AOT) compilation to build blazing fast native executables. However, AOT works through closed-world analysis which eliminates unused code paths. This can break functionality relying on runtime reflection like dependency injection, bytecode manipulation, and integration with certain libraries.
Registering for Reflection When building a native executable, GraalVM operates under a closed-world assumption, analyzing the call tree and eliminating unused classes, methods, and fields. To include elements requiring reflective access, explicit registration becomes crucial.</description>
    </item>
  </channel>
</rss>
