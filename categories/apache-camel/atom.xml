<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apache Camel on Codes are a puzzle</title>
    <link>https://iqnev.github.io/categories/apache-camel/</link>
    <description>Recent content in Apache Camel on Codes are a puzzle</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://iqnev.github.io/categories/apache-camel/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mastering Data Routing in Apache Camel: Leveraging the Splitter Pattern</title>
      <link>https://iqnev.github.io/posts/mastering_data_routing_in_apache_camel_leveraging_the_splitter_pattern/</link>
      <pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://iqnev.github.io/posts/mastering_data_routing_in_apache_camel_leveraging_the_splitter_pattern/</guid>
      <description>Hello again! In my upcoming articles, I plan to explore several key patterns provided by Apache Camel that are invaluable for your ETL processes. This current article focuses on the Splitter Enterprise Integration Pattern (EIP).&#xA;Overview Messages passed to integration applications often arrive in a format that is less than ideal for immediate processing. Frequently, these are composite messages containing multiple elements, each requiring individual processing. This is where the Splitter pattern proves beneficial by dividing incoming messages into a sequence of more manageable messages.</description>
    </item>
    <item>
      <title>Exploring Core Features and Components of Apache Camel</title>
      <link>https://iqnev.github.io/posts/exploring_core_features_and_components_of_apache_camel/</link>
      <pubDate>Sun, 16 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://iqnev.github.io/posts/exploring_core_features_and_components_of_apache_camel/</guid>
      <description>Hello friends! In our previous discussion, we delved into the integration of Apache Camel with Quarkus, demonstrating how to craft real-world applications using Apache Camel. As we continue our series, we aim to take a deep dive into the crucial components and the intrinsic details of Apache Camel.&#xA;Enterprise Integration Patterns At its core, Apache Camel is structured around the concepts introduced in the Enterprise Integration Patterns (EIP) book by Gregor Hohpe and Bobby Woolf.</description>
    </item>
    <item>
      <title>Practical Guide to Apache Camel with Quarkus: Building an ETL Application</title>
      <link>https://iqnev.github.io/posts/practical_guide_to_apache_camel_with_quarkus/</link>
      <pubDate>Sun, 09 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://iqnev.github.io/posts/practical_guide_to_apache_camel_with_quarkus/</guid>
      <description>I am excited to introduce a series of articles about Apache Camel. In this first post, rather than delving deeply into the complexities of Apache Camel, I will present a practical use case to showcase its capabilities. Specifically, you&amp;rsquo;ll learn how to create a simple Extract, Transform, and Load (ETL) application between two databases using Apache Camel.&#xA;Introduction to Apache Camel - Brief Overview Before we dive into the practical use case, let&amp;rsquo;s briefly introduce Apache Camel.</description>
    </item>
  </channel>
</rss>
